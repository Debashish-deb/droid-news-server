// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/l10n/app_localizations.dart ===

import 'package:flutter/material.dart';

class AppLocalizations {
  final Locale locale;
  AppLocalizations(this.locale);

  static AppLocalizations of(BuildContext context) =>
      Localizations.of<AppLocalizations>(context, AppLocalizations)!;

  static const LocalizationsDelegate<AppLocalizations> delegate = _AppLocalizationsDelegate();

  // General UI
  String get invalidEmail => _t('‡¶Ö‡¶¨‡ßà‡¶ß ‡¶á‡¶Æ‡ßá‡¶≤', 'Invalid Email');
  String get close => _t('‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶®', 'Close');
  String get home => _t('‡¶π‡ßã‡¶Æ', 'Home');
  String get profile => _t('‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤', 'Profile');
  String get editProfile => _t('‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶Æ‡ßç‡¶™‡¶æ‡¶¶‡¶®‡¶æ', 'Edit Profile');
  String get settings => _t('‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏', 'Settings');
  String get theme => _t('‡¶•‡¶ø‡¶Æ', 'Theme');
  String get language => _t('‡¶≠‡¶æ‡¶∑‡¶æ', 'Language');
  String get darkTheme => _t('‡¶°‡¶æ‡¶∞‡ßç‡¶ï', 'Dark');
  String get lightTheme => _t('‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ', 'Default');
  String get deshTheme => _t('‡¶¶‡ßá‡¶∂', 'Desh');
  String get version => _t('‡¶∏‡¶Ç‡¶∏‡ßç‡¶ï‡¶∞‡¶£', 'Version');
  String get clearCache => _t('‡¶ï‡ßç‡¶≤‡¶ø‡¶Ø‡¶º‡¶æ‡¶∞‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂', 'Clear Cache');
  String get clearCacheSuccess => _t('‡¶ï‡ßç‡¶≤‡¶ø‡¶Ø‡¶º‡¶æ‡¶∞‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶∏‡¶æ‡¶´‡¶≤‡ßç‡¶Ø', 'Clear Cache Success');
  String get versionPrefix => _t('‡¶∏‡¶Ç‡¶∏‡ßç‡¶ï‡¶∞‡¶£', 'Version');
  String get bdNewsreader => _t('‡¶¨‡¶ø‡¶°‡¶ø ‡¶®‡¶ø‡¶â‡¶ú ‡¶∞‡¶ø‡¶°‡¶æ‡¶∞ üì∞', 'BD News Reader üì∞');
  String get otherOptions => _t('‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶¨‡¶ø‡¶ï‡¶≤‡ßç‡¶™', 'Other Options');
   

  String get paypalDonate => _t('‡¶™‡ßá‡¶™‡ßç‡¶Ø‡¶æ‡¶≤ ‚Äã‚Äã‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®', ' Paypal Donate');
  String get removeAds => _t('‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶® ‡¶∏‡¶∞‡¶æ‡¶®', 'Remove Ads');
  String get adsRemoved => _t('‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶® ‡¶∏‡¶∞‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá', 'Ads Removed');
  
  // Auth
  String get login => _t('‡¶≤‡¶ó‡¶á‡¶®', 'Login');
  String get logout => _t('‡¶≤‡¶ó‡¶Ü‡¶â‡¶ü', 'Logout');
  String get signup => _t('‡¶∏‡¶æ‡¶á‡¶® ‡¶Ü‡¶™', 'Sign Up');
  String get password => _t('‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°', 'Password');
  String get email => _t('‡¶á‡¶Æ‡ßá‡¶á‡¶≤', 'Email');
  String get search => _t('‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶® ', 'Search');
  String get help => _t('‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø', 'Help');
  String get appTitle => _t('‡¶¨‡¶ø‡¶°‡¶ø ‡¶®‡¶ø‡¶â‡¶ú ‡¶∞‡¶ø‡¶°‡¶æ‡¶∞', 'BD News Reader');
  String get fullName => _t('‡¶™‡ßÅ‡¶∞‡ßã ‡¶®‡¶æ‡¶Æ', 'Full Name');
  String get name => _t('‡¶®‡¶æ‡¶Æ', 'Name');
  String get enterName => _t('‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®','Enter Name');
  String get save => _t('‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®', 'Save');
  String get enterEmail => _t('‡¶á‡¶Æ‡ßá‡¶≤ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®', 'Enter Email'); 
  String get forgotPassword => _t('‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶≠‡ßÅ‡¶≤‡ßá ‡¶ó‡ßá‡¶õ‡ßá‡¶®', 'Forgot Password');
  String get sendResetLink => _t('‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶™‡¶æ‡¶†‡¶æ‡¶®', 'Send Reset Link');
  String get enterEmailReset => _t('‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶á‡¶Æ‡ßá‡¶≤ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®:', 'Enter your email to reset your password:');
  String get alreadyHaveAccount => _t('‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶Ü‡¶õ‡ßá?', 'Already have an account? Login');
  String get createAccount => _t('‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®', 'Create account');
  String get invalidCredentials => _t('‡¶≠‡ßÅ‡¶≤ ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶¨‡¶æ ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°‡•§', 'Invalid email or password.');
  String get noAccountFound => _t('‡¶è‡¶á ‡¶á‡¶Æ‡ßá‡¶á‡¶≤‡ßá ‡¶ï‡ßã‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶®‡ßá‡¶á‡•§', 'No account found for this email.');
  String get accountExists => _t('‡¶è‡¶á ‡¶á‡¶Æ‡ßá‡¶á‡¶≤‡ßá ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶Ü‡¶õ‡ßá‡•§', 'An account already exists with this email.');
  String get resetEmailSent => _t('üìß ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶∞‡¶ø‡¶∏‡ßá‡¶ü ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!', 'üìß Password reset email sent!');

  // Profile Fields
  String get phone => _t('‡¶´‡ßã‡¶®', 'Phone');
  String get bio => _t('‡¶ú‡ßÄ‡¶¨‡¶® ‡¶¨‡ßÉ‡¶§‡ßç‡¶§‡¶æ‡¶®‡ßç‡¶§', 'Bio');
  String get address => _t('‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ', 'Address');
  String get website => _t('‡¶ì‡¶Ø‡¶º‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü', 'Website');
  String get role => _t('‡¶≠‡ßÇ‡¶Æ‡¶ø‡¶ï‡¶æ', 'Role');
  String get department => _t('‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó', 'Department');
  String get changeImage => _t('‡¶õ‡¶¨‡¶ø ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®', 'Change Image');
  String get removeImage => _t('‡¶õ‡¶¨‡¶ø ‡¶Ö‡¶™‡¶∏‡¶æ‡¶∞‡¶£', 'Remove Image');
  String get noUserConnected => _t('‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶∏‡¶Ç‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶®‡ßá‡¶á', 'No user connected yet');
  String get scrollController => _t('‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡ßã‡¶≤ ‡¶ï‡¶®‡ßç‡¶ü‡ßç‡¶∞‡ßã‡¶≤‡¶æ‡¶∞', 'Scroll Controller');
 
  String get saveChanges => _t('‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®', 'Save Changes');
  String get profileSaved => _t('‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶ø‡¶§', 'Profile saved');
  String get required => _t('‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï', 'Required');
  String get details => _t('‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§', 'Details');
  String get dailyQuiz => _t('‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶ï‡ßÅ‡¶á‡¶ú', 'Daily Quiz');
  String get notAnswered => _t('‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü‡¶®‡¶ø', 'Not Answered');
  String get lookup => _t('‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶®', 'Lookup');
  String get tryAgain => _t('‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®', 'Try Again');
  String get quizSummary => _t('‡¶ï‡ßÅ‡¶á‡¶ú‡ßá‡¶∞ ‡¶∏‡¶æ‡¶∞‡¶æ‡¶Ç‡¶∂', 'Quiz Summary');
 
  String get finish => _t('‡¶∏‡¶Æ‡¶æ‡¶™‡ßç‡¶§', 'Finish');
  String get correct => _t('‡¶∏‡¶†‡¶ø‡¶ï', 'Correct');
  String get yourAnswer => _t('‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞', 'Your Answer');
  String get highScore => _t('‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶∏‡ßç‡¶ï‡ßã‡¶∞', 'High Score');
  String get streak => _t('‡¶ß‡¶æ‡¶∞‡¶æ', 'Streak');
  String get recentSearches => _t('‡¶∏‡¶æ‡¶Æ‡ßç‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ï ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶®‡¶ó‡ßÅ‡¶≤‡¶ø', 'Recent Searches');
  
  String get latest => _t('‡¶∏‡¶∞‡ßç‡¶¨‡¶∂‡ßá‡¶∑', 'latest');
  String get quiz => _t('‡¶ï‡ßÅ‡¶á‡¶ú', 'Quiz');
  String get newspapers => _t('‡¶∏‡¶Ç‡¶¨‡¶æ‡¶¶‡¶™‡¶§‡ßç‡¶∞', 'Newspapers');
  String get magazines => _t('‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ó‡¶æ‡¶ú‡¶ø‡¶®', 'Magazines');
  String get favorites => _t('‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º', 'Favorites');
  String get national => _t('‡¶ú‡¶æ‡¶§‡ßÄ‡¶Ø‡¶º', 'National');
  String get international => _t('‡¶Ü‡¶®‡ßç‡¶§‡¶∞‡ßç‡¶ú‡¶æ‡¶§‡¶ø‡¶ï', 'International');
  String get businessFinance => _t('‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡¶æ ‡¶ì ‡¶Ö‡¶∞‡ßç‡¶•‡¶®‡ßÄ‡¶§‡¶ø', 'Business & Finance');
  String get digitalTech => _t('‡¶°‡¶ø‡¶ú‡¶ø‡¶ü‡¶æ‡¶≤ ‡¶ì ‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø', 'Digital & Technology');
  String get sportsNews => _t('‡¶ñ‡ßá‡¶≤‡¶æ‡¶∞ ‡¶ñ‡¶¨‡¶∞', 'Sports News');
  String get entertainmentArts => _t('‡¶¨‡¶ø‡¶®‡ßã‡¶¶‡¶® ‡¶ì ‡¶∂‡¶ø‡¶≤‡ßç‡¶™', 'Entertainment & Arts');
  String get worldPolitics => _t('‡¶¨‡¶ø‡¶∂‡ßç‡¶¨ ‡¶ì ‡¶∞‡¶æ‡¶ú‡¶®‡ßÄ‡¶§‡¶ø', 'World & Politics');
  String get blog => _t('‡¶¨‡ßç‡¶≤‡¶ó', 'Blog');
  String get business => _t('‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡¶æ', 'Business');
  String get sports => _t('‡¶ñ‡ßá‡¶≤‡¶æ', 'Sports');
  String get satire => _t('‡¶π‡¶æ‡¶∏‡ßç‡¶Ø‡¶∞‡¶∏', 'Satire');
  String get technology => _t('‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø', 'Technology');
  String get entertainment => _t('‡¶¨‡¶ø‡¶®‡ßã‡¶¶‡¶®', 'Entertainment');
  String get lifestyle => _t('‡¶ú‡ßÄ‡¶¨‡¶®‡¶ß‡¶æ‡¶∞‡¶æ', 'LifeStyle');
  String get translateTooltip      => _t('‡¶Ö‡¶®‡ßÅ‡¶¨‡¶æ‡¶¶ ‡¶ï‡¶∞‡ßÅ‡¶®', 'Translate');
  String get alwaysTranslateLabel  => _t('‡¶∏‡¶¨‡¶∏‡¶Æ‡ßü ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡ßü ‡¶Ö‡¶®‡ßÅ‡¶¨‡¶æ‡¶¶ ‡¶ï‡¶∞‡ßÅ‡¶®', 'Always translate to Bengali');
  String get increaseFontSize      => _t('‡¶≤‡ßá‡¶ñ‡¶æ ‡¶¨‡ßú ‡¶ï‡¶∞‡ßÅ‡¶®', 'Increase font size');
  String get toggleDarkMode        => _t('‡¶°‡¶æ‡¶∞‡ßç‡¶ï ‡¶Æ‡ßã‡¶° ‡¶ö‡¶æ‡¶≤‡ßÅ/‡¶¨‡¶®‡ßç‡¶ß', 'Toggle dark mode');
  String get readerMode            => _t('‡¶∞‡¶ø‡¶°‡¶æ‡¶∞ ‡¶Æ‡ßã‡¶° ‡¶ö‡¶æ‡¶≤‡ßÅ/‡¶¨‡¶®‡ßç‡¶ß', 'Toggle reader mode');
  String get mobileView            => _t('‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤-‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡¶∏‡ßÅ‡¶≤‡¶≠ ‡¶Æ‡ßã‡¶°', 'Mobile-friendly view');
  String get desktopView           => _t('‡¶Æ‡ßÇ‡¶≤ ‡¶°‡ßá‡¶∏‡ßç‡¶ï‡¶ü‡¶™ ‡¶Æ‡ßã‡¶°', 'Original desktop view');
  String get tryAmp                => _t('‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ AMP ‡¶∏‡¶Ç‡¶∏‡ßç‡¶ï‡¶∞‡¶£ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®', 'Try AMP version');
  String get originalView          => _t('‡¶Æ‡ßÇ‡¶≤ ‡¶∏‡¶Ç‡¶∏‡ßç‡¶ï‡¶∞‡¶£ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®', 'Switch to original version');
  String get sharePage             => _t('‡¶™‡ßÉ‡¶∑‡ßç‡¶†‡¶æ ‡¶∂‡ßá‡ßü‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®', 'Share this page');
  String get bookmarkPage          => _t('‡¶™‡ßÉ‡¶∑‡ßç‡¶†‡¶æ ‡¶¨‡ßÅ‡¶ï‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®', 'Bookmark this page');
  String get bookmarkSuccess       => _t('‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!', 'URL saved successfully!');
    // Premium Features
  String get bangladeshTheme => _t('‡¶¶‡ßá‡¶∂ üáßüá©', 'Desh üáßüá©');
  String get adFree => _t('‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶®‡¶¨‡¶ø‡¶π‡ßÄ‡¶® ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û‡¶§‡¶æ', 'Ad-Free Experience');
  String get adFreeHint => _t('‡¶™‡¶∞‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∞ ‡¶™‡¶°‡¶º‡¶æ‡¶∞ ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û‡¶§‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶® ‡¶∏‡¶∞‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡•§', 'Removes all ads for a clean reading experience.');
  String get offlineDownloads => _t('‡¶Ö‡¶´‡¶≤‡¶æ‡¶á‡¶® ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°', 'Offline Downloads');
  String get offlineHint => _t('‡¶Ö‡¶´‡¶≤‡¶æ‡¶á‡¶®‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶®‡¶ü‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§', 'Save content locally for offline viewing.');
  String get prioritySupport => _t('‡¶™‡ßç‡¶∞‡¶æ‡¶ß‡¶æ‡¶®‡ßç‡¶Ø ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ', 'Priority Support');
  String get prioritySupportHint => _t('‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ ‡¶ü‡¶ø‡¶Æ ‡¶•‡ßá‡¶ï‡ßá ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ‡•§', 'Get faster responses from our support team.');

  String get back => _t('‡¶™‡¶ø‡¶õ‡¶®‡ßá ‡¶Ø‡¶æ‡¶®', 'Go back');
  String get forward => _t('‡¶∏‡¶æ‡¶Æ‡¶®‡ßá ‡¶Ø‡¶æ‡¶®', 'Go forward');
  String get refresh => _t('‡¶∞‡¶ø‡¶´‡ßç‡¶∞‡ßá‡¶∂ ‡¶ï‡¶∞‡ßÅ‡¶®', 'Refresh');
  String get translate => _t('‡¶Ö‡¶®‡ßÅ‡¶¨‡¶æ‡¶¶ ‡¶ï‡¶∞‡¶æ', 'Translate');
  String get share => _t('‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®', 'Share');
  String get bookmark => _t('‡¶¨‡ßÅ‡¶ï‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï', 'Bookmark');
  String get moreOptions => _t('‡¶Ü‡¶∞‡¶ì ‡¶¨‡¶ø‡¶ï‡¶≤‡ßç‡¶™', 'More Options');
  String get darkMode => _t('‡¶°‡¶æ‡¶∞‡ßç‡¶ï ‡¶Æ‡ßã‡¶°', 'Dark Mode');
  String get productNotAvailable => _t('‡¶™‡¶£‡ßç‡¶Ø ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶®‡¶Ø‡¶º', 'Product Not Available');
    // Search and Empty States
  String get searchHint => _t('‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®...', 'Search...');
  String get searchPapers => _t('‡¶™‡¶§‡ßç‡¶∞‡¶ø‡¶ï‡¶æ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®‚Ä¶', 'Search‚Ä¶');
  String get noMagazines => _t('‡¶ï‡ßã‡¶® ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ó‡¶æ‡¶ú‡¶ø‡¶® ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø', 'No magazines found');
  String get noPapersFound => _t('‡¶ï‡ßã‡¶® ‡¶∏‡¶Ç‡¶¨‡¶æ‡¶¶‡¶™‡¶§‡ßç‡¶∞ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø', 'No papers found');
  String get allLanguages => _t('‡¶∏‡¶¨ ‡¶≠‡¶æ‡¶∑‡¶æ', 'All Languages');

  // Categories for Magazines
  String get catFashion => _t('‡¶´‡ßç‡¶Ø‡¶æ‡¶∂‡¶® ‡¶ì ‡¶∏‡ßå‡¶®‡ßç‡¶¶‡¶∞‡ßç‡¶Ø', 'Fashion & Aesthetics');
  String get catScience => _t('‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶® ‡¶ì ‡¶Ü‡¶¨‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∞', 'Science & Discovery');
  String get catFinance => _t('‡¶Ö‡¶∞‡ßç‡¶•‡¶®‡ßÄ‡¶§‡¶ø ‡¶ì ‡¶Ö‡¶∞‡ßç‡¶•', 'Economics & Finance');
  String get catAffairs => _t('‡¶Ü‡¶®‡ßç‡¶§‡¶∞‡ßç‡¶ú‡¶æ‡¶§‡¶ø‡¶ï ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï', 'Global Affairs');
  String get catTech => _t('‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø', 'Emerging Technologies');
  String get catArts => _t('‡¶∂‡¶ø‡¶≤‡ßç‡¶™ ‡¶ì ‡¶Æ‡¶æ‡¶®‡¶¨‡¶ø‡¶ï‡¶§‡¶æ', 'Arts & Humanities');
  String get misc => _t('‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø', 'Miscellaneous');
  String get catLifestyle => _t('‡¶ú‡ßÄ‡¶¨‡¶®‡¶ß‡¶æ‡¶∞‡¶æ ‡¶ì ‡¶¨‡¶ø‡¶≤‡¶æ‡¶∏‡¶ø‡¶§‡¶æ', 'Lifestyle & Luxury');
  String get catSports => _t('‡¶ñ‡ßá‡¶≤‡¶æ ‡¶ì ‡¶™‡¶æ‡¶∞‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶∏', 'Sports & Performance');

  // Feedback
  String get feedback => _t('‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ', 'Feedback');
  String get rateApp => _t('‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶∞‡ßá‡¶ü ‡¶¶‡¶ø‡¶®', 'Rate this App');
  String get contactSupport => _t('‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó', 'Contact Support');
  String get contactEmail => 'customerservice@dsmobiles.com';
  String get mailClientError => _t('‡¶Æ‡ßá‡¶á‡¶≤ ‡¶ï‡ßç‡¶≤‡¶æ‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§', 'Could not launch mail client.');
  String get storeOpenError => _t('‡¶∏‡ßç‡¶ü‡ßã‡¶∞ ‡¶ñ‡ßÅ‡¶≤‡¶§‡ßá ‡¶Ö‡¶ï‡ßç‡¶∑‡¶Æ‡•§', 'Unable to open store.');
  String get viewArticle => _t('‡¶®‡¶ø‡¶¨‡¶®‡ßç‡¶ß ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®', 'View Article');
  String get loadError => _t('‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•', 'Load failed');
  String get getStarted => _t('‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®', 'Get Started');
  String get next => _t('‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ', 'Next');
  String get fastReliable => _t('‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶è‡¶¨‡¶Ç ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø', 'Fast & Reliable');
  String get personalizedExperience => _t('‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø‡¶ó‡¶§ ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û‡¶§‡¶æ', 'Personalized Experience');
  String get favoriteArticles=> _t('‡¶™‡ßç‡¶∞‡¶ø‡ßü ‡¶™‡ßç‡¶∞‡¶¨‡¶®‡ßç‡¶ß', 'Favorite Articles');
  String get favoriteMagazines => _t('‡¶™‡ßç‡¶∞‡¶ø‡ßü ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ó‡¶æ‡¶ú‡¶ø‡¶®', 'Favorite Magazines');
  String get favoriteNewspapers => _t('‡¶™‡ßç‡¶∞‡¶ø‡ßü ‡¶∏‡¶Ç‡¶¨‡¶æ‡¶¶‡¶™‡¶§‡ßç‡¶∞', 'Favorite Newspapers');
  String get noFavoritesYet => _t('‡¶ï‡ßã‡¶®‡¶ì ‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶®‡ßá‡¶á', 'No Favorites Yet');
  String get continueWithGoogle => _t('‡¶ó‡ßÅ‡¶ó‡¶≤‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶ö‡¶æ‡¶≤‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶®', 'Continue With Google');
  String get articles => _t('‡¶™‡ßç‡¶∞‡¶¨‡¶®‡ßç‡¶ß', 'articles');
  String get noArticlesFound => _t('‡¶ï‡ßã‡¶® ‡¶®‡¶ø‡¶¨‡¶®‡ßç‡¶ß ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø', 'No Articles Found');
  String get bangla => _t('‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ', 'Bengali');
  String get english => _t('‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø', 'English');
  String get supports => _t('‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü', 'Supports');
  String get health => _t('‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø', 'Health');
  String get opinion => _t('‡¶Æ‡¶§‡¶æ‡¶Æ‡¶§', 'Opinion');
  String get about => _t('‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá', 'About');
  String get education => _t('‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ', 'Education');
  String get loading => _t('‡¶≤‡ßã‡¶°‡¶ø‡¶Ç', 'Loading');
  String get guest => _t('‡¶Ö‡¶§‡¶ø‡¶•‡¶ø', 'Guest');

  String get errorLoadingProfile => _t('‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá', 'Error Loading Profile');

  String? get googlePay => null;

  String? get paypalError => null;

  String? get paypalCard => null;

  get topicLabel => null;
  // Translation Helper
  String _t(String bn, String en) => locale.languageCode == 'bn' ? bn : en;
}
class _AppLocalizationsDelegate extends LocalizationsDelegate<AppLocalizations> {
  const _AppLocalizationsDelegate();

  @override
  bool isSupported(Locale locale) => ['en', 'bn'].contains(locale.languageCode);

  @override
  Future<AppLocalizations> load(Locale locale) async => AppLocalizations(locale);

  @override
  bool shouldReload(covariant LocalizationsDelegate<AppLocalizations> old) => false;
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/routes.dart ===

// File: lib/routes.dart

import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:flutter/foundation.dart';

import '../data/models/news_article.dart';
import '../features/movies/movie.dart';
import 'app_paths.dart';
import '../../features/profile/auth_service.dart';
import '../../features/profile/profile_screen.dart';

// Splash & Onboarding
import '../../features/splash/splash_screen.dart';
import '../../features/onboarding/onboarding_screen.dart';

// Auth
import '../../features/profile/login_screen.dart';
import '../../features/profile/signup_screen.dart';
import '../../features/profile/forgot_password_screen.dart';

// Main & Tabs
import '../../main_navigation_screen.dart';
import '../../features/news/newspaper_screen.dart';
import '../../features/magazine/magazine_screen.dart';
import '../../features/settings/settings_screen.dart';
import '../../features/extras/extras_screen.dart';

// Misc
import '../../features/favorites/favorites_screen.dart';
import '../../features/about/about_screen.dart';
import '../../features/help/help_screen.dart';
import '../../features/search/search_screen.dart';

// Details & WebView
import '../../features/news_detail/news_detail_screen.dart';
import '../../features/common/webview_screen.dart';
import '../../features/movies/movie_detail_screen.dart';

/// Fires when AuthService.login/logout happens
final _authRefresh = ValueNotifier<bool>(AuthService().isLoggedIn);

class AppRouter {
  AppRouter._();

  static GoRouter createRouter({ required String initialLocation }) {
    return GoRouter(
      debugLogDiagnostics: kDebugMode,
      initialLocation: initialLocation,
      refreshListenable: _authRefresh,
      redirect: (context, state) {
        final loggedIn = AuthService().isLoggedIn;
        final goingToLogin = state.uri.toString() == AppPaths.login;

        if (!loggedIn && !goingToLogin) return AppPaths.login;
        if ( loggedIn && goingToLogin)  return AppPaths.home;
        return null;
      },
      errorPageBuilder: (context, state) => MaterialPage(
        key: state.pageKey,
        child: const _ErrorScreen(),
      ),
      routes: [
        GoRoute(path: AppPaths.splash, pageBuilder: (ctx, state) => MaterialPage(
          key: state.pageKey,
          child: const SplashScreen(),
        )),

        GoRoute(path: AppPaths.onboarding, pageBuilder: (ctx, state) => MaterialPage(
          key: state.pageKey,
          child: const OnboardingScreen(),
        )),

        GoRoute(path: AppPaths.profile, pageBuilder: (ctx, state) => MaterialPage(
          key: state.pageKey,
          child: const ProfileScreen(),
        )),

        GoRoute(path: AppPaths.login, pageBuilder: (ctx, state) => MaterialPage(
          key: state.pageKey,
          child: const LoginScreen(),
        )),

        GoRoute(path: AppPaths.signup, pageBuilder: (ctx, state) => MaterialPage(
          key: state.pageKey,
          child: const SignupScreen(),
        )),

        GoRoute(path: AppPaths.forgotPassword, pageBuilder: (ctx, state) => MaterialPage(
          key: state.pageKey,
          child: const ForgotPasswordScreen(),
        )),

        GoRoute(path: AppPaths.home, pageBuilder: (ctx, state) => MaterialPage(
          key: state.pageKey,
          child: const MainNavigationScreen(selectedTab: 0),
        )),

        // Deep links for each tab (optional)
        GoRoute(path: AppPaths.newspaper, pageBuilder: (ctx, state) => MaterialPage(
          key: state.pageKey,
          child: const NewspaperScreen(),
        )),
        GoRoute(path: AppPaths.magazines, pageBuilder: (ctx, state) => MaterialPage(
          key: state.pageKey,
          child: const MagazineScreen(),
        )),
        GoRoute(path: AppPaths.settings, pageBuilder: (ctx, state) => MaterialPage(
          key: state.pageKey,
          child: const SettingsScreen(),
        )),
        GoRoute(path: AppPaths.extras, pageBuilder: (ctx, state) => MaterialPage(
          key: state.pageKey,
          child: const ExtrasScreen(),
        )),

        GoRoute(path: AppPaths.favorites, pageBuilder: (ctx, state) => MaterialPage(
          key: state.pageKey,
          child: const FavoritesScreen(),
        )),
        GoRoute(path: AppPaths.about, pageBuilder: (ctx, state) => MaterialPage(
          key: state.pageKey,
          child: const AboutScreen(),
        )),
        GoRoute(path: AppPaths.supports, pageBuilder: (ctx, state) => MaterialPage(
          key: state.pageKey,
          child: const HelpScreen(),
        )),
        GoRoute(path: AppPaths.search, pageBuilder: (ctx, state) => MaterialPage(
          key: state.pageKey,
          child: const SearchScreen(),
        )),

        GoRoute(
          path: AppPaths.newsDetail,
          pageBuilder: (ctx, state) {
            final news = state.extra! as NewsArticle;
            return MaterialPage(
              key: state.pageKey,
              child: NewsDetailScreen(news: news),
            );
          },
        ),

        GoRoute(
          path: AppPaths.webview,
          pageBuilder: (ctx, state) {
          final args = Map<String, dynamic>.from(state.extra as Map);
            return MaterialPage(
              key: state.pageKey,
              child: WebViewScreen(
  url: args['url']!,
  title: args['title'] ?? '',
),


            );
          },
        ),

        GoRoute(
          path: AppPaths.movieDetail,
          pageBuilder: (ctx, state) {
            final movie = state.extra! as Movie;
            return MaterialPage(
              key: state.pageKey,
              child: MovieDetailScreen(movie: movie),
            );
          },
        ),

        // ... add any other routes here ...
      ],
    );
  }
}

class _ErrorScreen extends StatelessWidget {
  const _ErrorScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) => Scaffold(
    body: Center(
      child: Column(mainAxisSize: MainAxisSize.min, children: [
        Icon(Icons.error_outline, size: 80, color: Theme.of(context).colorScheme.error),
        const SizedBox(height: 16),
        Text('Oops! Something went wrong.', style: Theme.of(context).textTheme.titleLarge),
      ]),
    ),
  );
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/app_paths.dart ===

/// Holds all route path constants for navigation
class AppPaths {
  static const String splash = '/splash';
  static const String onboarding = '/onboarding';
  static const String login = '/login';
  static const String signup = '/signup';
  static const String forgotPassword = '/forgot-password';
  static const String home = '/home';
  static const String newspaper = '/newspaper';
  static const String magazines = '/magazines';
  static const String settings = '/settings';
  static const String extras = '/extras';
  static const String favorites = '/favorites';
  static const String about = '/about';
  static const String supports = '/supports';
  static const String search = '/search';
  static const String profile = '/profile';
  static const String newsDetail = '/news-detail';
  static const String webview = '/webview';
  static const String movieDetail = '/movies/:id';
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/utils.dart ===

// File: lib/utils/date_time_utils.dart

import 'package:intl/intl.dart';

class DateTimeUtils {
  /// Returns current date in format like: Monday, April 7, 2025
  static String getCurrentDate() {
    return DateFormat.yMMMMEEEEd().format(DateTime.now());
  }

  /// Returns current time in format like: 5:30 PM
  static String getCurrentTime() {
    return DateFormat.jm().format(DateTime.now());
  }

  /// Formats any DateTime object to a readable string.
  static String formatDateTime(DateTime dateTime, {String pattern = 'yMMMMEEEEd'}) {
    return DateFormat(pattern).format(dateTime);
  }

  /// Returns a human-readable "time ago" or "in time" format.
  static String timeAgo(
    DateTime dateTime, {
    String minute = 'minute',
    String hour = 'hour',
    String day = 'day',
    String week = 'week',
    String month = 'month',
    String year = 'year',
    String ago = 'ago',
    String inPrefix = 'In',
    String justNow = 'Just now',
    String fewSeconds = 'In a few seconds',
  }) {
    final Duration diff = DateTime.now().difference(dateTime);

    if (diff.inSeconds.abs() < 60) return diff.isNegative ? fewSeconds : justNow;
    if (diff.inMinutes.abs() < 60) {
      final int minutes = diff.inMinutes.abs();
      return diff.isNegative
          ? '$inPrefix $minutes $minute${minutes == 1 ? '' : 's'}'
          : '$minutes $minute${minutes == 1 ? '' : 's'} $ago';
    }
    if (diff.inHours.abs() < 24) {
      final int hours = diff.inHours.abs();
      return diff.isNegative
          ? '$inPrefix $hours $hour${hours == 1 ? '' : 's'}'
          : '$hours $hour${hours == 1 ? '' : 's'} $ago';
    }
    if (diff.inDays.abs() < 7) {
      final int days = diff.inDays.abs();
      return diff.isNegative
          ? '$inPrefix $days $day${days == 1 ? '' : 's'}'
          : '$days $day${days == 1 ? '' : 's'} $ago';
    }
    if (diff.inDays.abs() < 30) {
      final int weeks = (diff.inDays.abs() / 7).floor();
      return diff.isNegative
          ? '$inPrefix $weeks $week${weeks == 1 ? '' : 's'}'
          : '$weeks $week${weeks == 1 ? '' : 's'} $ago';
    }
    if (diff.inDays.abs() < 365) {
      final int months = (diff.inDays.abs() / 30).floor();
      return diff.isNegative
          ? '$inPrefix $months $month${months == 1 ? '' : 's'}'
          : '$months $month${months == 1 ? '' : 's'} $ago';
    }
    final int years = (diff.inDays.abs() / 365).floor();
    return diff.isNegative
        ? '$inPrefix $years $year${years == 1 ? '' : 's'}'
        : '$years $year${years == 1 ? '' : 's'} $ago';
  }
}

class StringUtils {
  /// Capitalizes the first letter of a string.
  static String capitalize(String text) {
    if (text.isEmpty) return text;
    return text[0].toUpperCase() + text.substring(1);
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/utils/network_manager.dart ===

// path: lib/core/utils/network_manager.dart

import 'package:connectivity_plus/connectivity_plus.dart';

enum NetworkSpeed { fast, slow, unknown }

class NetworkManager {
  static Future<NetworkSpeed> getConnectionSpeed() async {
    final result = await Connectivity().checkConnectivity();
    if (result == ConnectivityResult.none) return NetworkSpeed.unknown;

    // Simple, non-blocking heuristic: consider non-WiFi as "slow"
    if (result == ConnectivityResult.mobile) return NetworkSpeed.slow;
    if (result == ConnectivityResult.wifi) return NetworkSpeed.fast;

    return NetworkSpeed.unknown;
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/utils/favorites_manager.dart ===

// lib/core/utils/favorites_manager.dart

import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import '../../data/models/news_article.dart';

class FavoritesManager {
  static final FavoritesManager _instance = FavoritesManager._internal();
  FavoritesManager._internal();
  static FavoritesManager get instance => _instance;

  static const String favoritesKey = 'favorites';
  static const String magazineFavoritesKey = 'magazine_favorites';
  static const String newspaperFavoritesKey = 'newspaper_favorites';

  List<NewsArticle> _favoriteArticles = [];
  List<Map<String, dynamic>> _favoriteMagazines = [];
  List<Map<String, dynamic>> _favoriteNewspapers = [];

  List<NewsArticle> get favoriteArticles => _favoriteArticles;
  List<Map<String, dynamic>> get favoriteMagazines => _favoriteMagazines;
  List<Map<String, dynamic>> get favoriteNewspapers => _favoriteNewspapers;

  Future<void> loadFavorites() async {
    final prefs = await SharedPreferences.getInstance();
    final articleJson       = prefs.getStringList(favoritesKey) ?? [];
    final magazineJson      = prefs.getStringList(magazineFavoritesKey) ?? [];
    final newspaperJson     = prefs.getStringList(newspaperFavoritesKey) ?? [];

    _favoriteArticles = articleJson
        .map((str) => NewsArticle.fromMap(json.decode(str)))
        .toList();

    _favoriteMagazines = magazineJson
        .map((str) => Map<String, dynamic>.from(json.decode(str)))
        .toList();

    _favoriteNewspapers = newspaperJson
        .map((str) => Map<String, dynamic>.from(json.decode(str)))
        .toList();
  }

  // -------------------------
  // Articles

  Future<void> addFavorite(NewsArticle article) async {
    final prefs = await SharedPreferences.getInstance();
    _favoriteArticles.add(article);
    await prefs.setStringList(
      favoritesKey,
      _favoriteArticles.map((e) => json.encode(e.toMap())).toList(),
    );
  }

  Future<void> removeFavorite(NewsArticle article) async {
    final prefs = await SharedPreferences.getInstance();
    _favoriteArticles.removeWhere((e) => e.url == article.url);
    await prefs.setStringList(
      favoritesKey,
      _favoriteArticles.map((e) => json.encode(e.toMap())).toList(),
    );
  }

  /// Toggle article in favorites (add if missing, remove if already favorited)
  Future<void> toggleArticle(NewsArticle article) async {
    final prefs = await SharedPreferences.getInstance();
    final exists = _favoriteArticles.any((e) => e.url == article.url);
    if (exists) {
      _favoriteArticles.removeWhere((e) => e.url == article.url);
    } else {
      _favoriteArticles.add(article);
    }
    await prefs.setStringList(
      favoritesKey,
      _favoriteArticles.map((e) => json.encode(e.toMap())).toList(),
    );
  }

  /// Check synchronously if an article is favorited
  bool isFavoriteArticle(NewsArticle article) {
    return _favoriteArticles.any((e) => e.url == article.url);
  }

  // -------------------------
  // Magazines

  Future<void> toggleMagazine(Map<String, dynamic> magazine) async {
    final prefs = await SharedPreferences.getInstance();
    final id     = magazine['id'].toString();
    final isFav  = _favoriteMagazines.any((m) => m['id'].toString() == id);

    if (isFav) {
      _favoriteMagazines.removeWhere((m) => m['id'].toString() == id);
    } else {
      _favoriteMagazines.add(magazine);
    }

    await prefs.setStringList(
      magazineFavoritesKey,
      _favoriteMagazines.map((m) => json.encode(m)).toList(),
    );
  }

  bool isFavoriteMagazine(String id) {
    return _favoriteMagazines.any((m) => m['id'].toString() == id);
  }

  // -------------------------
  // Newspapers

  Future<void> toggleNewspaper(Map<String, dynamic> newspaper) async {
    final prefs = await SharedPreferences.getInstance();
    final id     = newspaper['id'].toString();
    final isFav  = _favoriteNewspapers.any((n) => n['id'].toString() == id);

    if (isFav) {
      _favoriteNewspapers.removeWhere((n) => n['id'].toString() == id);
    } else {
      _favoriteNewspapers.add(newspaper);
    }

    await prefs.setStringList(
      newspaperFavoritesKey,
      _favoriteNewspapers.map((n) => json.encode(n)).toList(),
    );
  }

  bool isFavoriteNewspaper(String id) {
    return _favoriteNewspapers.any((n) => n['id'].toString() == id);
  }

  toggleArticleMap(Map<String, dynamic> item) {}
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/utils/og_image_fetcher.dart ===

import 'package:html/dom.dart';
import 'package:http/http.dart' as http;
import 'package:html/parser.dart' as html_parser;
import 'package:logger/logger.dart';

final Logger logger = Logger();

/// Fetches the best available image from a webpage (og:image or twitter:image).
Future<String?> fetchBestImageFromUrl(String url) async {
  try {
    final http.Response response = await http.get(Uri.parse(url));

    if (response.statusCode == 200) {
      final Document document = html_parser.parse(response.body);

      // Try Open Graph image first
      final Element? ogImageMeta = document.querySelector('meta[property="og:image"]');
      if (ogImageMeta != null && ogImageMeta.attributes['content'] != null) {
        return ogImageMeta.attributes['content'];
      }

      // Fallback: Try Twitter Card image
      final Element? twitterImageMeta = document.querySelector('meta[name="twitter:image"]');
      if (twitterImageMeta != null && twitterImageMeta.attributes['content'] != null) {
        return twitterImageMeta.attributes['content'];
      }
    }

    return null; // No image found
  } catch (e, stackTrace) {
    logger.e('Error fetching image from URL: $url', error: e, stackTrace: stackTrace);
    return null;
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/utils/source_logos.dart ===

// path: lib/data/constants/source_logos.dart

class SourceLogos {
  static const Map<String, String> logos = {
    // ‚îÄ‚îÄ‚îÄ Bengali Newspapers ‚îÄ‚îÄ‚îÄ
    '‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶Ü‡¶≤‡ßã': 'assets/logos/prothomalo.png',
    '‡¶ï‡¶æ‡¶≤‡ßá‡¶∞ ‡¶ï‡¶£‡ßç‡¶†': 'assets/logos/kalerkantho.png',
    '‡¶¨‡¶ø‡¶°‡¶ø‡¶®‡¶ø‡¶â‡¶ú‡ß®‡ß™ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ': 'assets/logos/bdnews24.png',
    '‡¶Ø‡ßÅ‡¶ó‡¶æ‡¶®‡ßç‡¶§‡¶∞': 'assets/logos/jugantor.png',
    '‡¶á‡¶§‡ßç‡¶§‡ßá‡¶´‡¶æ‡¶ï': 'assets/logos/ittefaq.png',
    '‡¶Ü‡¶®‡¶®‡ßç‡¶¶‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞ ‡¶™‡¶§‡ßç‡¶∞‡¶ø‡¶ï‡¶æ': 'assets/logos/anandabazar.png',
    '‡¶è‡¶á ‡¶∏‡¶Æ‡ßü': 'assets/logos/eisamay.png',
    '‡¶∏‡¶Ç‡¶¨‡¶æ‡¶¶ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¶‡¶ø‡¶®': 'assets/logos/sangbadpratidin.png',
    '‡¶∏‡¶Æ‡¶ï‡¶æ‡¶≤': 'assets/logos/samakal.png',
    '‡¶¨‡¶£‡¶ø‡¶ï ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ': 'assets/logos/bonikbarta.png',
    '‡¶¢‡¶æ‡¶ï‡¶æ ‡¶ü‡¶æ‡¶á‡¶Æ‡¶∏': 'assets/logos/dhakatimes.png',
    '‡¶ó‡ßá‡¶ú‡ßá‡¶ü‡¶¨‡¶ø‡¶°‡¶ø': 'assets/logos/gazetebd.png',
    '‡¶ü‡ßá‡¶ï ‡¶∂‡¶π‡¶∞': 'assets/logos/techshohor.png',
    '‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º.‡¶ï‡¶Æ': 'assets/logos/priyo.png',
    '‡¶∞‡ßã‡¶∞ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ': 'assets/logos/roarbangla.png',

    // ‚îÄ‚îÄ‚îÄ English Newspapers ‚îÄ‚îÄ‚îÄ
    'CNN Top Stories': 'assets/logos/cnn.png',
    'BBC World News': 'assets/logos/bbc.png',
    'Reuters Top News': 'assets/logos/reuters.png',
    'The Guardian World': 'assets/logos/guardian.png',
    'Dhaka Tribune': 'assets/logos/dhakatribune.png',
    'Daily Star National': 'assets/logos/dailystar.png',
    'New York Times US': 'assets/logos/nytimes.png',
    'Financial Times': 'assets/logos/ft.png',
    'Forbes': 'assets/logos/forbes.png',
    'Bloomberg Business': 'assets/logos/bloomberg.png',
    'Sky Sports': 'assets/logos/skysports.png',
    'ESPN Top Sports': 'assets/logos/espn.png',
    'BBC Sports': 'assets/logos/bbc_sports.png',

    // ‚îÄ‚îÄ‚îÄ Tech ‚îÄ‚îÄ‚îÄ
    'TechCrunch': 'assets/logos/techcrunch.png',
    'Ars Technica': 'assets/logos/arstechnica.png',
    'The Verge Tech': 'assets/logos/theverge.png',

    // ‚îÄ‚îÄ‚îÄ Entertainment ‚îÄ‚îÄ‚îÄ
    'Billboard': 'assets/logos/billboard.png',
    'Variety': 'assets/logos/variety.png',
    'Hollywood Reporter': 'assets/logos/hollywoodreporter.png',

    // ‚îÄ‚îÄ‚îÄ Lifestyle & Blog ‚îÄ‚îÄ‚îÄ
    'Lifehack': 'assets/logos/lifehack.png',
    'MindBodyGreen': 'assets/logos/mindbodygreen.png',
    'VeryWell Health': 'assets/logos/verywellhealth.png',
    'Medium Technology': 'assets/logos/medium.png',
    'Dev.to': 'assets/logos/devto.png',
    'Hashnode Blogs': 'assets/logos/hashnode.png',

    // ‚îÄ‚îÄ‚îÄ Magazines / Bonus Sources ‚îÄ‚îÄ‚îÄ
    'Roar ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ': 'assets/logos/roarbangla.png',
    'Amar Bangla BD': 'assets/logos/amarbanglabd.png',
    'TBS News': 'assets/logos/tbsnews.png',
    'BD24Live': 'assets/logos/bd24live.png',
  };
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/navigation_helper.dart ===

// lib/core/navigation_helper.dart

import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';

import '../features/movies/movie.dart';

class NavigationHelper {
  static void goHome(BuildContext context) {
    context.go('/home');
  }

  static void goNewspaper(BuildContext context) {
    context.go('/newspaper');
  }

  static void goMagazines(BuildContext context) {
    context.go('/magazines');
  }

  static void goSettings(BuildContext context) {
    context.go('/settings');
  }

  static void goFavorites(BuildContext context) {
    context.go('/favorites');
  }

  static void goAbout(BuildContext context) {
    context.go('/about');
  }

  static void goHelp(BuildContext context) {
    context.go('/supports');
  }

  static void goSearch(BuildContext context) {
    context.go('/search');
  }

  static void goProfile(BuildContext context) {
    context.go('/profile');
  }

  static void goEditProfile(BuildContext context) {
    context.go('/edit-profile');
  }

  static void goLogin(BuildContext context) {
    context.go('/login');
  }

  static void goSignup(BuildContext context) {
    context.go('/signup');
  }

  static void goForgotPassword(BuildContext context) {
    context.go('/forgot-password');
  }

  static void goWebView(
    BuildContext context, {
    required String url,
    String? title,
  }) {
    context.go('/webview', extra: {'url': url, 'title': title ?? 'Web View'});
  }

  static void goNewsDetail(BuildContext context, dynamic article) {
    context.go('/news-detail', extra: article);
  }

  /// Navigate to the movie detail page, carrying the Movie as extra.
  static void goMovieDetail(BuildContext context, Movie movie) {
    context.go('/movies/${movie.id}', extra: movie);
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/premium_service.dart ===

import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

/// A single, app-wide service that holds "isPremium" state.
class PremiumService extends ChangeNotifier {
  static const _key = 'is_premium';

  final SharedPreferences prefs;
  PremiumService({required this.prefs});

  bool _isPremium = false;

  /// Returns true if the user has purchased premium access.
  bool get isPremium => _isPremium;

  /// Returns true if ads should be shown (i.e., not premium).
  bool get shouldShowAds => !_isPremium;

  /// Call once on app startup to load the saved premium state.
  Future<void> loadStatus() async {
    _isPremium = prefs.getBool(_key) ?? false;
    notifyListeners();
  }

  /// Call when a purchase completes or user upgrades to premium.
  Future<void> setPremium(bool value) async {
    await prefs.setBool(_key, value);
    _isPremium = value;
    notifyListeners();
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/language_provider.dart ===

import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

class LanguageProvider extends ChangeNotifier {
  static const String _languageKey = 'languageCode';

  Locale _locale = const Locale('en');
  Locale get locale => _locale;

  LanguageProvider() {
    _loadLocale();
  }

  Future<void> _loadLocale() async {
    final prefs = await SharedPreferences.getInstance();
    final storedCode = prefs.getString(_languageKey);
    if (storedCode != null && storedCode != _locale.languageCode) {
      _locale = Locale(storedCode);
      notifyListeners();
    }
  }

  Future<void> setLocale(String code) async {
    if (code == _locale.languageCode) return;
    _locale = Locale(code);
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_languageKey, code);
    notifyListeners();
  }

  Future<void> resetLocale() async {
    _locale = const Locale('en');
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove(_languageKey);
    notifyListeners();
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/splash_service.dart ===

// lib/core/splash_service.dart
import 'package:shared_preferences/shared_preferences.dart';

class SplashService {
  final SharedPreferences prefs;

  SplashService({required this.prefs});

  static const String onboardingCompletedKey = 'onboardingCompleted';
  static const String isLoggedInKey = 'isLoggedIn';

  Future<String> resolveInitialRoute() async {
    final hasSeenOnboarding = prefs.getBool(onboardingCompletedKey) ?? false;
    final isLoggedIn = prefs.getBool(isLoggedInKey) ?? false;

    if (!hasSeenOnboarding) {
      return '/onboarding';
    } else if (!isLoggedIn) {
      return '/login';
    } else {
      return '/home';
    }
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/pinned_http_client.dart ===

import 'dart:io';
import 'package:flutter/services.dart' show rootBundle;
import 'package:http/io_client.dart';

/// A utility for creating HTTP clients with certificate pinning.
///
/// Bundle your trusted server certificates under assets/certs/, for example:
///   - assets/certs/newsapi.pem
///   - assets/certs/openweathermap.pem
///
/// Then declare them in pubspec.yaml under flutter/assets.

class PinnedHttpClient {
  /// Creates an [IOClient] that trusts only the certificate at [assetPath].
  ///
  /// [assetPath] is the path to a PEM file in your assets, e.g. 'assets/certs/newsapi.pem'.
  static Future<IOClient> create(String assetPath) async {
    // Load the certificate bytes from assets
    final certData = await rootBundle.load(assetPath);

    // Create a new SecurityContext that does NOT include the platform's default CAs
    final context = SecurityContext(withTrustedRoots: false)
      ..setTrustedCertificatesBytes(certData.buffer.asUint8List());

    // Optionally verify the server DNS/IP matches
    final httpClient = HttpClient(context: context)
      // Reject certificates not matching the pinned one
      ..badCertificateCallback = (X509Certificate cert, String host, int port) => false;

    return IOClient(httpClient);
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/theme_provider.dart ===

import 'package:flutter/material.dart';

/// Defines the available theme modes for the app.
enum AppThemeMode {
  light,
  dark,
  bangladesh,
}

/// Provides theme state management and glassmorphic utilities.
class ThemeProvider with ChangeNotifier {
  AppThemeMode _currentTheme = AppThemeMode.light;

  /// Returns the current app theme mode.
  AppThemeMode get appThemeMode => _currentTheme;

  /// Returns the corresponding [ThemeMode] based on [AppThemeMode].
  ThemeMode get themeMode {
    switch (_currentTheme) {
      case AppThemeMode.dark:
      case AppThemeMode.bangladesh:
        return ThemeMode.dark;
      case AppThemeMode.light:
      default:
        return ThemeMode.light;
    }
  }

  /// Changes the app theme to the given [AppThemeMode].
  void toggleTheme(AppThemeMode mode) {
    if (_currentTheme != mode) {
      _currentTheme = mode;
      notifyListeners();
    }
  }

  /// Semi-transparent 'glass' overlay color for panels.
  Color get glassColor {
    switch (_currentTheme) {
      case AppThemeMode.dark:
        return Colors.black.withOpacity(0.3);
      case AppThemeMode.bangladesh:
        return const Color(0xFF00796B).withOpacity(0.3);
      case AppThemeMode.light:
      default:
        return Colors.white.withOpacity(0.3);
    }
  }

  /// Golden border color for glass panels when in dark mode.
  Color get borderColor {
    return _currentTheme == AppThemeMode.dark
        ? const Color(0xFFFFD700)
        : Colors.white.withOpacity(0.2);
  }

  /// A subtle frosted shadow for glass panels.
  List<BoxShadow> get glassShadows => [
        BoxShadow(
          color: Colors.black.withOpacity(0.15),
          blurRadius: 20,
          offset: const Offset(0, 4),
        ),
        BoxShadow(
          color: Colors.white.withOpacity(0.05),
          blurRadius: 2,
          offset: const Offset(0, -1),
        ),
      ];

  /// Floating/glow text style to boost visibility on glass.
  TextStyle floatingTextStyle({
    Color? color,
    double fontSize = 18,
    FontWeight fontWeight = FontWeight.bold,
  }) {
    final baseColor = 
        color ?? (_currentTheme == AppThemeMode.dark ? Colors.white : Colors.black);
    return TextStyle(
      color: baseColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      shadows: [
        Shadow(
          color: baseColor.withOpacity(0.25),
          blurRadius: 8,
          offset: const Offset(0, 2),
        ),
        Shadow(
          color: baseColor.withOpacity(0.15),
          blurRadius: 16,
          offset: const Offset(0, 4),
        ),
      ],
    );
  }

  /// Build a glassmorphic container decoration with golden border in dark mode.
  BoxDecoration glassDecoration({BorderRadius? borderRadius}) {
    return BoxDecoration(
      color: glassColor,
      borderRadius: borderRadius ?? BorderRadius.circular(16),
      border: Border.all(color: borderColor, width: 1.5),
      boxShadow: glassShadows,
      backgroundBlendMode: BlendMode.overlay,
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/constants.dart ===

import 'package:flutter/material.dart';

// Goku Siyan Mode Activated!
// Unleash the energy with these legendary constants for colors, sizes, and icons.

// AppColors: Our palette of super-powered hues.
class AppColors {
  // A dazzling light primary color, like the flash of a Kamehameha!
  static const Color primaryLight = Color(0xFF007BFF);
  // A deep, mysterious dark primary color, perfect for intense battles.
  static const Color primaryDark = Color(0xFF121212);
  // An accent color that sparks energy and power‚Äîunleash your inner spirit!
  static const Color accent = Color(0xFF00C853);
  // Error color that signals a fight must be won‚Äîfight through any challenge!
  static const Color error = Color(0xFFD32F2F);
  // A light background color to illuminate your UI like a Super Saiyan aura.
  static const Color backgroundLight = Color(0xFFF5F5F5);
  // A dark background color to ground your design with powerful depth.
  static const Color backgroundDark = Color(0xFF181818);
}

// AppSizes: The precise measurements that define your battle-ready layout.
class AppSizes {
  // Small padding for those quick, agile moves.
  static const double paddingSmall = 8.0;
  // Medium padding ‚Äì balanced and steady like a well-trained fighter.
  static const double paddingMedium = 16.0;
  // Large padding to dominate the field, giving you room to shine.
  static const double paddingLarge = 24.0;

  // Corner radius to soften edges‚Äîbecause even warriors need a bit of style.
  static const double cornerRadius = 16.0;
}

// AppIcons: The iconic symbols that drive your UI energy.
class AppIcons {
  // The app's emblem, as bold as a freshly forged legend.
  static const IconData appIcon = Icons.newspaper;
  // Settings icon to fine-tune your Super Saiyan power.
  static const IconData settingsIcon = Icons.settings;
  // Share icon to spread the energy far and wide.
  static const IconData shareIcon = Icons.share;
  // Favorite icon to mark your most epic moments.
  static const IconData favoriteIcon = Icons.favorite;
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/user_service.dart ===

import 'package:cloud_firestore/cloud_firestore.dart';

class UserService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  Future<void> saveUserProfile({
    required String email,
    required String name,
    required String avatarUrl,
  }) async {
    final userDoc = _firestore.collection('users').doc(email);
    await userDoc.set({
      'name': name,
      'email': email,
      'avatar': avatarUrl,
      'updatedAt': FieldValue.serverTimestamp(),
    }, SetOptions(merge: true));
  }

  Future<Map<String, dynamic>?> getUserProfile(String email) async {
    final userDoc = await _firestore.collection('users').doc(email).get();
    return userDoc.exists ? userDoc.data() : null;
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/theme.dart ===

import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'theme_provider.dart';

class AppTheme {
  static ThemeData buildLightTheme() => ThemeData(
        useMaterial3: true,
        colorScheme: lightColorScheme,
        brightness: Brightness.light,
        scaffoldBackgroundColor: lightColorScheme.background.withOpacity(0.95),
        textTheme: GoogleFonts.poppinsTextTheme().copyWith(
          bodyLarge: GoogleFonts.poppins(color: Colors.black87, fontSize: 16),
          bodyMedium: GoogleFonts.poppins(color: Colors.black54, fontSize: 14),
          headlineLarge: GoogleFonts.poppins(color: Colors.black, fontSize: 28, fontWeight: FontWeight.bold),
          headlineMedium: GoogleFonts.poppins(color: Colors.black87, fontSize: 22, fontWeight: FontWeight.bold),
          titleLarge: GoogleFonts.poppins(color: Colors.black, fontSize: 20, fontWeight: FontWeight.bold),
          titleMedium: GoogleFonts.poppins(color: Colors.black87, fontSize: 18),
          labelLarge: GoogleFonts.poppins(color: Colors.black87, fontSize: 14),
        ),
        appBarTheme: AppBarTheme(
          backgroundColor: lightColorScheme.surface.withOpacity(0.8),
          foregroundColor: Colors.black,
          elevation: 0,
        ),
        cardTheme: CardTheme(
          color: Colors.white.withOpacity(0.7),
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
          elevation: 8,
          shadowColor: Colors.black26,
        ),
        inputDecorationTheme: _inputDecorationTheme(lightColorScheme),
        dropdownMenuTheme: _dropdownMenuTheme(lightColorScheme),
        chipTheme: _chipTheme(lightColorScheme),
      );

  static ThemeData buildDarkTheme() {
    const gold = Color(0xFFFFD700);
    return ThemeData(
      useMaterial3: true,
      colorScheme: darkColorScheme.copyWith(
        background: const Color(0xFF121417),
        surface: const Color(0xFF1A1D20).withOpacity(0.6),
      ),
      brightness: Brightness.dark,
      scaffoldBackgroundColor: const Color(0xFF121417).withOpacity(0.95),
      textTheme: GoogleFonts.poppinsTextTheme().copyWith(
        bodyLarge: GoogleFonts.poppins(color: Colors.white70, fontSize: 16),
        bodyMedium: GoogleFonts.poppins(color: Colors.white60, fontSize: 14),
        headlineLarge: GoogleFonts.poppins(color: Colors.white, fontSize: 28, fontWeight: FontWeight.bold),
        headlineMedium: GoogleFonts.poppins(color: Colors.white70, fontSize: 22, fontWeight: FontWeight.bold),
        titleLarge: GoogleFonts.poppins(color: Colors.white, fontSize: 20, fontWeight: FontWeight.bold),
        titleMedium: GoogleFonts.poppins(color: Colors.white70, fontSize: 18),
        labelLarge: GoogleFonts.poppins(color: Colors.white70, fontSize: 14),
      ),
      appBarTheme: AppBarTheme(
        backgroundColor: const Color(0xFF1A1D20).withOpacity(0.6),
        foregroundColor: Colors.white,
        elevation: 0,
        titleTextStyle: GoogleFonts.poppins(
          color: Colors.white,
          fontSize: 20,
          fontWeight: FontWeight.bold,
          shadows: [Shadow(color: gold.withOpacity(0.4), blurRadius: 8)],
        ),
        iconTheme: const IconThemeData(color: Colors.white70),
      ),
      cardTheme: CardTheme(
        color: const Color(0xFF1C1F22).withOpacity(0.5),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(16),
          side: const BorderSide(color: gold, width: 2),
        ),
        elevation: 12,
        shadowColor: gold.withOpacity(0.3),
      ),
      inputDecorationTheme: _inputDecorationTheme(darkColorScheme, overrideFocus: gold),
      dropdownMenuTheme: _dropdownMenuTheme(darkColorScheme),
      chipTheme: _chipTheme(darkColorScheme),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: const Color(0xFF1A1D20).withOpacity(0.6),
          side: const BorderSide(color: gold, width: 2),
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          elevation: 6,
          shadowColor: gold.withOpacity(0.4),
          textStyle: GoogleFonts.poppins(color: Colors.white, fontWeight: FontWeight.bold),
        ),
      ),
      iconTheme: const IconThemeData(color: Colors.white70),
    );
  }

  static ThemeData buildBangladeshTheme() => ThemeData(
        useMaterial3: true,
        colorScheme: bangladeshColorScheme,
        brightness: Brightness.dark,
        scaffoldBackgroundColor: bangladeshColorScheme.background.withOpacity(0.95),
        textTheme: GoogleFonts.poppinsTextTheme().copyWith(
          bodyLarge: GoogleFonts.poppins(color: Colors.white70, fontSize: 16),
          bodyMedium: GoogleFonts.poppins(color: Colors.white60, fontSize: 14),
          headlineLarge: GoogleFonts.poppins(color: Colors.white, fontSize: 28, fontWeight: FontWeight.bold),
          headlineMedium: GoogleFonts.poppins(color: Colors.white70, fontSize: 22, fontWeight: FontWeight.bold),
          titleLarge: GoogleFonts.poppins(color: Colors.white, fontSize: 20, fontWeight: FontWeight.bold),
          titleMedium: GoogleFonts.poppins(color: Colors.white70, fontSize: 18),
          labelLarge: GoogleFonts.poppins(color: Colors.white70, fontSize: 14),
        ),
        appBarTheme: AppBarTheme(
          backgroundColor: bangladeshColorScheme.surface.withOpacity(0.8),
          foregroundColor: Colors.white,
          elevation: 0,
        ),
        cardTheme: CardTheme(
          color: bangladeshColorScheme.surface.withOpacity(0.5),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16),
            side: const BorderSide(color: Color(0xFFFF0000), width: 2),
          ),
          elevation: 10,
          shadowColor: Colors.black45,
        ),
        inputDecorationTheme: _inputDecorationTheme(bangladeshColorScheme, overrideFocus: const Color(0xFFFF0000)),
        dropdownMenuTheme: _dropdownMenuTheme(bangladeshColorScheme),
        chipTheme: _chipTheme(bangladeshColorScheme),
        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
            backgroundColor: bangladeshColorScheme.surface.withOpacity(0.3),
            side: const BorderSide(color: Color(0xFFFF0000), width: 2),
            elevation: 6,
            shadowColor: Colors.red.withOpacity(0.4),
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          ),
        ),
        iconTheme: const IconThemeData(color: Colors.white70),
      );

  static InputDecorationTheme _inputDecorationTheme(ColorScheme scheme, {Color? overrideFocus}) {
    final focusColor = overrideFocus ?? scheme.secondary;
    return InputDecorationTheme(
      filled: true,
      fillColor: scheme.surface.withOpacity(0.5),
      border: OutlineInputBorder(borderRadius: BorderRadius.circular(12), borderSide: BorderSide.none),
      focusedBorder: OutlineInputBorder(borderRadius: BorderRadius.circular(12), borderSide: BorderSide(color: focusColor, width: 2)),
      hintStyle: TextStyle(color: scheme.brightness == Brightness.dark ? Colors.white60 : Colors.black54),
      labelStyle: TextStyle(color: scheme.brightness == Brightness.dark ? Colors.white : Colors.black87, fontWeight: FontWeight.bold),
      floatingLabelStyle: TextStyle(color: scheme.brightness == Brightness.dark ? Colors.white : scheme.primary),
    );
  }

  static DropdownMenuThemeData _dropdownMenuTheme(ColorScheme scheme) {
    return DropdownMenuThemeData(
      menuStyle: MenuStyle(
        backgroundColor: MaterialStateProperty.all(
          scheme.brightness == Brightness.dark ? scheme.surface.withOpacity(0.8) : Colors.white,
        ),
        shape: MaterialStateProperty.all(RoundedRectangleBorder(borderRadius: BorderRadius.circular(12))),
      ),
    );
  }

  static ChipThemeData _chipTheme(ColorScheme scheme) {
    return ChipThemeData(
      brightness: scheme.brightness,
      backgroundColor: scheme.surfaceVariant,
      selectedColor: scheme.primaryContainer,
      disabledColor: scheme.onSurface.withOpacity(0.12),
      labelStyle: TextStyle(color: scheme.onSurface),
      secondaryLabelStyle: TextStyle(color: scheme.onPrimary),
      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
      shape: StadiumBorder(side: BorderSide(color: scheme.onSurface.withOpacity(0.12))),
    );
  }
}

final ColorScheme lightColorScheme = ColorScheme.light(
  primary: const Color(0xFF1565C0),
  secondary: const Color(0xFF42A5F5),
  background: const Color(0xFFE3F2FD),
  surface: const Color(0xFFBBDEFB),
);

final ColorScheme darkColorScheme = ColorScheme.dark(
  primary: const Color(0xFF42A5F5),
  secondary: const Color(0xFF1565C0),
  background: const Color(0xFF121417),
  surface: const Color(0xFF1A1D20),
);

final ColorScheme bangladeshColorScheme = ColorScheme.dark(
  primary: const Color.fromARGB(255, 0, 96, 37),
  secondary: const Color(0xFF004D25),
  background: const Color(0xFF000E0B),
  surface: const Color(0xFF002218),
);

class AppGradients {
  static List<Color> getGradientColors(AppThemeMode mode) {
    switch (mode) {
      case AppThemeMode.light:
        return [Colors.blue.shade300, Colors.blue.shade100];
      case AppThemeMode.bangladesh:
        return [const Color.fromARGB(255, 1, 86, 34), const Color(0xFF002218)];
      case AppThemeMode.dark:
      default:
        return [Colors.black87, Colors.grey.shade900];
    }
  }
}

// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/settings/settings_screen.dart ===

// File: lib/screens/settings_screen.dart

import 'dart:async';
import 'dart:ui' show ImageFilter;
import 'package:flutter/material.dart';
import 'package:flutter_cache_manager/flutter_cache_manager.dart';
import 'package:in_app_purchase/in_app_purchase.dart';
import 'package:package_info_plus/package_info_plus.dart';
import 'package:provider/provider.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';

import '../../core/theme.dart';
import '../../core/theme_provider.dart';
import '../../core/language_provider.dart';
import '../../core/premium_service.dart';
import '/l10n/app_localizations.dart';
import '../../widgets/app_drawer.dart';
import '../../features/common/appBar.dart';
import '../../widgets/banner_ad_widget.dart';

class SettingsScreen extends StatefulWidget {
  const SettingsScreen({Key? key}) : super(key: key);

  @override
  State<SettingsScreen> createState() => _SettingsScreenState();
}

class _SettingsScreenState extends State<SettingsScreen> {
  String _version = '';
  bool _isClearingCache = false;
  final InAppPurchase _iap = InAppPurchase.instance;
  ProductDetails? _removeAdsProduct;
  StreamSubscription<List<PurchaseDetails>>? _subscription;

  @override
  void initState() {
    super.initState();
    _loadVersion();
    _initializeIAP();
    _subscription = _iap.purchaseStream.listen(_onPurchase);
  }

  @override
  void dispose() {
    _subscription?.cancel();
    super.dispose();
  }

  Future<void> _loadVersion() async {
    final info = await PackageInfo.fromPlatform();
    setState(() => _version = info.version);
  }

  Future<void> _initializeIAP() async {
    if (!await _iap.isAvailable()) return;
    const ids = {'remove_ads'};
    final response = await _iap.queryProductDetails(ids);
    if (response.productDetails.isNotEmpty) {
      setState(() => _removeAdsProduct = response.productDetails.first);
    }
  }

  void _onPurchase(List<PurchaseDetails> purchases) {
    for (final purchase in purchases) {
      if (purchase.status == PurchaseStatus.purchased && purchase.productID == 'remove_ads') {
        context.read<PremiumService>().setPremium(true);
      }
      if (purchase.pendingCompletePurchase) {
        _iap.completePurchase(purchase);
      }
    }
  }

  Future<void> _buyRemoveAds() async {
    if (_removeAdsProduct == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(AppLocalizations.of(context)!.productNotAvailable)),
      );
      return;
    }
    final param = PurchaseParam(productDetails: _removeAdsProduct!);
    _iap.buyNonConsumable(purchaseParam: param);
  }

  Future<void> _launchPaypal() async {
    final id = dotenv.env['PAYPAL_BUTTON_ID'] ?? '';
    if (id.isEmpty) return;
    final url = Uri.parse('https://www.paypal.com/donate?hosted_button_id=$id');
    await launchUrl(url, mode: LaunchMode.externalApplication);
  }

  Future<void> _rateApp() async {
    const pkg = 'com.bd.bdnewsreader';
    final url = Uri.parse('https://play.google.com/store/apps/details?id=$pkg');
    await launchUrl(url, mode: LaunchMode.externalApplication);
  }

  Future<void> _clearCache() async {
    setState(() => _isClearingCache = true);
    await DefaultCacheManager().emptyCache();
    if (!mounted) return;
    setState(() => _isClearingCache = false);
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(AppLocalizations.of(context)!.clearCacheSuccess)),
    );
  }

  Future<void> _contactSupport() async {
    final email = AppLocalizations.of(context)!.contactEmail;
    await launchUrl(Uri.parse('mailto:$email'), mode: LaunchMode.externalApplication);
  }

  Widget _glassWrap(Widget child) {
    final prov = context.watch<ThemeProvider>();
    return Container(
      margin: const EdgeInsets.symmetric(vertical: 12),
      decoration: prov.glassDecoration(borderRadius: BorderRadius.circular(24)),
      child: ClipRRect(
        borderRadius: BorderRadius.circular(24),
        child: BackdropFilter(
          filter: ImageFilter.blur(sigmaX: 25, sigmaY: 25),
          child: Container(
            padding: const EdgeInsets.all(20),
            color: prov.glassColor,
            child: child,
          ),
        ),
      ),
    );
  }

  Widget _settingHeader(String label, Color color) =>
      Text(label, style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold, color: color));

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final theme = Theme.of(context);
    final textColor = theme.textTheme.bodyLarge?.color ?? Colors.black;
    final isPremium = context.watch<PremiumService>().isPremium;

    return Scaffold(
      extendBodyBehindAppBar: true,
      backgroundColor: theme.scaffoldBackgroundColor,
      drawer: const AppDrawer(),
      appBar: AppBar(
        centerTitle: true,
        backgroundColor: theme.appBarTheme.backgroundColor,
        elevation: theme.appBarTheme.elevation ?? 0,
        title: AppBarTitle(loc.settings),
        iconTheme: theme.appBarTheme.iconTheme,
        titleTextStyle: theme.appBarTheme.titleTextStyle,
      ),
      body: SafeArea(
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(24),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              if (!isPremium) const BannerAdWidget(),

              _glassWrap(Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  _settingHeader(loc.theme, textColor),
                  const SizedBox(height: 12),
                  Row(children: [
                    _themeBtn(AppThemeMode.light, Icons.wb_sunny, loc.lightTheme, textColor),
                    const SizedBox(width: 8),
                    _themeBtn(AppThemeMode.dark, Icons.nights_stay, loc.darkTheme, textColor),
                    const SizedBox(width: 8),
                    _themeBtn(AppThemeMode.bangladesh, Icons.flag, loc.bangladeshTheme, textColor),
                  ]),
                ],
              )),

              _glassWrap(Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  _settingHeader(loc.language, textColor),
                  const SizedBox(height: 12),
                  Row(children: [
                    _langBtn('en', 'English', textColor),
                    const SizedBox(width: 8),
                    _langBtn('bn', '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ', textColor),
                  ]),
                ],
              )),

              _glassWrap(Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  _settingHeader(loc.adFree, textColor),
                  const SizedBox(height: 12),
                  if (isPremium)
                    Text(loc.adsRemoved, style: TextStyle(color: textColor))
                  else
                    Wrap(
                      spacing: 8,
                      children: [
                        if (_removeAdsProduct != null)
                          OutlinedButton.icon(
                            key: const ValueKey('remove-ads-btn'),
                            onPressed: _buyRemoveAds,
                            icon: const Icon(Icons.payment),
                            label: Text('${loc.removeAds} ‚Ä¢ ${_removeAdsProduct!.price}'),
                          ),
                        OutlinedButton.icon(
                          key: const ValueKey('paypal-donate-btn'),
                          onPressed: _launchPaypal,
                          icon: const Icon(Icons.attach_money),
                          label: Text(loc.paypalDonate),
                        ),
                      ],
                    ),
                ],
              )),

              _glassWrap(Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  _settingHeader(loc.misc, textColor),
                  ListTile(
                    leading: Icon(Icons.cleaning_services, color: textColor),
                    title: Text(loc.clearCache, style: TextStyle(color: textColor)),
                    trailing: _isClearingCache
                        ? CircularProgressIndicator(strokeWidth: 2)
                        : IconButton(icon: Icon(Icons.delete, color: textColor), onPressed: _clearCache),
                  ),
                  ListTile(
                    leading: Icon(Icons.star_rate, color: textColor),
                    title: Text(loc.rateApp, style: TextStyle(color: textColor)),
                    trailing: IconButton(icon: Icon(Icons.chevron_right, color: textColor), onPressed: _rateApp),
                  ),
                  ListTile(
                    leading: Icon(Icons.support_agent, color: textColor),
                    title: Text(loc.contactSupport, style: TextStyle(color: textColor)),
                    subtitle: Text(loc.contactEmail, style: TextStyle(color: textColor.withOpacity(0.7))),
                    trailing: IconButton(icon: Icon(Icons.chevron_right, color: textColor), onPressed: _contactSupport),
                  ),
                ],
              )),

              const SizedBox(height: 16),
              Center(
                child: Text(
                  '${loc.versionPrefix} $_version',
                  style: TextStyle(color: textColor.withOpacity(0.7), fontStyle: FontStyle.italic),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _themeBtn(AppThemeMode mode, IconData icon, String label, Color textColor) {
    final prov = context.read<ThemeProvider>();
    final selected = prov.appThemeMode == mode;
    return Expanded(
      child: GestureDetector(
        onTap: () => prov.toggleTheme(mode),
        child: Container(
          padding: const EdgeInsets.symmetric(vertical: 12),
          decoration: BoxDecoration(
            gradient: selected ? LinearGradient(colors: AppGradients.getGradientColors(mode)) : null,
            border: Border.all(color: prov.borderColor, width: 2),
            borderRadius: BorderRadius.circular(16),
          ),
          child: Column(
            children: [
              Icon(icon, color: selected ? Colors.white : textColor),
              const SizedBox(height: 4),
              Text(label, style: TextStyle(color: selected ? Colors.white : textColor)),
            ],
          ),
        ),
      ),
    );
  }

  Widget _langBtn(String code, String label, Color textColor) {
    final langProv = context.read<LanguageProvider>();
    final selected = langProv.locale.languageCode == code;
    final prov = context.read<ThemeProvider>();
    return Expanded(
      child: GestureDetector(
        onTap: () => langProv.setLocale(code),
        child: Container(
          padding: const EdgeInsets.symmetric(vertical: 12),
          decoration: BoxDecoration(
            gradient: selected ? LinearGradient(colors: AppGradients.getGradientColors(prov.appThemeMode)) : null,
            border: Border.all(color: prov.borderColor, width: 2),
            borderRadius: BorderRadius.circular(16),
          ),
          child: Center(child: Text(label, style: TextStyle(color: selected ? Colors.white : textColor))),
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/home/home_screen.dart ===

// File: lib/screens/home_screen.dart

import 'dart:async';
import 'dart:convert';
import 'dart:ui';

import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:intl/intl.dart';
import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:go_router/go_router.dart';
import 'package:geolocator/geolocator.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';

import '../../core/pinned_http_client.dart';
import '../../core/theme_provider.dart';
import '../../core/theme.dart';
import '../../data/models/news_article.dart';
import '../../data/services/hive_service.dart';
import '../../data/services/rss_service.dart';
import '../../widgets/app_drawer.dart';
import '../../features/common/appBar.dart';
import '../home/widgets/news_card.dart';
import '../home/widgets/shimmer_loading.dart';
import '/l10n/app_localizations.dart';

final RouteObserver<ModalRoute<void>> routeObserver = RouteObserver<ModalRoute<void>>();

class HomeScreen extends StatefulWidget {
  const HomeScreen({Key? key}) : super(key: key);

  @override
  HomeScreenState createState() => HomeScreenState();
}

class HomeScreenState extends State<HomeScreen> with TickerProviderStateMixin, RouteAware {
  late TabController _tabController;
  late List<String> _categoryKeys;
  late Map<String, String> _localizedLabels;
  final Map<String, List<NewsArticle>> _articles = {};
  final Map<String, bool> _loadingStatus = {};
  final Map<String, int> _articleLimit = {};
  final Map<String, ScrollController> _scrollControllers = {};

  Locale? _lastLocale;
  DateTime? _lastBackPressed;
  bool _isSlowConnection = false;

  bool _weatherLoading = true;
  String _weatherLocation = '';
  double? _weatherTemp;

  @override
  void initState() {
    super.initState();
    _checkNetworkSpeed();
    _loadWeather();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      routeObserver.subscribe(this, ModalRoute.of(context)!);
    });
  }

  Future<void> _checkNetworkSpeed() async {
    final result = await Connectivity().checkConnectivity();
    setState(() => _isSlowConnection = result != ConnectivityResult.wifi);
  }

  Future<void> _loadWeather() async {
    try {
      LocationPermission perm = await Geolocator.checkPermission();
      if (perm == LocationPermission.denied || perm == LocationPermission.deniedForever) {
        perm = await Geolocator.requestPermission();
      }
      if (perm == LocationPermission.denied || perm == LocationPermission.deniedForever) {
        throw Exception('Location permission denied');
      }

      final Position pos = await Geolocator.getCurrentPosition(desiredAccuracy: LocationAccuracy.low);
      final apiKey = dotenv.env['WEATHER_API_KEY'] ?? '';
      if (apiKey.isEmpty) throw StateError('WEATHER_API_KEY not set');

      final uri = Uri.https('api.openweathermap.org', '/data/2.5/weather', {
        'lat': pos.latitude.toString(),
        'lon': pos.longitude.toString(),
        'units': 'metric',
        'appid': apiKey,
      });

      final client = await PinnedHttpClient.create('assets/certs/openweathermap.pem');
      try {
        final res = await client.get(uri).timeout(const Duration(seconds: 10));
        final jsonBody = jsonDecode(res.body);
        final name = jsonBody['name'];
        final main = jsonBody['main'];
        final tempRaw = main['temp'];
        final temp = tempRaw is num ? tempRaw.toDouble() : double.tryParse(tempRaw);

        if (!mounted) return;
        setState(() {
          _weatherLocation = name;
          _weatherTemp = temp;
          _weatherLoading = false;
        });
      } finally {
        client.close();
      }
    } on TimeoutException {
      _handleWeatherError();
    } catch (_) {
      _handleWeatherError();
    }
  }

  void _handleWeatherError() {
    if (!mounted) return;
    setState(() {
      _weatherLoading = false;
      _weatherTemp = null;
      _weatherLocation = '';
    });
    Fluttertoast.showToast(msg: 'Unable to load weather');
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    final locale = Localizations.localeOf(context);
    if (_lastLocale == locale && _articles.isNotEmpty) return;
    _lastLocale = locale;

    final loc = AppLocalizations.of(context)!;
    _categoryKeys = RssService.categories;
    _localizedLabels = {
      'latest': loc.latest,
      'national': loc.national,
      'international': loc.international,
      'lifestyle & education': loc.lifestyle,
    };
    _tabController = TabController(length: _categoryKeys.length, vsync: this)
      ..addListener(() => setState(() {}));

    for (final cat in _categoryKeys) {
      _scrollControllers[cat] = ScrollController()
        ..addListener(() => _onScroll(cat));
    }

    HiveService.init(_categoryKeys).then((_) => _loadOnlyExpiredFeeds());
  }

  void _onScroll(String cat) {
    final ctrl = _scrollControllers[cat]!;
    if (ctrl.position.pixels > ctrl.position.maxScrollExtent - 300 && !(_loadingStatus[cat] ?? false)) {
      _loadMore(cat);
    }
  }

  Future<void> _loadOnlyExpiredFeeds() async {
    for (final key in _categoryKeys) {
      final expired = HiveService.isExpired(key);
      final hasData = HiveService.hasArticles(key);
      if (!expired && hasData) {
        _articles[key] = HiveService.getArticles(key);
        _articleLimit[key] = _isSlowConnection ? 5 : 15;
        _loadingStatus[key] = false;
      } else {
        _loadingStatus[key] = true;
        await _loadFeedForKey(key);
      }
    }
    if (mounted) setState(() {});
  }

  Future<void> _loadFeedForKey(String key) async {
    final news = await RssService.fetchNews(
      category: key,
      locale: Localizations.localeOf(context),
      context: context,
    );
    await HiveService.saveArticles(key, news);
    _articles[key] = news;
    _articleLimit[key] = _isSlowConnection ? 5 : 15;
    _loadingStatus[key] = false;
    if (mounted) setState(() {});
  }

  void _loadMore(String key) {
    final current = _articleLimit[key] ?? 10;
    final max = _articles[key]?.length ?? 0;
    if (current < max) {
      _articleLimit[key] = (current + 10).clamp(0, max);
      if (mounted) setState(() {});
    }
  }

  @override
  void dispose() {
    routeObserver.unsubscribe(this);
    _tabController.dispose();
    for (final ctrl in _scrollControllers.values) {
      ctrl.dispose();
    }
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final prov = context.watch<ThemeProvider>();
    final colors = AppGradients.getGradientColors(prov.appThemeMode);
    final start = colors[0], end = colors[1];
    final key = _categoryKeys[_tabController.index];
    final isLoading = _loadingStatus[key] ?? true;
    final visible = _articles[key]?.take(_articleLimit[key] ?? 0).toList() ?? [];

    return Scaffold(
      extendBodyBehindAppBar: true,
      backgroundColor: Colors.transparent,
      drawer: const AppDrawer(),
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        centerTitle: true,
        title: AppBarTitle(loc.bdNewsreader),
        flexibleSpace: ClipRect(
          child: BackdropFilter(
            filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20),
            child: Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                  colors: [start.withOpacity(0.8), end.withOpacity(0.85)],
                ),
              ),
            ),
          ),
        ),
      ),
      body: Stack(children: [
        Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [start.withOpacity(0.6), end.withOpacity(0.7)],
            ),
          ),
        ),
        SafeArea(
          child: Column(children: [
            const SizedBox(height: 12),
            _buildDateWeather(prov),
            const SizedBox(height: 12),
            _buildChips(prov),
            const SizedBox(height: 8),
            Expanded(
              child: isLoading
                  ? const ShimmerLoading()
                  : visible.isEmpty
                      ? Center(
                          child: Text(
                            loc.noArticlesFound,
                            style: prov.floatingTextStyle(fontSize: 16),
                          ),
                        )
                      : RefreshIndicator(
                          onRefresh: _loadOnlyExpiredFeeds,
                          color: end.withOpacity(0.8),
                          child: ListView.builder(
                            controller: _scrollControllers[key],
                            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                            itemCount: visible.length + 1,
                            itemBuilder: (_, i) {
                              if (i >= visible.length) {
                                return const SizedBox(height: 64);
                              }
                              final a = visible[i];
                              final src = a.source.toLowerCase();
                              final highlight = !(src.contains('prothom') || src.contains('daily star'));
                              return Padding(
                                padding: const EdgeInsets.symmetric(vertical: 8),
                                child: NewsCard(
                                  article: a,
                                  onTap: () => context.push('/webview', extra: {'url': a.url, 'title': a.title}),
                                  highlight: highlight,
                                ),
                              );
                            },
                          ),
                        ),
            ),
          ]),
        ),
      ]),
    );
  }

  Widget _buildDateWeather(ThemeProvider prov) {
    final now = DateTime.now();
    final time = DateFormat('hh:mm a').format(now);
    final date = DateFormat('dd.MM.yyyy').format(now);
    final weather = _weatherLoading
        ? '...'
        : (_weatherLocation.isNotEmpty && _weatherTemp != null
            ? '$_weatherLocation, ${_weatherTemp!.round()}¬∞C'
            : 'Unknown');

    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 12),
      child: Container(
        decoration: prov.glassDecoration(borderRadius: BorderRadius.circular(32)),
        padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 20),
        child: Column(children: [
          Row(children: [
            Icon(Icons.battery_full, color: prov.floatingTextStyle().color),
            const SizedBox(width: 8),
            Text('75%', style: prov.floatingTextStyle(fontSize: 14)),
            const Spacer(),
            Text(time, style: prov.floatingTextStyle(fontSize: 24)),
          ]),
          const SizedBox(height: 12),
          Row(children: [
            Text(weather, style: prov.floatingTextStyle(fontSize: 18)),
            const Spacer(),
            Text(date, style: prov.floatingTextStyle(fontSize: 14)),
          ]),
        ]),
      ),
    );
  }

  Widget _buildChips(ThemeProvider prov) {
    final isLight = Theme.of(context).brightness == Brightness.light;

    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 12),
      child: Container(
        height: 48,
        decoration: prov.glassDecoration(borderRadius: BorderRadius.circular(16)),
        child: ListView.builder(
          scrollDirection: Axis.horizontal,
          padding: const EdgeInsets.symmetric(horizontal: 8),
          itemCount: _categoryKeys.length,
          itemBuilder: (_, i) {
            final label = _localizedLabels[_categoryKeys[i]] ?? _categoryKeys[i];
            final selected = _tabController.index == i;

            return Padding(
              padding: const EdgeInsets.symmetric(horizontal: 6),
              child: ChoiceChip(
                label: Text(
                  label,
                  style: TextStyle(
                    fontSize: 14,
                    fontWeight: selected ? FontWeight.w900 : FontWeight.w600,
                    color: isLight ? Colors.black87 : (selected ? Colors.white : Colors.white70),
                  ),
                ),
                selected: selected,
                backgroundColor: prov.glassColor,
                selectedColor: Colors.amber.withOpacity(0.8),
                elevation: selected ? 4 : 0,
                onSelected: (_) {
                  _tabController.animateTo(i);
                },
              ),
            );
          },
        ),
      ),
    );
  }

  @override
  void didPopNext() {
    _tabController.animateTo(0);
    _scrollControllers[_categoryKeys[0]]?.jumpTo(0);
  }

  Future<bool> _onWillPop() async {
    final now = DateTime.now();
    if (_lastBackPressed == null || now.difference(_lastBackPressed!) > const Duration(seconds: 2)) {
      _lastBackPressed = now;
      Fluttertoast.showToast(
        msg: 'Press back again to exit',
        toastLength: Toast.LENGTH_SHORT,
      );
      return false;
    }
    return true;
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/home/widgets/stock_exchange_widget.dart ===

import 'dart:async';
import 'package:flutter/material.dart';
import 'package:webview_flutter/webview_flutter.dart';
import 'package:url_launcher/url_launcher.dart';

/// Shows ONLY the live DSE share-price scroll with full error/loading handling.
class StockExchangeWidget extends StatefulWidget {
  /// Height of the widget; default to 150.
  final double height;

  const StockExchangeWidget({Key? key, this.height = 150}) : super(key: key);

  @override
  State<StockExchangeWidget> createState() => _StockExchangeWidgetState();
}

class _StockExchangeWidgetState extends State<StockExchangeWidget> {
  late final WebViewController _controller;
  bool _isLoading = true;
  bool _hasError = false;
  static const _url = 'https://www.dsebd.org/latest_share_price_scroll_l.php';

  @override
  void initState() {
    super.initState();

    // Initialize controller
    _controller = WebViewController()
      ..setJavaScriptMode(JavaScriptMode.unrestricted)
      ..setNavigationDelegate(NavigationDelegate(
        onPageStarted: (_) {
          setState(() {
            _isLoading = true;
            _hasError = false;
          });
        },
        onPageFinished: (_) async {
          // Keep only the first <table>
          await _controller.runJavaScript('''
            (function(){
              const table = document.querySelector('table');
              if (!table) return;
              document.body.innerHTML = '';
              document.body.appendChild(table);
            })();
          ''');
          setState(() {
            _isLoading = false;
          });
        },
        onWebResourceError: (_) {
          setState(() {
            _hasError = true;
            _isLoading = false;
          });
        },
      ))
      ..loadRequest(Uri.parse(_url));
  }

  Future<void> _reload() async {
    setState(() {
      _isLoading = true;
      _hasError = false;
    });
    await _controller.reload();
  }

  Future<void> _openInBrowser() => launchUrl(
        Uri.parse(_url),
        mode: LaunchMode.externalApplication,
      );

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      height: widget.height,
      child: Stack(
        children: [
          // WebView content
          Positioned.fill(
            child: ClipRRect(
              borderRadius: BorderRadius.circular(8),
              child: WebViewWidget(controller: _controller),
            ),
          ),

          // Loading spinner
          if (_isLoading)
            const Center(child: CircularProgressIndicator()),

          // Error UI
          if (_hasError)
            Center(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  const Text('Failed to load DSE data'),
                  const SizedBox(height: 8),
                  ElevatedButton.icon(
                    icon: const Icon(Icons.refresh),
                    label: const Text('Retry'),
                    onPressed: _reload,
                  ),
                ],
              ),
            ),

          // Controls (refresh + browser)
          if (!_isLoading && !_hasError)
            Positioned(
              top: 4,
              right: 4,
              child: Row(
                children: [
                  IconButton(
                    icon: const Icon(Icons.refresh),
                    tooltip: 'Reload',
                    onPressed: _reload,
                  ),
                  IconButton(
                    icon: const Icon(Icons.open_in_new),
                    tooltip: 'Open in browser',
                    onPressed: _openInBrowser,
                  ),
                ],
              ),
            ),
        ],
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/home/widgets/shimmer_list_loader.dart ===

// path: lib/features/home/widgets/shimmer_list_loader.dart

import 'package:flutter/material.dart';
import 'package:shimmer/shimmer.dart';

class ShimmerListLoader extends StatelessWidget {
  const ShimmerListLoader({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return ListView.builder(
      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
      itemCount: 6, // Show 6 placeholders
      itemBuilder: (_, __) => Padding(
        padding: const EdgeInsets.symmetric(vertical: 8),
        child: Shimmer.fromColors(
          baseColor: Colors.grey.shade300,
          highlightColor: Colors.grey.shade100,
          child: Container(
            height: 240,
            decoration: BoxDecoration(
              color: Colors.grey[300],
              borderRadius: BorderRadius.circular(16),
            ),
          ),
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/home/widgets/shimmer_loading.dart ===

import 'package:flutter/material.dart';
import 'package:shimmer/shimmer.dart';

class ShimmerLoading extends StatelessWidget {
  const ShimmerLoading({
    super.key,
    this.height = 150,
    this.width = double.infinity,
    this.borderRadius = 16.0,
    this.margin = const EdgeInsets.all(8.0),
    this.period = const Duration(milliseconds: 1500),
  });

  final double height;
  final double width;
  final double borderRadius;
  final EdgeInsetsGeometry margin;
  final Duration period;

  @override
  Widget build(BuildContext context) {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    final baseColor = isDark ? Colors.grey.shade800 : Colors.grey.shade300;
    final highlightColor = isDark ? Colors.grey.shade700 : Colors.grey.shade100;

    return Card(
      elevation: 6,
      margin: margin,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(borderRadius),
      ),
      child: Shimmer.fromColors(
        baseColor: baseColor,
        highlightColor: highlightColor,
        period: period,
        child: Container(
          width: width,
          height: height,
          decoration: BoxDecoration(
            color: baseColor,
            borderRadius: BorderRadius.circular(borderRadius),
          ),
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/home/widgets/news_card.dart ===

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import '/core/utils/source_logos.dart';
import '../../../data/models/news_article.dart';

class NewsCard extends StatelessWidget {
  final NewsArticle article;
  final VoidCallback? onTap;
  final bool highlight;
  const NewsCard({
  Key? key,
  required this.article,
  this.onTap,
  this.highlight = true,
}) : super(key: key);

  bool get isLive => article.isLive;
  bool get isBreaking => DateTime.now().difference(article.publishedAt) < const Duration(hours: 6);
  bool get isFresh => DateTime.now().difference(article.publishedAt) < const Duration(minutes: 30);
  bool get isCached => article.fromCache;

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final logoPath = SourceLogos.logos[article.sourceOverride ?? article.source];
    final timestamp = DateFormat('hh:mm a').format(article.publishedAt);

    return GestureDetector(
      onTap: onTap,
      child: Container(
        margin: const EdgeInsets.symmetric(vertical: 10, horizontal: 8),
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(18),
          color: Colors.white.withOpacity(0.08),
          border: Border.all(color: Colors.white.withOpacity(0.15)),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.1),
              blurRadius: 10,
              offset: const Offset(0, 4),
            ),
          ],
        ),
        child: ClipRRect(
          borderRadius: BorderRadius.circular(18),
          child: BackdropFilter(
            filter: ImageFilter.blur(sigmaX: 14, sigmaY: 14),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                if (article.imageUrl?.isNotEmpty ?? false)
                  ClipRRect(
                    borderRadius: const BorderRadius.vertical(top: Radius.circular(18)),
                    child: FadeInImage.assetNetwork(
                      placeholder: 'assets/placeholder.png',
                      image: article.imageUrl!,
                      width: double.infinity,
                      height: 180,
                      fit: BoxFit.cover,
                      imageErrorBuilder: (_, __, ___) => Container(
                        height: 180,
                        color: Colors.grey.shade300,
                        alignment: Alignment.center,
                        child: const Icon(Icons.image_not_supported, size: 36, color: Colors.grey),
                      ),
                    ),
                  ),
                Padding(
                  padding: const EdgeInsets.all(14),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                     Row(
  children: [
    if (logoPath != null)
      _glassLogo(logoPath)
    else
      const Icon(
        Icons.public,
        size: 24,
        color: Colors.deepPurpleAccent,
      ),
    const SizedBox(width: 10),
    Expanded(
      child: Text(
        article.sourceOverride ?? article.source,
        style: const TextStyle(
          fontSize: 13,
          fontWeight: FontWeight.bold,
          color: Colors.white,
        ),
        maxLines: 1,
        overflow: TextOverflow.ellipsis,
      ),
    ),
    if (isLive) _tag("LIVE ‚ö°", Colors.redAccent),
    if (!isLive && isBreaking) _tag("BREAKING üî•", Colors.orangeAccent),
    if (!isLive && !isBreaking && isFresh) _tag("NEW", Colors.lightBlue),
    if (!isLive && !isBreaking && !isFresh && isCached) _tag("CACHED", Colors.grey),
  ],
),


                      const SizedBox(height: 10),

                      Text(
                        article.title,
                        style: theme.textTheme.titleMedium?.copyWith(
                          fontWeight: FontWeight.bold,
                          color: Colors.white,
                        ),
                      ),

                      if (article.snippet.isNotEmpty)
                        Padding(
                          padding: const EdgeInsets.only(top: 6),
                          child: Text(
                            article.snippet,
                            style: theme.textTheme.bodyMedium?.copyWith(
                              color: Colors.white70,
                              height: 1.4,
                            ),
                            maxLines: 3,
                            overflow: TextOverflow.ellipsis,
                          ),
                        ),

                      const SizedBox(height: 8),
                      Text(
                        timestamp,
                        style: theme.textTheme.labelSmall?.copyWith(color: Colors.white60),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _glassLogo(String path) {
    return Container(
      width: 36,
      height: 36,
      padding: const EdgeInsets.all(4),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(10),
        gradient: LinearGradient(
          colors: [
            Colors.white.withOpacity(0.25),
            Colors.white.withOpacity(0.05),
          ],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        border: Border.all(color: Colors.white.withOpacity(0.25), width: 1),
        boxShadow: [
          BoxShadow(
            color: Colors.white.withOpacity(0.08),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: ClipRRect(
        borderRadius: BorderRadius.circular(8),
        child: Image.asset(path, fit: BoxFit.contain),
      ),
    );
  }

  Widget _tag(String label, Color color) {
    return Container(
      margin: const EdgeInsets.only(left: 8),
      padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 3),
      decoration: BoxDecoration(
        color: color,
        borderRadius: BorderRadius.circular(10),
      ),
      child: Text(
        label,
        style: const TextStyle(
          color: Colors.white,
          fontSize: 10,
          fontWeight: FontWeight.bold,
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/splash/splash_screen.dart ===

// lib/features/splash/splash_screen.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../../core/splash_service.dart';
import '../../features/common/appBar.dart';
import '../../core/theme_provider.dart';
import '../../core/theme.dart'; // for AppGradients

class SplashScreen extends StatefulWidget {
  const SplashScreen({super.key});
  @override
  State<SplashScreen> createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen> with TickerProviderStateMixin {
  bool _showLogo = false;
  bool _showText = false;
  late final AnimationController _zoomController;
  late final Animation<double> _zoomAnimation;

  @override
  void initState() {
    super.initState();
    _zoomController = AnimationController(
      duration: const Duration(milliseconds: 1600),
      vsync: this,
    );
    _zoomAnimation = Tween<double>(begin: 0.7, end: 1.2).animate(
      CurvedAnimation(parent: _zoomController, curve: Curves.easeInOutBack),
    );
    _runAnimations();
    _navigateToNext();
  }

  @override
  void dispose() {
    _zoomController.dispose();
    super.dispose();
  }

  Future<void> _runAnimations() async {
    await Future.delayed(const Duration(milliseconds: 300));
    if (!mounted) return;
    setState(() => _showLogo = true);
    _zoomController.forward();
    await Future.delayed(const Duration(milliseconds: 700));
    if (!mounted) return;
    setState(() => _showText = true);
  }

  Future<void> _navigateToNext() async {
    // wait for splash animations
    await Future.delayed(const Duration(seconds: 2));
    if (!mounted) return;

    final prefs = await SharedPreferences.getInstance();
    final next = await SplashService(prefs: prefs).resolveInitialRoute();

    // defer navigation until after build
    WidgetsBinding.instance.addPostFrameCallback((_) {
      context.go(next);
    });
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final mode = context.watch<ThemeProvider>().appThemeMode;
    final gradientColors = AppGradients.getGradientColors(mode);
    final startColor = gradientColors[0];
    final endColor = gradientColors[1];

    return Scaffold(
      body: Stack(fit: StackFit.expand, children: [
        // tinted backdrop
        Container(color: theme.colorScheme.background.withOpacity(0.4)),
        BackdropFilter(
          filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20),
          child: const SizedBox.expand(),
        ),
        Center(
          child: AnimatedOpacity(
            opacity: _showLogo ? 1 : 0,
            duration: const Duration(milliseconds: 800),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                ScaleTransition(
                  scale: _zoomAnimation,
                  child: ClipRRect(
                    borderRadius: BorderRadius.circular(24),
                    child: Image.asset(
                      'assets/icons/app-icon.png',
                      width: 120,
                      height: 120,
                      fit: BoxFit.cover,
                    ),
                  ),
                ),
                const SizedBox(height: 24),
                AnimatedOpacity(
                  opacity: _showText ? 1 : 0,
                  duration: const Duration(milliseconds: 600),
                  child: Column(
                    children: [
                      Text(
                        'BD News Reader',
                        style: theme.textTheme.headlineMedium?.copyWith(
                          fontWeight: FontWeight.bold,
                          letterSpacing: 1.2,
                          color: theme.colorScheme.primary,
                        ),
                      ),
                      const SizedBox(height: 16),
                      CircularProgressIndicator(
                        strokeWidth: 3,
                        valueColor: AlwaysStoppedAnimation<Color>(
                          theme.colorScheme.primary.withOpacity(0.8),
                        ),
                        backgroundColor:
                            theme.colorScheme.onBackground.withOpacity(0.2),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      ]),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/news_detail/news_detail_screen.dart ===

// lib/features/news/screens/news_detail_screen.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:share_plus/share_plus.dart';
import 'package:provider/provider.dart';
import 'package:cached_network_image/cached_network_image.dart';

import '../../data/models/news_article.dart';
import '../../core/utils/favorites_manager.dart';
import '../../core/theme_provider.dart';
import '../../widgets/app_drawer.dart';
import '../../core/theme.dart';
import 'animated_background.dart';

class NewsDetailScreen extends StatefulWidget {
  final NewsArticle news;
  const NewsDetailScreen({Key? key, required this.news}) : super(key: key);

  @override
  State<NewsDetailScreen> createState() => _NewsDetailScreenState();
}

class _NewsDetailScreenState extends State<NewsDetailScreen> {
  bool isFavorite = false;

  @override
  void initState() {
    super.initState();
    _checkFavorite();
  }

  Future<void> _checkFavorite() async {
    final fav = FavoritesManager.instance.favoriteArticles
        .any((a) => a.url == widget.news.url);
    setState(() => isFavorite = fav);
  }

  Future<void> _toggleFavorite() async {
    if (isFavorite) {
      await FavoritesManager.instance.removeFavorite(widget.news);
    } else {
      await FavoritesManager.instance.addFavorite(widget.news);
    }
    _checkFavorite();
  }

  void _shareNews() {
    Share.share('${widget.news.title}\n\n${widget.news.url}');
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final scheme = theme.colorScheme;

    return Scaffold(
      drawer: const AppDrawer(),
      extendBodyBehindAppBar: true,
      backgroundColor: Colors.transparent,
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        centerTitle: true,
        title: Text(
          widget.news.source,
          style: theme.textTheme.titleMedium?.copyWith(
            color: scheme.onPrimary,
            fontWeight: FontWeight.bold,
          ),
        ),
        flexibleSpace: const AnimatedBackground(overlayOpacity: 0.35),
        actions: [
          IconButton(
            icon: Icon(Icons.share, color: scheme.onPrimary),
            onPressed: _shareNews,
          ),
          IconButton(
            icon: Icon(
              isFavorite ? Icons.favorite : Icons.favorite_border,
              color: Colors.redAccent,
            ),
            onPressed: _toggleFavorite,
          ),
        ],
      ),
      body: AnimatedBackground(
        overlayOpacity: 0.25,
        child: SingleChildScrollView(
          padding: const EdgeInsets.fromLTRB(16, kToolbarHeight + 24, 16, 24),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              if (widget.news.imageUrl != null && widget.news.imageUrl!.isNotEmpty)
                ClipRRect(
                  borderRadius: BorderRadius.circular(16),
                  child: CachedNetworkImage(
                    imageUrl: widget.news.imageUrl!,
                    placeholder: (context, url) => Container(
                      height: 200,
                      color: Colors.black12,
                      child: const Center(child: CircularProgressIndicator()),
                    ),
                    errorWidget: (context, url, error) => Container(
                      height: 200,
                      color: Colors.black12,
                      child: const Center(child: Icon(Icons.broken_image)),
                    ),
                    height: 200,
                    width: double.infinity,
                    fit: BoxFit.cover,
                  ),
                ),
              const SizedBox(height: 20),
              Container(
                decoration: BoxDecoration(
                  color: scheme.surface.withOpacity(0.08),
                  borderRadius: BorderRadius.circular(16),
                  border: Border.all(color: scheme.primary.withOpacity(0.25)),
                ),
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      widget.news.title,
                      style: theme.textTheme.titleLarge?.copyWith(
                        color: scheme.primary,
                        fontWeight: FontWeight.bold,
                        shadows: const [Shadow(blurRadius: 4, color: Colors.black45)],
                      ),
                    ),
                    const SizedBox(height: 12),
                    Text(
                      widget.news.fullContent.isNotEmpty
                          ? widget.news.fullContent
                          : (widget.news.snippet.isNotEmpty
                              ? widget.news.snippet
                              : 'No content available.'),
                      style: theme.textTheme.bodyMedium?.copyWith(
                        color: scheme.onSurface.withOpacity(0.85),
                        height: 1.5,
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/news_detail/animated_background.dart ===

// lib/features/news/widgets/animated_background.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../../core/theme_provider.dart';
import '../../../core/theme.dart';

/// A full-screen overlay that can optionally blur the backdrop
/// and apply a semi-transparent animated gradient tint based on theme.
class AnimatedBackground extends StatelessWidget {
  final Duration duration;
  final Widget? child;
  final double blurSigma;
  final double overlayOpacity;

  const AnimatedBackground({
    super.key,
    this.duration = const Duration(seconds: 20),
    this.child,
    this.blurSigma = 20,
    this.overlayOpacity = 0.3,
  });

  @override
  Widget build(BuildContext context) {
    final mode = context.watch<ThemeProvider>().appThemeMode;
    final colors = _gradientColors(mode);

    return Stack(fit: StackFit.expand, children: [
      if (blurSigma > 0)
        Positioned.fill(
          child: BackdropFilter(
            filter: ImageFilter.blur(sigmaX: blurSigma, sigmaY: blurSigma),
            child: const SizedBox.shrink(),
          ),
        ),
      if (overlayOpacity > 0)
        Positioned.fill(
          child: AnimatedContainer(
            duration: duration,
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: colors
                    .map((c) => c.withOpacity(overlayOpacity))
                    .toList(),
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
              ),
            ),
          ),
        ),
      if (child != null) child!,
    ]);
  }

  List<Color> _gradientColors(AppThemeMode mode) {
    return switch (mode) {
      AppThemeMode.dark => [Colors.black87, Colors.grey.shade900],
      AppThemeMode.bangladesh => [const Color(0xFF004D40), const Color(0xFF26A69A)],
      AppThemeMode.light => [Colors.white, Colors.grey.shade100],
    };
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/favorites/favorites_screen.dart ===

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:intl/intl.dart';
import 'package:go_router/go_router.dart';
import 'package:share_plus/share_plus.dart';

import '../../core/theme.dart';
import '../../core/theme_provider.dart';
import '../../core/utils/favorites_manager.dart';
import '/l10n/app_localizations.dart';
import '../../widgets/app_drawer.dart';
import '../common/animated_background.dart';
import '../magazine/widgets/magazine_card.dart';
import '../news/widgets/news_card.dart';
import '../../data/models/news_article.dart';

class FavoritesScreen extends StatefulWidget {
  const FavoritesScreen({super.key});

  @override
  State<FavoritesScreen> createState() => _FavoritesScreenState();
}

class _FavoritesScreenState extends State<FavoritesScreen> {
  String _filter = 'All';
  String _timeFilter = 'All';

  late FavoritesManager _favorites;

  @override
  void initState() {
    super.initState();
    _favorites = FavoritesManager.instance;
    _favorites.loadFavorites().then((_) => setState(() {}));
  }

  List<Map<String, dynamic>> _applyTimeFilter(List<Map<String, dynamic>> list) {
    if (_timeFilter == 'All') return list;
    final now = DateTime.now();
    return list.where((item) {
      final savedAt = DateTime.tryParse(item['savedAt'] ?? '') ?? DateTime(2000);
      final diff = now.difference(savedAt);
      switch (_timeFilter) {
        case 'Today':
          return diff.inDays == 0;
        case 'This Week':
          return diff.inDays <= 7;
        case 'Older':
          return diff.inDays > 7;
        default:
          return true;
      }
    }).toList();
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final theme = Theme.of(context);
    final textColor = theme.textTheme.bodyLarge?.color ?? Colors.white;
    final categories = ['All', loc.articles, loc.magazines, loc.newspapers];
    final filters = ['All', 'Today', 'This Week', 'Older'];

    final mode = context.watch<ThemeProvider>().appThemeMode;
    final colors = AppGradients.getGradientColors(mode);
    final start = colors[0], end = colors[1];

    final allItems = [
      ..._favorites.favoriteArticles.map((a) => a.toMap()),
      ..._favorites.favoriteMagazines,
      ..._favorites.favoriteNewspapers
    ];

    List<Map<String, dynamic>> filtered = allItems;

    if (_filter != 'All') {
      if (_filter == loc.articles) {
        filtered = _favorites.favoriteArticles.map((a) => a.toMap()).toList();
      } else if (_filter == loc.magazines) {
        filtered = _favorites.favoriteMagazines;
      } else if (_filter == loc.newspapers) {
        filtered = _favorites.favoriteNewspapers;
      }
    }

    filtered = _applyTimeFilter(filtered);

    return WillPopScope(
      onWillPop: () async {
        context.go('/home');
        return false;
      },
      child: Scaffold(
        drawer: const AppDrawer(),
        appBar: AppBar(
          title: Text(loc.favorites, style: const TextStyle(fontWeight: FontWeight.bold)),
          centerTitle: true,
          leading: IconButton(
            icon: const Icon(Icons.arrow_back),
            onPressed: () => context.go('/home'),
          ),
          flexibleSpace: _blurredAppBar(context, start, end),
        ),
        body: Stack(
          fit: StackFit.expand,
          children: [
            _backgroundGradient(start, end),
            AnimatedBackground(
              child: Column(
                children: [
                  Padding(
                    padding: const EdgeInsets.all(12),
                    child: _glassSection(
                      context,
                      child: Row(
                        children: [
                          Expanded(
                            child: DropdownButton<String>(
                              value: _filter,
                              isExpanded: true,
                              dropdownColor: theme.cardColor.withOpacity(0.9),
                              iconEnabledColor: textColor,
                              style: TextStyle(color: textColor, fontWeight: FontWeight.w600),
                              underline: const SizedBox(),
                              items: categories.map((cat) => DropdownMenuItem(
                                value: cat,
                                child: Text(cat, style: TextStyle(color: textColor)),
                              )).toList(),
                              onChanged: (val) => setState(() => _filter = val!),
                            ),
                          ),
                          const SizedBox(width: 12),
                          DropdownButton<String>(
                            value: _timeFilter,
                            dropdownColor: theme.cardColor.withOpacity(0.9),
                            iconEnabledColor: textColor,
                            style: TextStyle(color: textColor),
                            underline: const SizedBox(),
                            items: filters.map((f) => DropdownMenuItem(
                              value: f,
                              child: Text(f, style: TextStyle(color: textColor)),
                            )).toList(),
                            onChanged: (val) => setState(() => _timeFilter = val!),
                          ),
                        ],
                      ),
                    ),
                  ),
                  Expanded(
                    child: RefreshIndicator(
                      onRefresh: () async {
                        await _favorites.loadFavorites();
                        setState(() {});
                      },
                      child: ListView(
                        padding: const EdgeInsets.all(16),
                        children: filtered.isEmpty
                            ? [_buildEmpty(loc, textColor)]
                            : _buildCards(context, filtered),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildEmpty(AppLocalizations loc, Color color) {
    return Padding(
      padding: const EdgeInsets.only(top: 100),
      child: Center(
        child: Text(loc.noFavoritesYet, style: TextStyle(color: color.withOpacity(0.7))),
      ),
    );
  }

  List<Widget> _buildCards(BuildContext context, List<Map<String, dynamic>> filtered) {
    return filtered.map((item) {
      final savedAt = DateTime.tryParse(item['savedAt'] ?? '') ?? DateTime.now();
      final subtitle = 'Saved on ${DateFormat.yMMMd().format(savedAt)}';

      if (item.containsKey('title')) {
        final article = NewsArticle.fromMap(item);
        return _glassSection(
          context,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              NewsCard(
                news: item,
                isFavorite: true,
                onFavoriteToggle: () async {
                  await _favorites.toggleArticleMap(item);
                  setState(() {});
                },
                searchQuery: '',
              ),
              Row(
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  IconButton(
                    icon: const Icon(Icons.share),
                    onPressed: () => Share.share('${article.title}\n${article.url}'),
                  ),
                ],
              ),
            ],
          ),
        );
      } else if (item.containsKey('tags')) {
        return _glassSection(
          context,
          child: MagazineCard(
            magazine: item,
            isFavorite: true,
            onFavoriteToggle: () async {
              await _favorites.toggleMagazine(item);
              setState(() {});
            },
            highlight: false,
          ),
        );
      } else {
        return _glassSection(
          context,
          child: ListTile(
            leading: const Icon(Icons.public),
            title: Text(item['name'] ?? 'Unknown'),
            subtitle: Text(subtitle),
            trailing: IconButton(
              icon: const Icon(Icons.delete_outline),
              onPressed: () async {
                await _favorites.toggleNewspaper(item);
                setState(() {});
              },
            ),
          ),
        );
      }
    }).toList();
  }

  Widget _glassSection(BuildContext context, {required Widget child}) {
    final glow = Theme.of(context).colorScheme.primary.withOpacity(0.4);
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      child: ClipRRect(
        borderRadius: BorderRadius.circular(18),
        child: BackdropFilter(
          filter: ImageFilter.blur(sigmaX: 12, sigmaY: 12),
          child: Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.1),
              borderRadius: BorderRadius.circular(18),
              border: Border.all(color: glow, width: 1),
              boxShadow: [BoxShadow(color: glow, blurRadius: 8, offset: const Offset(0, 4))],
            ),
            child: child,
          ),
        ),
      ),
    );
  }

  Widget _blurredAppBar(BuildContext context, Color start, Color end) {
    return ClipRect(
      child: BackdropFilter(
        filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20),
        child: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [start.withOpacity(0.85), end.withOpacity(0.85)],
            ),
          ),
        ),
      ),
    );
  }

  Widget _backgroundGradient(Color start, Color end) {
    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [start.withOpacity(0.85), end.withOpacity(0.85)],
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/quiz/daily_quiz_widget.dart ===

// lib/features/quiz/daily_quiz_widget.dart

import 'dart:convert';
import 'dart:math';
import 'dart:ui';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart' show rootBundle, Clipboard, ClipboardData;
import 'package:confetti/confetti.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:audioplayers/audioplayers.dart';
import 'package:provider/provider.dart';

import '/core/theme_provider.dart';
import '/core/theme.dart';
import '/l10n/app_localizations.dart';

class QuizQuestion {
  final String prompt;
  final List<String> options;
  final String correct;

  QuizQuestion({
    required this.prompt,
    required this.options,
    required this.correct,
  });
}

class DailyQuizWidget extends StatefulWidget {
  const DailyQuizWidget({Key? key}) : super(key: key);

  @override
  State<DailyQuizWidget> createState() => _DailyQuizWidgetState();
}

class _DailyQuizWidgetState extends State<DailyQuizWidget> {
  final _confetti = ConfettiController(duration: const Duration(seconds: 3));
  final _player = AudioPlayer();

  List<QuizQuestion> _questions = [];
  int _current = 0;
  int _score = 0;
  bool _loading = true;
  bool _showResult = false;
  bool _answered = false;
  int _streak = 0;
  int _highScore = 0;

  @override
  void initState() {
    super.initState();
    _loadStats();
    _fetchQuiz();
  }

  Future<void> _loadStats() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      _streak = prefs.getInt('quiz_streak') ?? 0;
      _highScore = prefs.getInt('quiz_high_score') ?? 0;
    });
  }

  Future<void> _saveStats() async {
    final prefs = await SharedPreferences.getInstance();
    if (_score == _questions.length) {
      _streak++;
    } else {
      _streak = 0;
    }
    if (_score > _highScore) {
      _highScore = _score;
      await prefs.setInt('quiz_high_score', _highScore);
    }
    await prefs.setInt('quiz_streak', _streak);
  }

  Future<void> _fetchQuiz() async {
    setState(() {
      _loading = true;
      _showResult = false;
      _answered = false;
    });

    try {
      final raw = await rootBundle.loadString('assets/quizzes/bn_daily_expanded.json');
      final decoded = jsonDecode(raw);
      if (decoded is! List) throw FormatException('Quiz JSON does not contain a List');

      final pool = (decoded as List)
          .whereType<Map<String, dynamic>>()
          .toList();
      if (pool.isEmpty) throw Exception('No valid quiz items found');

      pool.shuffle();
      final selected = pool.take(5).toList();

      final qs = selected.map((item) {
        final question = item['question']?.toString() ?? '<no prompt>';
        List<String> opts = [];
        final rawOpts = item['options'];
        if (rawOpts is List) {
          opts = rawOpts.map((o) => o.toString()).toList();
        } else if (rawOpts is Map) {
          final entries = (rawOpts as Map<String, dynamic>).entries.toList()
            ..sort((a, b) => int.tryParse(a.key)!.compareTo(int.tryParse(b.key)!));
          opts = entries.map((e) => e.value.toString()).toList();
        }
        final correctRaw = item['correct'];
        String correct;
        if (correctRaw is int && correctRaw < opts.length) {
          correct = opts[correctRaw];
        } else {
          correct = correctRaw.toString();
        }
        return QuizQuestion(prompt: question, options: opts, correct: correct);
      }).toList();

      setState(() {
        _questions = qs;
        _current = 0;
        _score = 0;
        _loading = false;
      });
    } catch (e) {
      debugPrint('Quiz load error: $e');
      setState(() {
        _questions = [];
        _loading = false;
      });
    }
  }

  Future<void> _answer(String choice) async {
    if (_answered) return;
    setState(() => _answered = true);

    final prov = context.read<ThemeProvider>();
    if (choice == _questions[_current].correct) {
      _score++;
      _confetti.play();
      await _player.play(AssetSource('sounds/correct.mp3'));
    } else {
      await _player.play(AssetSource('sounds/wrong.mp3'));
    }
  }

  void _previous() {
    if (_current > 0) {
      setState(() {
        _current--;
        _answered = false;
      });
    }
  }

  Future<void> _next() async {
    if (_current + 1 < _questions.length) {
      setState(() {
        _current++;
        _answered = false;
      });
    } else {
      await _saveStats();
      setState(() => _showResult = true);
    }
  }

  @override
  void dispose() {
    _confetti.dispose();
    _player.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final prov = context.watch<ThemeProvider>();
    final theme = Theme.of(context);
    final colors = AppGradients.getGradientColors(prov.appThemeMode);

    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: AppBar(
        automaticallyImplyLeading: false,
        backgroundColor: Colors.transparent,
        elevation: 0,
        centerTitle: true,
        title: Text(loc.dailyQuiz, style: prov.floatingTextStyle(fontSize: 20)),
        actions: [
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 12),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text('üî• $_streak ${loc.streak}', style: theme.textTheme.bodyMedium),
                Text('üèÜ $_highScore ${loc.highScore}', style: theme.textTheme.bodyMedium),
              ],
            ),
          ),
        ],
      ),
      body: _loading
          ? const Center(child: CircularProgressIndicator())
          : _showResult
              ? _buildSummary(context, prov)
              : _buildQuizView(context, prov, colors),
      bottomNavigationBar:
          (_loading || _showResult) ? null : _buildFooterNav(prov, theme),
    );
  }

  Widget _buildQuizView(BuildContext context, ThemeProvider prov, List<Color> colors) {
    final q = _questions[_current];
    final theme = Theme.of(context);

    return Stack(
      children: [
        Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: [colors[0].withOpacity(0.8), colors[1].withOpacity(0.8)],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
          ),
        ),
        SafeArea(
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              children: [
                LinearProgressIndicator(
                  value: (_current + 1) / _questions.length,
                  minHeight: 6,
                  backgroundColor: prov.glassColor,
                  valueColor: AlwaysStoppedAnimation(theme.colorScheme.secondary),
                ),
                const SizedBox(height: 16),
                Expanded(
                  child: _glassCard(prov, theme, child: _buildQuestion(q, theme)),
                ),
                const SizedBox(height: 16),
              ],
            ),
          ),
        ),
        Positioned(
          top: 16,
          left: 0, right: 0,
          child: ConfettiWidget(
            confettiController: _confetti,
            blastDirection: pi / 2,
            numberOfParticles: 40,
            gravity: 0.3,
          ),
        ),
      ],
    );
  }

  Widget _buildQuestion(QuizQuestion q, ThemeData theme) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        Text('Q${_current + 1}: ${q.prompt}',
            style: theme.textTheme.titleMedium?.copyWith(color: theme.colorScheme.onBackground)),
        const SizedBox(height: 12),
        ...q.options.map((opt) {
          final isCorrect = _answered && opt == q.correct;
          return Card(
            color: isCorrect
                ? theme.colorScheme.primary.withOpacity(0.3)
                : theme.cardColor,
            child: ListTile(
              title: Text(opt),
              onTap: () => _answer(opt),
            ),
          );
        }),
      ],
    );
  }

  Widget _buildSummary(BuildContext context, ThemeProvider prov) {
    final loc = AppLocalizations.of(context)!;
    final theme = Theme.of(context);

    return SafeArea(
      child: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: _glassCard(
          prov,
          theme,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              Center(child: Text('üéâ ${loc.quizSummary}', style: prov.floatingTextStyle(fontSize: 24))),
              const SizedBox(height: 16),
              ..._questions.asMap().entries.map((e) {
                final i = e.key;
                final q = e.value;
                return Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text('Q${i + 1}: ${q.prompt}', style: theme.textTheme.bodyLarge),
                    Text('‚úÖ ${loc.correct}: ${q.correct}', style: theme.textTheme.bodyMedium),
                    const Divider(),
                  ],
                );
              }),
              const SizedBox(height: 20),
              Center(
                child: ElevatedButton(
                  onPressed: _fetchQuiz,
                  child: Text(loc.tryAgain),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildFooterNav(ThemeProvider prov, ThemeData theme) {
    return SafeArea(
      child: Padding(
        padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 24),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            _navButton(
              icon: Icons.arrow_back,
              onPressed: _previous,
              prov: prov,
            ),
            _navButton(
              icon: _answered ? Icons.check : Icons.arrow_forward,
              onPressed: _answered ? _next : null,
              prov: prov,
              enabled: _answered,
            ),
            _navButton(
              icon: Icons.exit_to_app,
              onPressed: () => Navigator.pop(context),
              prov: prov,
              tonal: true,
            ),
          ],
        ),
      ),
    );
  }

  Widget _navButton({
    required IconData icon,
    required VoidCallback? onPressed,
    required ThemeProvider prov,
    bool enabled = true,
    bool tonal = false,
  }) {
    final style = tonal
      ? IconButton.styleFrom(
          backgroundColor: prov.glassColor,
          shape: const CircleBorder(),
        )
      : IconButton.styleFrom(
          backgroundColor: prov.glassColor,
          shape: const CircleBorder(),
        );
    return IconButton(
      onPressed: enabled ? onPressed : null,
      icon: Icon(icon),
      style: style,
    );
  }

  Widget _glassCard(ThemeProvider prov, ThemeData theme, {required Widget child}) {
    return ClipRRect(
      borderRadius: BorderRadius.circular(20),
      child: BackdropFilter(
        filter: ImageFilter.blur(sigmaX: 10, sigmaY: 10),
        child: Container(
          decoration: BoxDecoration(
            color: prov.glassColor,
            borderRadius: BorderRadius.circular(20),
            border: Border.all(color: prov.borderColor),
          ),
          padding: const EdgeInsets.all(16),
          child: child,
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/about/about_screen.dart ===

import 'dart:ui' show ImageFilter;

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:package_info_plus/package_info_plus.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';

import '../../core/theme_provider.dart';

class AboutScreen extends StatefulWidget {
  const AboutScreen({super.key});

  @override
  State<AboutScreen> createState() => _AboutScreenState();
}

class _AboutScreenState extends State<AboutScreen> {
  String _appVersion = '';

  @override
  void initState() {
    super.initState();
    _loadAppInfo();
  }

  Future<void> _loadAppInfo() async {
    final PackageInfo info = await PackageInfo.fromPlatform();
    setState(() {
      _appVersion = '${info.version} (Build ${info.buildNumber})';
    });
  }

  Future<void> _launchEmail() async {
    final Uri emailUri = Uri(
      scheme: 'mailto',
      path: 'customerservice@dsmobiles.com',
      queryParameters: {'subject': 'BD News Reader App Inquiry'},
    );
    if (await canLaunchUrl(emailUri)) {
      await launchUrl(emailUri);
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Could not open email app.')),
      );
    }
  }

  Future<void> _launchWebsite() async {
    final Uri uri = Uri.parse('https://www.dsmobiles.com');
    if (await canLaunchUrl(uri)) await launchUrl(uri, mode: LaunchMode.externalApplication);
  }

  void _copyToClipboard(String text, String label) {
    Clipboard.setData(ClipboardData(text: text));
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('$label copied to clipboard'),
        backgroundColor: Theme.of(context).colorScheme.secondary,
        duration: const Duration(seconds: 2),
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        margin: const EdgeInsets.all(16),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final colorScheme = theme.colorScheme;
    final mode = context.watch<ThemeProvider>().appThemeMode;

    late Color startColor;
    late Color endColor;
    switch (mode) {
      case AppThemeMode.bangladesh:
        startColor = const Color(0xFF00796B);
        endColor = const Color(0xFF004D40);
        break;
      case AppThemeMode.dark:
        startColor = const Color(0xFF2A2D30);
        endColor = const Color(0xFF1E2124);
        break;
      case AppThemeMode.light:
      default:
        startColor = const Color(0xFF42A5F5);
        endColor = const Color(0xFF1565C0);
        break;
    }

    return Scaffold(
      extendBodyBehindAppBar: true,
      backgroundColor: Colors.transparent,
      appBar: AppBar(
        title: const Text('About Us'),
        centerTitle: true,
        elevation: 0,
        backgroundColor: Colors.transparent,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => context.go('/home'),
        ),
        flexibleSpace: ClipRect(
          child: BackdropFilter(
            filter: ImageFilter.blur(sigmaX: 16, sigmaY: 16),
            child: const SizedBox.expand(),
          ),
        ),
      ),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [
                  startColor.withOpacity(0.85),
                  endColor.withOpacity(0.85),
                ],
              ),
            ),
          ),
          ListView(
            padding: EdgeInsets.fromLTRB(20, MediaQuery.of(context).padding.top + kToolbarHeight + 24, 20, 20),
            children: [
              Column(
                children: [
                  Container(
                    height: 100,
                    width: 100,
                    margin: const EdgeInsets.only(bottom: 12),
                    decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      border: Border.all(color: colorScheme.primary, width: 2),
                      boxShadow: [
                        BoxShadow(color: colorScheme.primary.withOpacity(0.2), blurRadius: 10)
                      ],
                      image: const DecorationImage(
                        image: AssetImage('assets/logo.png'),
                        fit: BoxFit.cover,
                      ),
                    ),
                  ),
                  Text('BDNewsHub',
                      style: theme.textTheme.headlineSmall?.copyWith(fontWeight: FontWeight.bold)),
                  const SizedBox(height: 6),
                  Text(
                    'Real-time News at Your Fingertips',
                    style: theme.textTheme.bodyMedium?.copyWith(
                      color: theme.colorScheme.onSurface.withOpacity(0.7),
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 30),
              _buildThemeCard(
                icon: Icons.auto_stories,
                title: 'Our Story',
                content:
                    'BD News Reader is the first mobile app by DSMobiles Group, delivering fast and reliable news updates. Our mission is to create free, high-quality apps that inform and empower.',
              ),
              _buildThemeCard(
                icon: Icons.track_changes,
                title: 'Our Vision',
                content:
                    'We envision a world where information is free and universal. Through user-first design and innovative tools, we aim to create digital experiences that inspire.',
              ),
              _buildThemeCard(
                icon: Icons.mail,
                title: 'Contact Us',
                contentWidget: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    _buildContactTile(
                      label: 'customerservice@dsmobiles.com',
                      icon: Icons.email,
                      onTap: _launchEmail,
                      onLongPress: () => _copyToClipboard('customerservice@dsmobiles.com', 'Email'),
                    ),
                    const SizedBox(height: 12),
                    _buildContactTile(
                      label: 'www.dsmobiles.com',
                      icon: Icons.language,
                      onTap: _launchWebsite,
                      onLongPress: () => _copyToClipboard('https://www.dsmobiles.com', 'Website'),
                    ),
                  ],
                ),
              ),
              const SizedBox(height: 20),
              Center(
                child: Column(
                  children: [
                    Text('Version $_appVersion', style: theme.textTheme.bodySmall),
                    const SizedBox(height: 4),
                    Text(
                      '¬© ${DateTime.now().year} DreamSD Group',
                      style: theme.textTheme.labelSmall?.copyWith(
                        color: theme.colorScheme.onSurface.withOpacity(0.5),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildThemeCard({
    required IconData icon,
    required String title,
    String? content,
    Widget? contentWidget,
  }) {
    final theme = Theme.of(context);
    return Container(
      margin: const EdgeInsets.symmetric(vertical: 10),
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(18),
        color: theme.cardColor,
        boxShadow: [BoxShadow(color: theme.shadowColor.withOpacity(0.05), blurRadius: 12)],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Icon(icon, color: theme.colorScheme.primary, size: 32),
          const SizedBox(height: 16),
          Text(
            title,
            style: theme.textTheme.titleMedium?.copyWith(fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 10),
          if (content != null)
            Text(
              content,
              style: theme.textTheme.bodyMedium?.copyWith(height: 1.5),
              textAlign: TextAlign.justify,
            ),
          if (contentWidget != null) contentWidget,
        ],
      ),
    );
  }

  Widget _buildContactTile({
    required String label,
    required IconData icon,
    required VoidCallback onTap,
    required VoidCallback onLongPress,
  }) {
    final theme = Theme.of(context);
    return InkWell(
      borderRadius: BorderRadius.circular(12),
      onTap: onTap,
      onLongPress: onLongPress,
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 14),
        decoration: BoxDecoration(
          color: theme.cardColor.withOpacity(0.95),
          borderRadius: BorderRadius.circular(12),
          border: Border.all(color: theme.colorScheme.outline.withOpacity(0.1)),
        ),
        child: Row(
          children: [
            Icon(icon, color: theme.colorScheme.primary),
            const SizedBox(width: 14),
            Expanded(
              child: Text(
                label,
                style: theme.textTheme.bodyMedium?.copyWith(fontWeight: FontWeight.w600),
              ),
            ),
            const Icon(Icons.copy, size: 18, color: Colors.grey),
          ],
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/search/search_screen.dart ===

// lib/features/search/search_screen.dart

import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:string_similarity/string_similarity.dart';

import '../../core/navigation_helper.dart';
import '/l10n/app_localizations.dart';

class SearchScreen extends StatefulWidget {
  const SearchScreen({super.key});

  @override
  State<SearchScreen> createState() => _SearchScreenState();
}

class _SearchScreenState extends State<SearchScreen> {
  final TextEditingController _searchController = TextEditingController();
  final List<String> _dataSet = ['Prothom Alo', 'Daily Star', 'Jugantor', 'Kaler Kantho', 'BBC Bangla', 'Anandabazar', 'Dhaka Tribune', 'News24', 'Rtv', 'Bangladesh Pratidin', 'Desh TV', 'Time Magazine', 'The Economist', 'Forbes', 'Nat Geo', 'Science Today'];
  List<String> _suggestions = [];
  List<String> _recentSearches = [];
  bool _isSearching = false;

  @override
  void initState() {
    super.initState();
    _loadRecentSearches();
    _searchController.addListener(_updateSuggestions);
  }

  Future<void> _loadRecentSearches() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() => _recentSearches = prefs.getStringList('recent_searches') ?? []);
  }

  Future<void> _saveSearchQuery(String query) async {
    final prefs = await SharedPreferences.getInstance();
    final updated = [query, ..._recentSearches.where((q) => q != query)];
    await prefs.setStringList('recent_searches', updated.take(10).toList());
    setState(() => _recentSearches = updated.take(10).toList());
  }

  void _updateSuggestions() {
    final query = _searchController.text.trim().toLowerCase();
    if (query.isEmpty) {
      setState(() => _suggestions = []);
    } else {
      final matches = _dataSet
          .where((entry) => entry.toLowerCase().contains(query))
          .toList();

      matches.sort((a, b) => b.similarityTo(query).compareTo(a.similarityTo(query)));

      setState(() => _suggestions = matches.take(5).toList());
    }
  }

  void _onSelect(String query) async {
    _searchController.text = query;
    await _saveSearchQuery(query);

    if (query.toLowerCase().contains('magazine')) {
      NavigationHelper.goMagazines(context);
    } else if (query.toLowerCase().contains('newspaper') ||
        _dataSet.any((d) => d.toLowerCase() == query.toLowerCase())) {
      NavigationHelper.goNewspaper(context);
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('No match found for "$query"')),
      );
    }
  }

  void _clearQuery() {
    _searchController.clear();
    setState(() => _suggestions.clear());
  }

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final theme = Theme.of(context);

    return Scaffold(
      appBar: AppBar(
        title: Text(loc.searchHint),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => NavigationHelper.goHome(context),
        ),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(children: [
          TextField(
            controller: _searchController,
            textInputAction: TextInputAction.search,
            onSubmitted: _onSelect,
            decoration: InputDecoration(
              hintText: loc.searchHint,
              prefixIcon: const Icon(Icons.search),
              suffixIcon: _searchController.text.isNotEmpty
                  ? IconButton(
                      icon: const Icon(Icons.clear),
                      onPressed: _clearQuery,
                    )
                  : null,
              border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),
            ),
          ),
          const SizedBox(height: 16),
          if (_suggestions.isNotEmpty)
            Expanded(
              child: ListView(
                children: _suggestions.map((s) => ListTile(
                  title: Text(s),
                  onTap: () => _onSelect(s),
                )).toList(),
              ),
            )
          else
            Expanded(
              child: ListView(
                children: [
                  if (_recentSearches.isNotEmpty)
                    Text('Recent Searches', style: theme.textTheme.titleMedium),
                  ..._recentSearches.map((q) => ListTile(
                        leading: const Icon(Icons.history),
                        title: Text(q),
                        onTap: () => _onSelect(q),
                      )),
                ],
              ),
            )
        ]),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/common/webview_screen.dart ===

import 'dart:convert';
import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:flutter_inappwebview/flutter_inappwebview.dart';
import 'package:provider/provider.dart';
import 'package:share_plus/share_plus.dart';
import 'package:shared_preferences/shared_preferences.dart';

import '../../core/utils/favorites_manager.dart';
import '../../data/models/news_article.dart';
import '/l10n/app_localizations.dart';
import '../../core/theme_provider.dart';

enum _TranslateEngine { google, bing, deepl }

extension on _TranslateEngine {
  String get label {
    switch (this) {
      case _TranslateEngine.google:
        return 'Google Translate';
      case _TranslateEngine.bing:
        return 'Bing Translator';
      case _TranslateEngine.deepl:
        return 'DeepL';
    }
  }
}

class WebViewScreen extends StatefulWidget {
  final String url;
  final String title;

  const WebViewScreen({
    Key? key,
    required this.url,
    this.title = 'Web View',
  }) : super(key: key);

  @override
  State<WebViewScreen> createState() => _WebViewScreenState();
}

class _WebViewScreenState extends State<WebViewScreen> {
  InAppWebViewController? _ctrl;
  late final PullToRefreshController _ptrCtrl;
  double _progress = 0.0;
  bool _readerMode = false;

  int _scrollY = 0;
  DateTime? _startTime;

  @override
  void initState() {
    super.initState();
    _ptrCtrl = PullToRefreshController(
      options: PullToRefreshOptions(color: Colors.blueAccent),
      onRefresh: () => _ctrl?.reload(),
    );
  }

  @override
  void dispose() {
    _saveScrollPosition();
    _recordReadingSession();
    _ctrl?.stopLoading();
    super.dispose();
  }

  Future<void> _recordReadingSession() async {
    if (_startTime == null) return;

    final duration = DateTime.now().difference(_startTime!).inSeconds;
    if (duration < 10) return; // skip very short sessions

    final prefs = await SharedPreferences.getInstance();
    final stat = {
      'url': widget.url,
      'title': widget.title,
      'readAt': DateTime.now().toIso8601String(),
      'durationSec': duration,
    };

    final list = prefs.getStringList('read_stats') ?? [];
    list.add(jsonEncode(stat));
    await prefs.setStringList('read_stats', list.take(50).toList()); // cap to 50 entries
  }

  Future<void> _saveScrollPosition() async {
    if (_ctrl == null) return;
    final prefs = await SharedPreferences.getInstance();
    final scrollY = await _ctrl!.getScrollY();
    await prefs.setInt('scroll_${widget.url}', scrollY ?? 0);
  }

  Future<void> _restoreScrollPosition() async {
    final prefs = await SharedPreferences.getInstance();
    _scrollY = prefs.getInt('scroll_${widget.url}') ?? 0;
    Future.delayed(const Duration(milliseconds: 400), () {
      _ctrl?.scrollTo(x: 0, y: _scrollY);
    });
  }

  Future<void> _showErrorSnackbar(String message) async {
    if (!mounted) return;
    ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(message)));
  }

  Future<void> _shareUrl() async {
    try {
      final uri = await _ctrl?.getUrl();
      if (uri == null) throw Exception('URL not available');
      await Share.share(uri.toString());
    } catch (e) {
      await _showErrorSnackbar('Could not share URL: $e');
    }
  }

  Future<void> _bookmarkUrl() async {
    try {
      final uri = await _ctrl?.getUrl();
      final title = await _ctrl?.getTitle();
      if (uri == null || title == null) throw Exception('Missing URL or title');
      final article = NewsArticle(
        title: title,
        url: uri.toString(),
        publishedAt: DateTime.now(),
        source: Uri.parse(uri.toString()).host,
        description: '',
        imageUrl: null,
        language: 'en',
        snippet: '',
        fullContent: '',
        isLive: false,
      );
      FavoritesManager.instance.toggleArticle(article);
      await _showErrorSnackbar(AppLocalizations.of(context)!.bookmarkSuccess);
    } catch (e) {
      await _showErrorSnackbar('Bookmark failed: $e');
    }
  }

  Future<void> _toggleReaderMode() async {
    if (_ctrl == null) return;
    _readerMode = !_readerMode;
    final js = _readerMode
        ? "document.querySelectorAll('header, footer, nav, aside, .ads, .popup').forEach(e => e.remove()); document.body.style.padding='16px';"
        : "location.reload();";
    try {
      await _ctrl!.evaluateJavascript(source: js);
      setState(() {});
    } catch (e) {
      await _showErrorSnackbar('Reader mode failed: $e');
    }
  }

  Future<void> _translate(_TranslateEngine engine) async {
    try {
      final uri = await _ctrl?.getUrl();
      if (uri == null) throw Exception('URL not available');
      final encoded = Uri.encodeComponent(uri.toString());
      final translateUrl = switch (engine) {
        _TranslateEngine.google => 'https://translate.google.com/translate?u=$encoded',
        _TranslateEngine.bing => 'https://www.bing.com/translator?text=$encoded',
        _TranslateEngine.deepl => 'https://www.deepl.com/translator#auto/en/$encoded',
      };
      await _ctrl!.loadUrl(urlRequest: URLRequest(url: WebUri(translateUrl)));
    } catch (e) {
      await _showErrorSnackbar('Translate failed: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final theme = Theme.of(context);
    final scheme = theme.colorScheme;

    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title, style: theme.textTheme.titleMedium),
        centerTitle: true,
        backgroundColor: scheme.surface.withOpacity(0.7),
        elevation: 0,
        bottom: PreferredSize(
          preferredSize: const Size.fromHeight(3),
          child: LinearProgressIndicator(
            value: _progress < 1 ? _progress : 0,
            backgroundColor: Colors.transparent,
            color: scheme.secondary,
          ),
        ),
        actions: [
          IconButton(icon: const Icon(Icons.translate), onPressed: () => _translate(_TranslateEngine.google)),
          IconButton(icon: const Icon(Icons.share), onPressed: _shareUrl),
          IconButton(icon: const Icon(Icons.bookmark_add), onPressed: _bookmarkUrl),
          PopupMenuButton<String>(
            icon: const Icon(Icons.more_vert),
            onSelected: (value) {
              if (value == '_toggleReader') _toggleReaderMode();
            },
            itemBuilder: (_) => [
              CheckedPopupMenuItem(
                value: '_toggleReader',
                checked: _readerMode,
                child: Text(loc.readerMode),
              ),
            ],
          ),
        ],
      ),
      body: InAppWebView(
        initialUrlRequest: URLRequest(url: WebUri(widget.url)),
        pullToRefreshController: _ptrCtrl,
        initialSettings: InAppWebViewSettings(
          javaScriptEnabled: true,
          domStorageEnabled: true,
          useWideViewPort: true,
          loadWithOverviewMode: true,
          builtInZoomControls: true,
          supportZoom: true,
          displayZoomControls: false,
          cacheEnabled: true,
        ),
        onWebViewCreated: (controller) => _ctrl = controller,
        onLoadStart: (_, __) {
          _startTime = DateTime.now();
          setState(() => _progress = 0);
        },
        onProgressChanged: (_, p) => setState(() => _progress = p / 100),
        onLoadStop: (_, __) async {
          _ptrCtrl.endRefreshing();
          await _restoreScrollPosition();
        },
        onLoadError: (_, __, ___, ____) => _showErrorSnackbar(loc.loadError),
        onLoadHttpError: (_, __, ___, ____) => _showErrorSnackbar(loc.loadError),
      ),
      bottomNavigationBar: BottomAppBar(
        color: scheme.surface.withOpacity(0.08),
        elevation: 8,
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceAround,
          children: [
            IconButton(icon: const Icon(Icons.arrow_back), onPressed: () => _ctrl?.goBack()),
            IconButton(icon: const Icon(Icons.arrow_forward), onPressed: () => _ctrl?.goForward()),
            IconButton(icon: const Icon(Icons.refresh), onPressed: () => _ctrl?.reload()),
            IconButton(icon: const Icon(Icons.home), onPressed: () {
              _ctrl?.loadUrl(urlRequest: URLRequest(url: WebUri(widget.url)));
            }),
          ],
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/common/animated_background.dart ===

// lib/features/news/widgets/animated_background.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../core/theme_provider.dart';
import '../../core/theme.dart';

/// A full-screen overlay that can optionally blur the backdrop
/// and apply a semi-transparent animated gradient tint based on theme.
class AnimatedBackground extends StatelessWidget {
  final Duration duration;
  final Widget? child;
  final double blurSigma;
  final double overlayOpacity;

  const AnimatedBackground({
    super.key,
    this.duration = const Duration(seconds: 20),
    this.child,
    this.blurSigma = 20,
    this.overlayOpacity = 0.3,
  });

  @override
  Widget build(BuildContext context) {
    final mode = context.watch<ThemeProvider>().appThemeMode;
    final colors = _gradientColors(mode);

    return Stack(fit: StackFit.expand, children: [
      if (blurSigma > 0)
        Positioned.fill(
          child: BackdropFilter(
            filter: ImageFilter.blur(sigmaX: blurSigma, sigmaY: blurSigma),
            child: const SizedBox.shrink(),
          ),
        ),
      if (overlayOpacity > 0)
        Positioned.fill(
          child: AnimatedContainer(
            duration: duration,
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: colors
                    .map((c) => c.withOpacity(overlayOpacity))
                    .toList(),
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
              ),
            ),
          ),
        ),
      if (child != null) child!,
    ]);
  }

  List<Color> _gradientColors(AppThemeMode mode) {
    return switch (mode) {
      AppThemeMode.dark => [Colors.black87, Colors.grey.shade900],
      AppThemeMode.bangladesh => [const Color(0xFF004D40), const Color(0xFF26A69A)],
      AppThemeMode.light => [const Color.fromARGB(255, 232, 231, 231), Colors.grey.shade100],
    };
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/common/appBar.dart ===

import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';

class AppBarTitle extends StatelessWidget {
  final String title;

  const AppBarTitle(this.title, {super.key, TextStyle? styleOverride});

  @override
  Widget build(BuildContext context) {
    final appBarTextStyle = Theme.of(context).appBarTheme.titleTextStyle ??
        GoogleFonts.poppins(
          fontSize: 24,
          fontWeight: FontWeight.w900,
          letterSpacing: 1.2,
          color: Theme.of(context).colorScheme.onSurface,
        );

    return Text(
      title,
      textAlign: TextAlign.center,
      style: appBarTextStyle,
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/magazine/magazine_screen.dart ===

// lib/features/magazine/magazine_screen.dart

import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:provider/provider.dart';
import 'package:go_router/go_router.dart';

import '/core/theme_provider.dart';
import '/core/theme.dart';
import '/core/utils/favorites_manager.dart';
import '/l10n/app_localizations.dart';
import '../../widgets/app_drawer.dart';
import '../../features/common/appBar.dart';
import 'widgets/magazine_card.dart';

class MagazineScreen extends StatefulWidget {
  const MagazineScreen({Key? key}) : super(key: key);

  @override
  State<MagazineScreen> createState() => _MagazineScreenState();
}

class _MagazineScreenState extends State<MagazineScreen>
    with SingleTickerProviderStateMixin {
  final List<dynamic> magazines = [];
  bool _isLoading = true;

  late final TabController _tabController;
  late final ScrollController _scrollController;
  late final ScrollController _chipsController;
  late final List<GlobalKey> _chipKeys;

  DateTime? _lastBackPressed;

  static const int _categoriesCount = 8;
  static const Color _gold = Color(0xFFFFD700);

  @override
  void initState() {
    super.initState();
    _scrollController = ScrollController();
    _chipsController = ScrollController();
    _tabController = TabController(length: _categoriesCount, vsync: this)
      ..addListener(() {
        _centerChip(_tabController.index);
        setState(() {});
      });
    _chipKeys = List.generate(_categoriesCount, (_) => GlobalKey());
    _loadMagazines();
  }

  Future<void> _loadMagazines() async {
    setState(() => _isLoading = true);
    try {
      final raw = await rootBundle.loadString('assets/data.json');
      final data = json.decode(raw);
      setState(() {
        magazines
          ..clear()
          ..addAll(data['magazines'] ?? []);
        _isLoading = false;
      });
    } catch (e) {
      setState(() => _isLoading = false);
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text('Load failed: $e')));
    }
  }

  Future<bool> _onWillPop() async {
    final now = DateTime.now();
    if (_lastBackPressed == null ||
        now.difference(_lastBackPressed!) > const Duration(seconds: 2)) {
      _lastBackPressed = now;
      Fluttertoast.showToast(msg: "Press back again to exit");
      return false;
    }
    return true;
  }

  List<String> _categories(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    return [
      loc.catFashion,
      loc.catScience,
      loc.catFinance,
      loc.catAffairs,
      loc.catTech,
      loc.catArts,
      loc.catLifestyle,
      loc.catSports,
    ];
  }

  List<dynamic> get _filteredMagazines {
    final cats = _categories(context);
    final keys = {
      cats[0]: ['fashion', 'style', 'aesthetics'],
      cats[1]: ['science', 'discovery', 'research'],
      cats[2]: ['finance', 'economics', 'business'],
      cats[3]: ['global', 'politics', 'world'],
      cats[4]: ['technology', 'tech'],
      cats[5]: ['arts', 'culture'],
      cats[6]: ['lifestyle', 'luxury', 'travel'],
      cats[7]: ['sports', 'performance'],
    };
    final sel = cats[_tabController.index];
    final kws = keys[sel] ?? [];
    return magazines.where((m) {
      final tags = List<String>.from(m['tags'] ?? []);
      return tags.any((t) => kws.any((kw) => t.toLowerCase().contains(kw)));
    }).toList();
  }

  void _centerChip(int index) {
    final key = _chipKeys[index];
    if (key.currentContext != null) {
      Scrollable.ensureVisible(
        key.currentContext!,
        duration: const Duration(milliseconds: 200),
        alignment: 0.5,
      );
    }
  }

  void _toggleFavorite(dynamic m) async {
    await FavoritesManager.instance.toggleMagazine(m);
    setState(() {});
  }

  @override
  void dispose() {
    _scrollController.dispose();
    _chipsController.dispose();
    _tabController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final mode = context.watch<ThemeProvider>().appThemeMode;
    final gradientColors = AppGradients.getGradientColors(mode);
    final theme = Theme.of(context);
    final scheme = theme.colorScheme;
    final categories = _categories(context);

    return WillPopScope(
      onWillPop: _onWillPop,
      child: Scaffold(
        extendBodyBehindAppBar: true,
        backgroundColor: scheme.background,
        drawer: const AppDrawer(),
        body: Stack(
          fit: StackFit.expand,
          children: [
            Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: [
                    gradientColors[0].withOpacity(0.85),
                    gradientColors[1].withOpacity(0.85),
                  ],
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                ),
              ),
            ),
            CustomScrollView(
              slivers: [
                SliverAppBar(
                  pinned: true,
                  backgroundColor: theme.appBarTheme.backgroundColor,
                  elevation: theme.appBarTheme.elevation,
                  centerTitle: true,
                  titleTextStyle: theme.appBarTheme.titleTextStyle,
                  title: AppBarTitle(loc.magazines),
                  iconTheme: theme.appBarTheme.iconTheme,
                ),
                SliverToBoxAdapter(
                  child: SizedBox(
                    height: 48,
                    child: ListView.builder(
                      controller: _chipsController,
                      scrollDirection: Axis.horizontal,
                      padding: const EdgeInsets.symmetric(horizontal: 12),
                      itemCount: categories.length,
                      itemBuilder: (ctx, i) {
                        final sel = i == _tabController.index;
                        return Padding(
                          key: _chipKeys[i],
                          padding: const EdgeInsets.symmetric(horizontal: 6),
                          child: ChoiceChip(
                            label: Text(categories[i]),
                            selected: sel,
                            onSelected: (_) {
                              _tabController.animateTo(i);
                              _centerChip(i);
                            },
                            backgroundColor: scheme.surface.withOpacity(0.5),
                            selectedColor: _gold,
                            labelStyle: TextStyle(
                              color: sel ? Colors.black : scheme.onSurface,
                              fontWeight: sel ? FontWeight.bold : FontWeight.w600,
                            ),
                          ),
                        );
                      },
                    ),
                  ),
                ),
                SliverFillRemaining(
                  child: _isLoading
                      ? Center(
                          child: CircularProgressIndicator(
                            valueColor: AlwaysStoppedAnimation(scheme.primary),
                          ),
                        )
                      : _filteredMagazines.isEmpty
                          ? Center(
                              child: Text(
                                loc.noMagazines,
                                style: theme.textTheme.bodyLarge,
                              ),
                            )
                          : RefreshIndicator(
                              color: scheme.primary,
                              onRefresh: _loadMagazines,
                              child: ListView.builder(
                                controller: _scrollController,
                                padding: const EdgeInsets.all(16),
                                itemCount: _filteredMagazines.length,
                                itemBuilder: (_, idx) {
                                  final m = _filteredMagazines[idx];
                                  final id = m['id'].toString();
                                  final isFav = FavoritesManager.instance.isFavoriteMagazine(id);

                                  return AnimatedContainer(
                                    duration: const Duration(milliseconds: 400),
                                    curve: Curves.easeInOut,
                                    margin: const EdgeInsets.only(bottom: 12),
                                    decoration: BoxDecoration(
                                      borderRadius: BorderRadius.circular(20),
                                      color: theme.cardColor.withOpacity(0.03),
                                      border: Border.all(
                                        color: theme.colorScheme.outline.withOpacity(0.15),
                                        width: 1.2,
                                      ),
                                      boxShadow: isFav
                                          ? [
                                              BoxShadow(
                                                color: theme.colorScheme.primary.withOpacity(0.25),
                                                blurRadius: 14,
                                                spreadRadius: 1,
                                                offset: const Offset(0, 6),
                                              ),
                                            ]
                                          : [],
                                    ),
                                    child: MagazineCard(
                                      magazine: m,
                                      isFavorite: isFav,
                                      onFavoriteToggle: () => _toggleFavorite(m),
                                      highlight: true,
                                    ),
                                  );
                                },
                              ),
                            ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/magazine/widgets/magazine_card.dart ===

// lib/features/magazine/widgets/magazine_card.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';
import 'package:share_plus/share_plus.dart';

import '../../../core/theme_provider.dart';
import '../../../core/theme.dart';

class MagazineCard extends StatefulWidget {
  final Map<String, dynamic> magazine;
  final bool isFavorite;
  final VoidCallback onFavoriteToggle;
  final bool highlight;

  const MagazineCard({
    Key? key,
    required this.magazine,
    required this.isFavorite,
    required this.onFavoriteToggle,
    this.highlight = true,
  }) : super(key: key);

  @override
  State<MagazineCard> createState() => _MagazineCardState();
}

class _MagazineCardState extends State<MagazineCard>
    with SingleTickerProviderStateMixin {
  bool _isPressed = false;

  void _open(BuildContext context) {
    final url = widget.magazine['contact']?['website'] as String? ??
        widget.magazine['url'] as String? ??
        '';
    final title = widget.magazine['name'] as String? ?? 'Magazine';
    if (url.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('No URL available')),
      );
      return;
    }
    context.push('/webview', extra: {'url': url, 'title': title});
  }

  String? _getLocalLogoPath() {
    final id = widget.magazine['id']?.toString();
    return id != null ? 'assets/logos/$id.png' : null;
  }

  void _share() {
    final title = widget.magazine['name'] as String? ?? 'Magazine';
    final url = widget.magazine['contact']?['website'] as String? ?? '';
    if (url.isNotEmpty) Share.share('$title\n$url');
  }

  @override
  Widget build(BuildContext context) {
    final prov = context.watch<ThemeProvider>();
    final mode = prov.appThemeMode;
    final gradientColors = AppGradients.getGradientColors(mode);
    final localLogo = _getLocalLogoPath();
    final initials = (widget.magazine['name'] as String? ?? 'MG')
        .substring(0, 2)
        .toUpperCase();

    return GestureDetector(
      onTapDown: (_) => setState(() => _isPressed = true),
      onTapUp: (_) => setState(() => _isPressed = false),
      onTapCancel: () => setState(() => _isPressed = false),
      onTap: () => _open(context),
      child: AnimatedScale(
        scale: _isPressed ? 0.97 : 1.0,
        duration: const Duration(milliseconds: 150),
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 10),
          child: AspectRatio(
            aspectRatio: 3 / 1,
            child: Container(
              // 1) Outer gradient border
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(24),
                gradient: LinearGradient(
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                  colors: widget.highlight
                      ? gradientColors
                      : [Colors.white24, Colors.white10],
                ),
              ),
              padding: const EdgeInsets.all(2), // border thickness
              child: Container(
                // 2) Inner frosted-glass card
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(22),
                  color: mode == AppThemeMode.dark
                      ? Colors.white.withOpacity(0.06)
                      : Colors.white.withOpacity(0.02),
                  border: Border.all(
                    color: Colors.white.withOpacity(0.08),
                    width: 1.2,
                  ),
                ),
                child: ClipRRect(
                  borderRadius: BorderRadius.circular(22),
                  child: Stack(
                    fit: StackFit.expand,
                    children: [
                      // Frosted backdrop
                      BackdropFilter(
                        filter: ImageFilter.blur(sigmaX: 30, sigmaY: 30),
                        child: Container(
                          decoration: BoxDecoration(
                            gradient: LinearGradient(
                              begin: Alignment.topLeft,
                              end: Alignment.bottomRight,
                              colors: [
                                Colors.white.withOpacity(0.08),
                                Colors.white.withOpacity(0.02),
                              ],
                            ),
                          ),
                        ),
                      ),

                      // Dark/Bangladesh overlay
                      if (mode == AppThemeMode.dark ||
                          mode == AppThemeMode.bangladesh)
                        Container(
                          decoration: const BoxDecoration(
                            gradient: LinearGradient(
                              begin: Alignment.topCenter,
                              end: Alignment.bottomCenter,
                              colors: [
                                Colors.white30,
                                Colors.transparent,
                              ],
                            ),
                          ),
                        ),

                      // Centered logo circle
                      Center(
                        child: Padding(
                          padding: const EdgeInsets.all(20.0),
                          child: Container(
                            decoration: BoxDecoration(
                              shape: BoxShape.circle,
                              gradient: RadialGradient(
                                center: Alignment.center,
                                radius: 0.5,
                                colors: [
                                  Colors.white.withOpacity(
                                      mode == AppThemeMode.dark ? 0.25 : 0.1),
                                  Colors.transparent,
                                ],
                              ),
                              boxShadow: widget.highlight
                                  ? [
                                      BoxShadow(
                                        color: Colors.white.withOpacity(0.15),
                                        blurRadius: 24,
                                        spreadRadius: 1,
                                        offset: const Offset(0, 4),
                                      ),
                                    ]
                                  : [],
                            ),
                            padding: const EdgeInsets.all(8),
                            child: localLogo != null
                                ? ClipRRect(
                                    borderRadius: BorderRadius.circular(16),
                                    child: Image.asset(
                                      localLogo,
                                      fit: BoxFit.contain,
                                      errorBuilder: (_, __, ___) =>
                                          _fallbackAvatar(initials),
                                    ),
                                  )
                                : _fallbackAvatar(initials),
                          ),
                        ),
                      ),

                      // Favorite + share at bottom-left
                      Positioned(
                        bottom: 8,
                        left: 8,
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            IconButton(
                              icon: Icon(
                                widget.isFavorite
                                    ? Icons.favorite
                                    : Icons.favorite_border,
                                color: widget.isFavorite
                                    ? Colors.redAccent
                                    : Colors.white,
                                size: 20,
                              ),
                              onPressed: widget.onFavoriteToggle,
                              visualDensity: VisualDensity.compact,
                              padding: EdgeInsets.zero,
                              constraints: const BoxConstraints(),
                            ),
                            const SizedBox(height: 4),
                            IconButton(
                              icon: const Icon(Icons.share, size: 20),
                              color: Colors.white70,
                              onPressed: _share,
                              visualDensity: VisualDensity.compact,
                              padding: EdgeInsets.zero,
                              constraints: const BoxConstraints(),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _fallbackAvatar(String txt) => Container(
        decoration: BoxDecoration(
          color: Colors.grey.shade200.withOpacity(0.4),
          borderRadius: BorderRadius.circular(16),
        ),
        alignment: Alignment.center,
        child: Text(
          txt,
          style: const TextStyle(
            fontSize: 24,
            fontWeight: FontWeight.bold,
            color: Colors.black87,
          ),
        ),
      );
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/profile/signup_screen.dart ===

// File: lib/features/auth/signup_screen.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';
import '../../../core/theme_provider.dart';
import '../../../features/profile/auth_service.dart';
import '/l10n/app_localizations.dart';

class SignupScreen extends StatefulWidget {
  const SignupScreen({super.key});

  @override
  State<SignupScreen> createState() => _SignupScreenState();
}

class _SignupScreenState extends State<SignupScreen> {
  final _nameCtl = TextEditingController();
  final _emailCtl = TextEditingController();
  final _passCtl = TextEditingController();
  String? _error;
  bool _loading = false;

  @override
  void dispose() {
    _nameCtl.dispose();
    _emailCtl.dispose();
    _passCtl.dispose();
    super.dispose();
  }

  Future<void> _signup() async {
    setState(() => _loading = true);
    final msg = await AuthService().signUp(
      _nameCtl.text.trim(),
      _emailCtl.text.trim(),
      _passCtl.text.trim(),
    );
    setState(() => _loading = false);
    if (msg != null) {
      setState(() => _error = msg);
    } else {
      context.go('/home');
    }
  }

  Future<void> _signupWithGoogle() async {
    setState(() => _loading = true);
    final result = await AuthService().signInWithGoogle();
    setState(() => _loading = false);
    if (result != null) {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(result)));
    } else {
      context.go('/home');
    }
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final mode = context.watch<ThemeProvider>().appThemeMode;
    final textColor = Theme.of(context).textTheme.bodyLarge?.color ?? Colors.white;

    return Scaffold(
      extendBodyBehindAppBar: true,
      backgroundColor: Colors.transparent,
      body: Stack(
        fit: StackFit.expand,
        children: [
          _buildBackground(mode),
          Container(color: _glassTint(mode)),
          SafeArea(
            child: SingleChildScrollView(
              padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 80),
              child: ClipRRect(
                borderRadius: BorderRadius.circular(24),
                child: BackdropFilter(
                  filter: ImageFilter.blur(sigmaX: 16, sigmaY: 16),
                  child: Container(
                    padding: const EdgeInsets.all(24),
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(24),
                      border: Border.all(color: Colors.white30, width: 1),
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.stretch,
                      children: [
                        Text(
                          loc.signup,
                          textAlign: TextAlign.center,
                          style: TextStyle(
                            fontSize: 28,
                            fontWeight: FontWeight.bold,
                            color: textColor,
                          ),
                        ),
                        const SizedBox(height: 24),

                        if (_error != null) ...[
                          Text(
                            _mapError(loc, _error!),
                            style: const TextStyle(color: Colors.redAccent),
                            textAlign: TextAlign.center,
                          ),
                          const SizedBox(height: 16),
                        ],

                        _glassField(loc.fullName, controller: _nameCtl, textColor: textColor),
                        const SizedBox(height: 12),
                        _glassField(loc.email, controller: _emailCtl, textColor: textColor),
                        const SizedBox(height: 12),
                        _glassField(
                          loc.password,
                          controller: _passCtl,
                          obscure: true,
                          textColor: textColor,
                        ),
                        const SizedBox(height: 24),

                        ElevatedButton(
                          onPressed: _loading ? null : _signup,
                          style: ElevatedButton.styleFrom(
                            minimumSize: const Size.fromHeight(50),
                            backgroundColor: Colors.white.withOpacity(0.2),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                          ),
                          child: _loading
                              ? const CircularProgressIndicator(color: Colors.white)
                              : Text(
                                  loc.signup,
                                  style: TextStyle(
                                      color: textColor, fontWeight: FontWeight.bold),
                                ),
                        ),
                        const SizedBox(height: 12),

                        ElevatedButton.icon(
                          icon: Image.asset('assets/google_logo.png', height: 24),
                          label: Text(
                            loc.continueWithGoogle,
                            style: TextStyle(color: textColor),
                          ),
                          onPressed: _loading ? null : _signupWithGoogle,
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.white.withOpacity(0.2),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                            minimumSize: const Size.fromHeight(50),
                          ),
                        ),
                        const SizedBox(height: 12),

                        TextButton(
                          onPressed: () => context.go('/login'),
                          child: Text(
                            loc.alreadyHaveAccount,
                            style: TextStyle(color: textColor),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  String _mapError(AppLocalizations loc, String msg) {
    switch (msg) {
      case 'Invalid email or password.':
        return loc.invalidCredentials;
      case 'No account found. Please sign up first.':
        return loc.noAccountFound;
      case 'Account already exists. Please log in.':
        return loc.accountExists;
      default:
        return msg;
    }
  }

  Widget _buildBackground(AppThemeMode mode) {
    switch (mode) {
      case AppThemeMode.dark:
        return Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [Color(0xFF0D0F13), Color(0xFF1A1C20)],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
          ),
        );
      case AppThemeMode.light:
        return Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [Color(0xFFE0E0E0), Color(0xFFF5F5F5)],
              begin: Alignment.topCenter,
              end: Alignment.bottomCenter,
            ),
          ),
        );
      case AppThemeMode.bangladesh:
      default:
        return Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [Color(0xFF006B3C), Color(0xFFBD1F2D)],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
          ),
        );
    }
  }

  Color _glassTint(AppThemeMode mode) {
    switch (mode) {
      case AppThemeMode.dark:
        return const Color(0xFF121417).withOpacity(0.1);
      case AppThemeMode.light:
        return Colors.white.withOpacity(0.05);
      case AppThemeMode.bangladesh:
      default:
        return const Color(0xFF2F4238).withOpacity(0.12);
    }
  }

  Widget _glassField(
    String label, {
    required TextEditingController controller,
    bool obscure = false,
    required Color textColor,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.white.withOpacity(0.3)),
      ),
      child: TextField(
        controller: controller,
        obscureText: obscure,
        style: TextStyle(color: textColor),
        decoration: InputDecoration(
          labelText: label,
          labelStyle: TextStyle(color: textColor.withOpacity(0.7)),
          border: InputBorder.none,
          contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 14),
        ),
      ),
    );
  }
}

// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/profile/profile_screen.dart ===

import 'dart:io';
import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:provider/provider.dart';
import 'package:image_picker/image_picker.dart';

import '../../core/theme.dart';
import '../../core/theme_provider.dart';
import '/l10n/app_localizations.dart';
import 'auth_service.dart';
import '../../widgets/app_drawer.dart';

class ProfileScreen extends StatefulWidget {
  const ProfileScreen({Key? key}) : super(key: key);

  @override
  State<ProfileScreen> createState() => _ProfileScreenState();
}

class _ProfileScreenState extends State<ProfileScreen> {
  final _formKey = GlobalKey<FormState>();
  late Map<String, dynamic> _profile;
  bool _isEditing = false;
  bool _isSaving = false;
  String? _imagePath;
  final _nameController = TextEditingController();
  final _emailController = TextEditingController();
  final _phoneController = TextEditingController();
  final _roleController = TextEditingController();
  final _departmentController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _loadProfile();
  }

  Future<void> _loadProfile() async {
    try {
      final data = await AuthService().getProfile();
      setState(() {
        _profile = data;
        _nameController.text = data['name'] ?? '';
        _emailController.text = data['email'] ?? '';
        _phoneController.text = data['phone'] ?? '';
        _roleController.text = data['role'] ?? '';
        _departmentController.text = data['department'] ?? '';
        _imagePath = data['image'];
      });
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Failed to load profile')),
        );
      }
    }
  }

  Future<void> _toggleEdit() async {
    if (_isEditing) {
      if (_formKey.currentState!.validate()) {
        setState(() => _isSaving = true);
        try {
          await AuthService().updateProfile(
            name: _nameController.text.trim(),
            email: _emailController.text.trim(),
            phone: _phoneController.text.trim(),
            role: _roleController.text.trim(),
            department: _departmentController.text.trim(),
            imagePath: _imagePath ?? '',
          );
          await _loadProfile();
        } catch (e) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Failed to save profile')),
          );
        }
      }
    }
    setState(() {
      _isEditing = !_isEditing;
      _isSaving = false;
    });
  }

  Future<void> _pickImage() async {
    final picked = await ImagePicker().pickImage(source: ImageSource.gallery);
    if (picked != null) {
      setState(() => _imagePath = picked.path);
    }
  }

  String? validateEmail(String? value) {
    if (value == null || value.isEmpty) return 'Enter email';
    if (!RegExp(r'^[\w\-.]+@([\w\-]+\.)+[\w\-]{2,4}$').hasMatch(value)) {
      return 'Invalid email format';
    }
    return null;
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final currentUser = FirebaseAuth.instance.currentUser;
    if (currentUser == null) {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        if (mounted) context.go('/login');
      });
      return const SizedBox.shrink();
    }

    final theme = Theme.of(context);
    final brightness = theme.brightness;
    final mode = context.watch<ThemeProvider>().appThemeMode;
    final isDark = brightness == Brightness.dark;

    final gradientColors = AppGradients.getGradientColors(mode);
    final startColor = gradientColors[0];
    final endColor = gradientColors[1];

    final inputTextStyle = TextStyle(
      fontWeight: FontWeight.bold,
      color: isDark ? Colors.white : Colors.black,
    );

    return Scaffold(
      extendBodyBehindAppBar: true,
      drawer: const AppDrawer(),
      backgroundColor: Colors.transparent,
      appBar: AppBar(
        title: Text(
          loc.profile,
          style: TextStyle(
            color: isDark ? Colors.white : Colors.black,
            fontWeight: FontWeight.bold,
          ),
        ),
        backgroundColor: Colors.transparent,
        elevation: 0,
        centerTitle: true,
        leading: const SizedBox(), // removed back button
      ),
      body: Stack(
        children: [
          Positioned.fill(
            child: Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: [
                    startColor.withOpacity(0.85),
                    endColor.withOpacity(0.85),
                  ],
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                ),
              ),
            ),
          ),
          if (isDark) Container(color: Colors.black.withOpacity(0.6)),
          SafeArea(
            child: Form(
              key: _formKey,
              child: ListView(
                padding: const EdgeInsets.all(24),
                children: [
                  const SizedBox(height: 24),
                  _buildProfileHeader(isDark),
                  const SizedBox(height: 32),
                  _isEditing
                      ? _buildEditForm(inputTextStyle)
                      : _buildProfileDetails(isDark),
                  const SizedBox(height: 24),
                  _buildEditButton(isDark, loc),
                  const SizedBox(height: 120),
                ],
              ),
            ),
          ),
        ],
      ),
      floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,
      floatingActionButton: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 20),
        child: Row(
          children: [
            Expanded(
              child: Container(
                decoration: context.read<ThemeProvider>().glassDecoration(
                    borderRadius: BorderRadius.circular(16)),
                child: FloatingActionButton.extended(
                  heroTag: 'home',
                  onPressed: () => context.go('/home'),
                  icon: Icon(Icons.arrow_back,
                      color: isDark ? Colors.white : Colors.black),
                  label: Text(loc.home,
                      style: TextStyle(
                          color: isDark ? Colors.white : Colors.black)),
                  backgroundColor: Colors.transparent,
                  elevation: 0,
                ),
              ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: Container(
                decoration: context.read<ThemeProvider>().glassDecoration(
                    borderRadius: BorderRadius.circular(16)),
                child: FloatingActionButton.extended(
                  heroTag: 'logout',
                  onPressed: () async {
                    await FirebaseAuth.instance.signOut();
                    context.go('/login');
                  },
                  icon: Icon(Icons.logout,
                      color: isDark ? Colors.white : Colors.black),
                  label: Text(loc.logout,
                      style: TextStyle(
                          color: isDark ? Colors.white : Colors.black)),
                  backgroundColor: Colors.transparent,
                  elevation: 0,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildProfileHeader(bool isDark) {
    return ClipRRect(
      borderRadius: BorderRadius.circular(20),
      child: BackdropFilter(
        filter: ImageFilter.blur(sigmaX: 12, sigmaY: 12),
        child: Container(
          padding: const EdgeInsets.all(20),
          decoration: BoxDecoration(
            color: Colors.white.withOpacity(0.08),
            borderRadius: BorderRadius.circular(20),
          ),
          child: Column(
            children: [
              GestureDetector(
                onTap: _isEditing ? _pickImage : null,
                child: CircleAvatar(
                  radius: 48,
                  backgroundColor: Colors.white.withOpacity(0.2),
                  backgroundImage: _getProfileImage(),
                  child: _imagePath == null
                      ? Icon(Icons.person,
                          size: 48,
                          color: isDark ? Colors.white70 : Colors.black54)
                      : null,
                ),
              ),
              const SizedBox(height: 16),
              _isEditing
                  ? TextFormField(
                      controller: _nameController,
                      style: TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                          color: isDark ? Colors.white : Colors.black),
                      textAlign: TextAlign.center,
                      decoration: const InputDecoration(
                        border: InputBorder.none,
                        contentPadding: EdgeInsets.zero,
                      ),
                    )
                  : Text(_nameController.text,
                      style: TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                          color: isDark ? Colors.white : Colors.black)),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildProfileDetails(bool isDark) {
    return Column(
      children: [
        _buildDetailRow('Email', _emailController.text, isDark),
        _buildDetailRow('Phone', _phoneController.text, isDark),
        _buildDetailRow('Role', _roleController.text, isDark),
        _buildDetailRow('Department', _departmentController.text, isDark),
      ],
    );
  }

  Widget _buildEditForm(TextStyle textStyle) {
    return Column(
      children: [
        _buildEditableField('Email', _emailController, validateEmail, textStyle),
        _buildEditableField('Phone', _phoneController, null, textStyle),
        _buildEditableField('Role', _roleController, null, textStyle),
        _buildEditableField('Department', _departmentController, null, textStyle),
      ],
    );
  }

  Widget _buildEditButton(bool isDark, AppLocalizations loc) {
    return ElevatedButton.icon(
      icon: _isSaving
          ? const SizedBox(
              width: 24, height: 24, child: CircularProgressIndicator(strokeWidth: 3))
          : Icon(_isEditing ? Icons.save : Icons.edit,
              color: isDark ? Colors.white : Colors.black),
      label: Text(
        _isEditing ? loc.save : loc.editProfile,
        style: TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.bold,
            color: isDark ? Colors.white : Colors.black),
      ),
      onPressed: _isSaving ? null : _toggleEdit,
      style: ElevatedButton.styleFrom(
        backgroundColor:
            isDark ? Colors.white.withOpacity(0.1) : Colors.black.withOpacity(0.05),
        padding: const EdgeInsets.symmetric(vertical: 16),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(12),
          side: BorderSide(color: isDark ? Colors.white24 : Colors.black12),
        ),
      ),
    );
  }

  Widget _buildDetailRow(String label, String value, bool isDark) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: Row(
        children: [
          Icon(Icons.circle, size: 8, color: isDark ? Colors.white54 : Colors.black54),
          const SizedBox(width: 8),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(label,
                    style: TextStyle(
                        color: isDark ? Colors.white : Colors.black,
                        fontWeight: FontWeight.bold)),
                const SizedBox(height: 2),
                Text(value,
                    style: TextStyle(
                        color: isDark ? Colors.white70 : Colors.black54)),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildEditableField(String label, TextEditingController controller,
      String? Function(String?)? validator, TextStyle textStyle) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: TextFormField(
        controller: controller,
        style: textStyle,
        decoration: InputDecoration(
          labelText: label,
          labelStyle: textStyle.copyWith(fontWeight: FontWeight.normal),
          enabledBorder: UnderlineInputBorder(
            borderSide: BorderSide(color: textStyle.color!.withOpacity(0.5)),
          ),
        ),
        validator: validator,
      ),
    );
  }

  ImageProvider? _getProfileImage() {
    if (_imagePath != null) {
      final file = File(_imagePath!);
      if (file.existsSync()) return FileImage(file);
    }
    final photoURL = FirebaseAuth.instance.currentUser?.photoURL;
    if (photoURL != null && photoURL.isNotEmpty) {
      return NetworkImage(photoURL);
    }
    return null;
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/profile/auth_service.dart ===

import 'package:firebase_auth/firebase_auth.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:google_sign_in/google_sign_in.dart';

class AuthService {
  static final AuthService _instance = AuthService._internal();
  factory AuthService() => _instance;
  AuthService._internal();

  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  User? get currentUser => _auth.currentUser;
  bool get isLoggedIn => _auth.currentUser != null;

  static const _prefsKeys = {
    'name': 'user_name',
    'email': 'user_email',
    'phone': 'user_phone',
    'role': 'user_role',
    'department': 'user_department',
    'image': 'user_image',
    'isLoggedIn': 'isLoggedIn',
  };

  Future<void> init() async {
    final prefs = await SharedPreferences.getInstance();
    final logged = prefs.getBool(_prefsKeys['isLoggedIn']!) ?? false;
    if (!logged || _auth.currentUser == null) {
      await logout(); // ensure clean state
    }
  }

  Future<String?> signUp(String name, String email, String password) async {
    try {
      final userCredential = await _auth.createUserWithEmailAndPassword(
        email: email.trim(),
        password: password,
      );
      final uid = userCredential.user!.uid;

      await _firestore.collection('users').doc(uid).set({
        'name': name,
        'email': email,
        'phone': '',
        'role': '',
        'department': '',
        'image': '',
      });

      await _cacheProfile(name: name, email: email);
      return null;
    } on FirebaseAuthException catch (e) {
      return e.message;
    }
  }

  Future<String?> login(String email, String password) async {
    try {
      final userCredential = await _auth.signInWithEmailAndPassword(
        email: email.trim(),
        password: password,
      );

      final uid = userCredential.user!.uid;
      final doc = await _firestore.collection('users').doc(uid).get();
      if (doc.exists) {
        await _cacheProfileMap(doc.data() ?? {});
      }
      return null;
    } on FirebaseAuthException catch (e) {
      return e.message;
    }
  }

  Future<String?> signInWithGoogle() async {
    try {
      final googleUser = await GoogleSignIn().signIn();
      if (googleUser == null) return 'Google sign-in cancelled.';

      final googleAuth = await googleUser.authentication;
      final credential = GoogleAuthProvider.credential(
        accessToken: googleAuth.accessToken,
        idToken: googleAuth.idToken,
      );

      final userCredential = await _auth.signInWithCredential(credential);
      final user = userCredential.user!;

      final doc = await _firestore.collection('users').doc(user.uid).get();
      if (!doc.exists) {
        await _firestore.collection('users').doc(user.uid).set({
          'name': user.displayName ?? 'User',
          'email': user.email ?? '',
          'phone': '',
          'role': '',
          'department': '',
          'image': user.photoURL ?? '',
        });
      }

      await _cacheProfile(
        name: user.displayName ?? 'User',
        email: user.email ?? '',
        imagePath: user.photoURL ?? '',
      );

      return null;
    } catch (e) {
      return 'Google Sign-in error: ${e.toString()}';
    }
  }

  Future<void> logout() async {
    await _auth.signOut();
    await GoogleSignIn().signOut();
    final prefs = await SharedPreferences.getInstance();
    await prefs.clear();
  }

  Future<Map<String, String>> getProfile() async {
    final prefs = await SharedPreferences.getInstance();
    return {
      'name': prefs.getString(_prefsKeys['name']!) ?? '',
      'email': prefs.getString(_prefsKeys['email']!) ?? '',
      'phone': prefs.getString(_prefsKeys['phone']!) ?? '',
      'role': prefs.getString(_prefsKeys['role']!) ?? '',
      'department': prefs.getString(_prefsKeys['department']!) ?? '',
      'image': prefs.getString(_prefsKeys['image']!) ?? '',
    };
  }

  Future<void> updateProfile({
    required String name,
    required String email,
    String phone = '',
    String role = '',
    String department = '',
    String imagePath = '',
  }) async {
    final uid = _auth.currentUser?.uid;
    if (uid != null) {
      await _firestore.collection('users').doc(uid).update({
        'name': name,
        'email': email,
        'phone': phone,
        'role': role,
        'department': department,
        'image': imagePath,
      });
    }

    await _cacheProfile(
      name: name,
      email: email,
      phone: phone,
      role: role,
      department: department,
      imagePath: imagePath,
    );
  }

  Future<void> _cacheProfile({
    required String name,
    required String email,
    String phone = '',
    String role = '',
    String department = '',
    String imagePath = '',
  }) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_prefsKeys['name']!, name);
    await prefs.setString(_prefsKeys['email']!, email);
    await prefs.setString(_prefsKeys['phone']!, phone);
    await prefs.setString(_prefsKeys['role']!, role);
    await prefs.setString(_prefsKeys['department']!, department);
    await prefs.setString(_prefsKeys['image']!, imagePath);
    await prefs.setBool(_prefsKeys['isLoggedIn']!, true);
  }

  Future<void> _cacheProfileMap(Map<String, dynamic> data) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_prefsKeys['name']!, data['name'] ?? '');
    await prefs.setString(_prefsKeys['email']!, data['email'] ?? '');
    await prefs.setString(_prefsKeys['phone']!, data['phone'] ?? '');
    await prefs.setString(_prefsKeys['role']!, data['role'] ?? '');
    await prefs.setString(_prefsKeys['department']!, data['department'] ?? '');
    await prefs.setString(_prefsKeys['image']!, data['image'] ?? '');
    await prefs.setBool(_prefsKeys['isLoggedIn']!, true);
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/profile/login_screen.dart ===

// lib/features/auth/login_screen.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';

import '../../../core/theme_provider.dart';
import '../../../features/profile/auth_service.dart';
import '/l10n/app_localizations.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final TextEditingController _emailCtl = TextEditingController();
  final TextEditingController _passCtl = TextEditingController();
  String? _error;
  bool _loading = false;

  @override
  void dispose() {
    _emailCtl.dispose();
    _passCtl.dispose();
    super.dispose();
  }

  Future<void> _login() async {
    setState(() => _loading = true);
    final msg = await AuthService().login(
      _emailCtl.text.trim(),
      _passCtl.text.trim(),
    );
    setState(() => _loading = false);
    if (msg != null) {
      setState(() => _error = msg);
    } else {
      if (!mounted) return;
      context.go('/home');
    }
  }

  Future<void> _loginWithGoogle() async {
    setState(() => _loading = true);
    final result = await AuthService().signInWithGoogle();
    setState(() => _loading = false);
    if (!mounted) return;
    if (result != null) {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(result)));
    } else {
      context.go('/home');
    }
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final mode = context.watch<ThemeProvider>().appThemeMode;
    final textColor = Theme.of(context).textTheme.bodyLarge?.color ?? Colors.white;

    return Scaffold(
      extendBodyBehindAppBar: true,
      backgroundColor: Colors.transparent,
      body: Stack(
        fit: StackFit.expand,
        children: [
          _buildBackground(mode),
          Container(color: _glassTint(mode)),
          SafeArea(
            child: SingleChildScrollView(
              padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 80),
              child: ClipRRect(
                borderRadius: BorderRadius.circular(24),
                child: BackdropFilter(
                  filter: ImageFilter.blur(sigmaX: 16, sigmaY: 16),
                  child: Container(
                    padding: const EdgeInsets.all(24),
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(24),
                      border: Border.all(color: Colors.white30, width: 1),
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.stretch,
                      children: [
                        Text(
                          loc.login,
                          textAlign: TextAlign.center,
                          style: TextStyle(
                              fontSize: 28,
                              fontWeight: FontWeight.bold,
                              color: textColor),
                        ),
                        const SizedBox(height: 24),

                        if (_error != null) ...[
                          Text(
                            _mapError(loc, _error!),
                            style: const TextStyle(color: Colors.redAccent),
                            textAlign: TextAlign.center,
                          ),
                          const SizedBox(height: 16),
                        ],

                        _glassField(
                          loc.email,
                          controller: _emailCtl,
                          textColor: textColor,
                        ),
                        const SizedBox(height: 12),
                        _glassField(
                          loc.password,
                          controller: _passCtl,
                          obscure: true,
                          textColor: textColor,
                        ),
                        const SizedBox(height: 24),

                        ElevatedButton(
                          onPressed: _loading ? null : _login,
                          style: ElevatedButton.styleFrom(
                            minimumSize: const Size.fromHeight(50),
                            backgroundColor: Colors.white.withOpacity(0.2),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                          ),
                          child: _loading
                              ? const CircularProgressIndicator(color: Colors.white)
                              : Text(
                                  loc.login,
                                  style: TextStyle(
                                    color: textColor,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                        ),
                        const SizedBox(height: 12),

                        ElevatedButton.icon(
                          icon: Image.asset('assets/google_logo.png', height: 24),
                          label: Text(
                            loc.continueWithGoogle,
                            style: TextStyle(color: textColor),
                          ),
                          onPressed: _loading ? null : _loginWithGoogle,
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.white.withOpacity(0.2),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                            minimumSize: const Size.fromHeight(50),
                          ),
                        ),
                        const SizedBox(height: 12),

                        TextButton(
                          onPressed: () => context.go('/signup'),
                          child: Text(
                            loc.createAccount,
                            style: TextStyle(color: textColor),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  String _mapError(AppLocalizations loc, String msg) {
    switch (msg) {
      case 'Invalid email or password.':
        return loc.invalidCredentials;
      case 'No account found. Please sign up first.':
        return loc.noAccountFound;
      case 'Account already exists. Please log in.':
        return loc.accountExists;
      default:
        return msg;
    }
  }

  Widget _buildBackground(AppThemeMode mode) {
    switch (mode) {
      case AppThemeMode.dark:
        return Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [Color(0xFF1C1F22), Color(0xFF121417)],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
          ),
        );
      case AppThemeMode.light:
        return Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [Color(0xFFB0B0B0), Color(0xFFD0D0D0)],
              begin: Alignment.topCenter,
              end: Alignment.bottomCenter,
            ),
            boxShadow: [
              BoxShadow(color: Colors.white70, offset: Offset(-4, -4), blurRadius: 6),
              BoxShadow(color: Colors.black26, offset: Offset(4, 4), blurRadius: 6),
            ],
          ),
        );
      case AppThemeMode.bangladesh:
      default:
        return Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [Color(0xFF8FA49D), Color(0xFF6E7B75)],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
            boxShadow: [
              BoxShadow(color: Colors.black38, offset: Offset(2, 2), blurRadius: 8),
            ],
          ),
        );
    }
  }

  Color _glassTint(AppThemeMode mode) {
    switch (mode) {
      case AppThemeMode.dark:
        return const Color(0xFF1C1F26).withOpacity(0.1);
      case AppThemeMode.light:
        return Colors.white.withOpacity(0.1);
      case AppThemeMode.bangladesh:
      default:
        return const Color(0xFF6E7B75).withOpacity(0.15);
    }
  }

  Widget _glassField(
    String label, {
    required TextEditingController controller,
    bool obscure = false,
    required Color textColor,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.2),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.white.withOpacity(0.5)),
      ),
      child: TextField(
        controller: controller,
        obscureText: obscure,
        style: TextStyle(color: textColor),
        decoration: InputDecoration(
          labelText: label,
          labelStyle: TextStyle(color: textColor.withOpacity(0.7)),
          border: InputBorder.none,
          contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 14),
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/profile/forgot_password_screen.dart ===

import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '/l10n/app_localizations.dart';

class ForgotPasswordScreen extends StatefulWidget {
  const ForgotPasswordScreen({super.key});

  @override
  State<ForgotPasswordScreen> createState() => _ForgotPasswordScreenState();
}

class _ForgotPasswordScreenState extends State<ForgotPasswordScreen> {
  final TextEditingController emailController = TextEditingController();
  String? message;

  Future<void> _resetPassword() async {
    final loc = AppLocalizations.of(context)!;
    try {
      await FirebaseAuth.instance
          .sendPasswordResetEmail(email: emailController.text.trim());
      setState(() => message = loc.resetEmailSent);
    } on FirebaseAuthException catch (e) {
      setState(() => message = e.message);
    }
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;

    return Scaffold(
      appBar: AppBar(
        title: Text(loc.forgotPassword),
        centerTitle: true,
      ),
      body: Padding(
        padding: const EdgeInsets.all(24),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Text(loc.enterEmailReset),
            const SizedBox(height: 12),
            TextField(
              controller: emailController,
              keyboardType: TextInputType.emailAddress,
              decoration: InputDecoration(
                labelText: loc.email,
                border: const OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: _resetPassword,
              child: Text(loc.sendResetLink),
            ),
            if (message != null) ...[
              const SizedBox(height: 20),
              Text(
                message!,
                style: TextStyle(
                  color: message!.contains('sent') ? Colors.green : Colors.red,
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/profile/animated_background.dart ===

// lib/features/profile/animated_background.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../../core/theme_provider.dart'; // Fixed relative path
import '../../../core/theme.dart'; // for AppGradients

class AnimatedBackground extends StatelessWidget {
  const AnimatedBackground({super.key});

  @override
  Widget build(BuildContext context) {
    final mode = Provider.of<ThemeProvider>(context).appThemeMode;

    return Stack(
      fit: StackFit.expand,
      children: [
        _buildMetallicBase(mode),
        if (mode == AppThemeMode.dark || mode == AppThemeMode.bangladesh)
          Positioned.fill(child: _buildGlossOverlay(mode)),
        Container(color: _glassTint(mode)),
      ],
    );
  }

  Widget _buildMetallicBase(AppThemeMode mode) {
  final gradientColors = AppGradients.getGradientColors(mode);
  return Container(
    decoration: BoxDecoration(
      gradient: LinearGradient(
        colors: [
          gradientColors[0].withOpacity(0.9),
          gradientColors[1].withOpacity(0.9),
        ],
        begin: Alignment.topLeft,
        end: Alignment.bottomRight,
      ),
    ),
  );
}
  Widget _buildGlossOverlay(AppThemeMode mode) {
    final center = mode == AppThemeMode.dark
        ? const Alignment(-0.5, -0.5)
        : const Alignment(0.6, -0.6);
    final radius = mode == AppThemeMode.dark ? 1.5 : 1.4;
    final opacity = mode == AppThemeMode.dark ? 0.05 : 0.15;

    return DecoratedBox(
      position: DecorationPosition.foreground,
      decoration: BoxDecoration(
        gradient: RadialGradient(
          center: center,
          radius: radius,
          colors: [
            Colors.white.withOpacity(opacity),
            Colors.transparent,
          ],
          stops: const [0.0, 0.7],
        ),
      ),
    );
  }

  Color _glassTint(AppThemeMode mode) {
    switch (mode) {
      case AppThemeMode.dark:
        return const Color(0xFF1C1F26).withOpacity(0.1);
      case AppThemeMode.light:
        return Colors.white.withOpacity(0.1);
      case AppThemeMode.bangladesh:
      default:
        return const Color(0xFF6E7B75).withOpacity(0.15);
    }
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/news/newspaper_screen.dart ===

// lib/features/news/newspaper_screen.dart

import 'dart:convert';
import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:provider/provider.dart';
import 'package:go_router/go_router.dart';
import 'package:fluttertoast/fluttertoast.dart';

import '/core/theme_provider.dart';
import '/core/theme.dart';
import '/core/utils/favorites_manager.dart';
import '/l10n/app_localizations.dart';
import '/widgets/app_drawer.dart';
import '/features/common/appBar.dart';
import 'widgets/news_card.dart';

class NewspaperScreen extends StatefulWidget {
  const NewspaperScreen({Key? key}) : super(key: key);

  @override
  State<NewspaperScreen> createState() => _NewspaperScreenState();
}

class _NewspaperScreenState extends State<NewspaperScreen>
    with SingleTickerProviderStateMixin {
  final List<dynamic> _papers = [];
  bool _isLoading = true;

  TabController? _tabController;
  late final ScrollController _scrollController;
  late final ScrollController _chipsController;
  List<GlobalKey> _chipKeys = [];

  String _langFilter = 'All';
  final FavoritesManager _favorites = FavoritesManager.instance;
  DateTime? _lastBackPressed;
  bool _didInit = false;

  static const Color _gold = Color(0xFFFFD700);

  @override
  void initState() {
    super.initState();
    _scrollController = ScrollController();
    _chipsController = ScrollController();
    _favorites.loadFavorites();
    _loadPapers();
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    if (_tabController == null) {
      final cats = _categories;
      _tabController = TabController(length: cats.length, vsync: this)
        ..addListener(() {
          setState(() => _langFilter = 'All');
          _scrollController.jumpTo(0);
          _centerChip(_tabController!.index);
        });
      _chipKeys = List.generate(cats.length, (_) => GlobalKey());
    }
    if (!_didInit) {
      _didInit = true;
      WidgetsBinding.instance.addPostFrameCallback((_) {
        // ensure first chip is centered on first build
        if (mounted) _centerChip(0);
      });
    }
  }

  Future<void> _loadPapers() async {
    setState(() => _isLoading = true);
    try {
      final raw = await rootBundle.loadString('assets/data.json');
      final data = jsonDecode(raw) as Map<String, dynamic>;
      setState(() {
        _papers
          ..clear()
          ..addAll(data['newspapers'] as List<dynamic>);
        _isLoading = false;
      });
    } catch (e) {
      setState(() => _isLoading = false);
      final loc = AppLocalizations.of(context)!;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(loc.loadError.replaceFirst('{message}', '$e'))),
      );
    }
  }

  List<String> get _categories {
    final loc = AppLocalizations.of(context)!;
    return [
      loc.national,
      loc.international,
      loc.businessFinance,
      loc.digitalTech,
      loc.sportsNews,
      loc.entertainmentArts,
      loc.worldPolitics,
      loc.blog,
    ];
  }

  List<dynamic> get _filteredPapers {
    final loc = AppLocalizations.of(context)!;
    final selCat = _categories[_tabController!.index];
    final mapping = {
      loc.businessFinance: 'business',
      loc.digitalTech: 'tech',
      loc.sportsNews: 'sports',
      loc.entertainmentArts: 'entertainment',
      loc.worldPolitics: 'defense',
      loc.blog: 'blog',
      loc.national: 'national',
      loc.international: 'international',
    };

    if (selCat == loc.favorites) {
      final favIds = _favorites.favoriteNewspapers
          .map((n) => n['id'].toString())
          .toSet();
      return _papers.where((p) => favIds.contains(p['id'].toString())).toList();
    }

    return _papers.where((p) {
      final region = (p['region'] ?? '').toString().toLowerCase();
      final key = mapping[selCat];
      if (selCat == loc.national || selCat == loc.international) {
        if (region != key) return false;
        if (_langFilter == 'All') return true;
        final lang = (p['language'] ?? '').toString().toLowerCase();
        return (_langFilter == loc.bangla && lang == 'bn') ||
               (_langFilter == loc.english && lang == 'en');
      }
      return key != null && region == key;
    }).toList();
  }

  Future<bool> _onWillPop() async {
    final now = DateTime.now();
    if (context.canPop()) {
      context.pop();
      return false;
    }
    if (_lastBackPressed == null ||
        now.difference(_lastBackPressed!) > const Duration(seconds: 2)) {
      _lastBackPressed = now;
      Fluttertoast.showToast(msg: "Press back again to exit");
      return false;
    }
    return true;
  }

  void _centerChip(int index) {
    final key = _chipKeys[index];
    if (key.currentContext != null) {
      Scrollable.ensureVisible(
        key.currentContext!,
        duration: const Duration(milliseconds: 200),
        alignment: 0.5,
      );
    }
  }

  Widget _buildLanguageFilter(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final prov = context.watch<ThemeProvider>();
    final theme = Theme.of(context);
    final baseColor = prov.glassColor;
    final borderColor = prov.borderColor.withOpacity(0.3);

    Widget buildChip(String label) {
      final selected = _langFilter == label;
      return InkWell(
        borderRadius: BorderRadius.circular(30),
        onTap: () => setState(() => _langFilter = label),
        child: AnimatedContainer(
          duration: const Duration(milliseconds: 250),
          padding: const EdgeInsets.symmetric(horizontal: 18, vertical: 10),
          decoration: BoxDecoration(
            color: selected ? _gold.withOpacity(0.2) : baseColor.withOpacity(0.05),
            borderRadius: BorderRadius.circular(30),
            border: Border.all(
              color: selected ? _gold : borderColor,
              width: 1.2,
            ),
          ),
          child: Text(
            label,
            style: theme.textTheme.labelLarge?.copyWith(
              fontWeight: FontWeight.w600,
              color: selected
                  ? _gold
                  : theme.textTheme.bodyMedium?.color?.withOpacity(0.85),
            ),
          ),
        ),
      );
    }

    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        buildChip(loc.bangla),
        const SizedBox(width: 12),
        buildChip(loc.english),
      ],
    );
  }

  @override
  void dispose() {
    _tabController?.dispose();
    _scrollController.dispose();
    _chipsController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final prov = context.watch<ThemeProvider>();
    final mode = prov.appThemeMode;
    final colors = AppGradients.getGradientColors(mode);
    final start = colors[0], end = colors[1];
    final theme = Theme.of(context);

    return WillPopScope(
      onWillPop: _onWillPop,
      child: Scaffold(
        extendBodyBehindAppBar: true,
        backgroundColor: Colors.transparent,
        drawer: const AppDrawer(),
        body: Stack(
          fit: StackFit.expand,
          children: [
            // background gradient
            Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                  colors: [
                    start.withOpacity(0.9),
                    end.withOpacity(0.9),
                  ],
                ),
              ),
            ),

            CustomScrollView(
              slivers: [
                // AppBar
                SliverAppBar(
                  pinned: true,
                  backgroundColor: Colors.transparent,
                  elevation: 0,
                  centerTitle: true,
                  title: AppBarTitle(loc.newspapers),
                  flexibleSpace: ClipRect(
                    child: BackdropFilter(
                      filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20),
                      child: Container(
                        decoration: BoxDecoration(
                          gradient: LinearGradient(
                            begin: Alignment.topLeft,
                            end: Alignment.bottomRight,
                            colors: [
                              start.withOpacity(0.8),
                              end.withOpacity(0.85),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ),
                ),

                // Category chips
                SliverToBoxAdapter(
                  child: SizedBox(
                    height: 48,
                    child: ListView.builder(
                      controller: _chipsController,
                      scrollDirection: Axis.horizontal,
                      padding: const EdgeInsets.symmetric(horizontal: 12),
                      itemCount: _categories.length,
                      itemBuilder: (ctx, i) {
                        final selected = i == _tabController!.index;
                        return Padding(
                          key: _chipKeys[i],
                          padding: const EdgeInsets.symmetric(horizontal: 6),
                          child: ChoiceChip(
                            label: Text(_categories[i]),
                            selected: selected,
                            onSelected: (_) {
                              _tabController!.animateTo(i);
                              _centerChip(i);
                            },
                            backgroundColor: prov.glassColor.withOpacity(0.05),
                            selectedColor: _gold,
                            labelStyle: TextStyle(
                              color: selected
                                  ? Colors.black
                                  : theme.textTheme.bodyMedium?.color,
                              fontWeight: selected ? FontWeight.bold : FontWeight.w600,
                            ),
                          ),
                        );
                      },
                    ),
                  ),
                ),

                // Language filter when needed
                if (_categories[_tabController!.index] == loc.national ||
                    _categories[_tabController!.index] == loc.international)
                  SliverToBoxAdapter(
                    child: Padding(
                      padding: const EdgeInsets.symmetric(vertical: 8),
                      child: Center(child: _buildLanguageFilter(context)),
                    ),
                  ),

                // Newspaper list
                SliverFillRemaining(
                  child: _isLoading
                      ? Center(
                          child: CircularProgressIndicator(
                            valueColor:
                                AlwaysStoppedAnimation(theme.colorScheme.primary),
                          ),
                        )
                      : _filteredPapers.isEmpty
                          ? Center(
                              child: Text(
                                loc.noPapersFound,
                                style: theme.textTheme.bodyLarge,
                              ),
                            )
                          : RefreshIndicator(
                              color: theme.colorScheme.primary,
                              onRefresh: _loadPapers,
                              child: ListView.builder(
                                controller: _scrollController,
                                padding: const EdgeInsets.all(16),
                                itemCount: _filteredPapers.length,
                                itemBuilder: (_, idx) {
                                  final paper = _filteredPapers[idx];
                                  final id = paper['id'].toString();
                                  final isFav = _favorites.isFavoriteNewspaper(id);

                                  return AnimatedContainer(
                                    duration: const Duration(milliseconds: 400),
                                    curve: Curves.easeInOut,
                                    margin: const EdgeInsets.only(bottom: 12),
                                    decoration: BoxDecoration(
                                      borderRadius: BorderRadius.circular(20),
                                      color: theme.cardColor.withOpacity(0.03),
                                      border: Border.all(
                                        color:
                                            theme.colorScheme.outline.withOpacity(0.15),
                                        width: 1.2,
                                      ),
                                      boxShadow: isFav
                                          ? [
                                              BoxShadow(
                                                color: theme.colorScheme.primary
                                                    .withOpacity(0.25),
                                                blurRadius: 14,
                                                spreadRadius: 1,
                                                offset: const Offset(0, 6),
                                              ),
                                            ]
                                          : [],
                                    ),
                                    child: NewsCard(
                                      news: paper,
                                      isFavorite: isFav,
                                      onFavoriteToggle: () {
                                        _favorites.toggleNewspaper(paper);
                                        setState(() {});
                                      },
                                      searchQuery: '',
                                    ),
                                  );
                                },
                              ),
                            ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/news/widgets/news_card.dart ===

// lib/features/news/widgets/news_card.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';
import 'package:share_plus/share_plus.dart';
import '../../../core/theme_provider.dart';
import '../../../core/theme.dart';

class NewsCard extends StatefulWidget {
  final Map<String, dynamic> news;
  final bool isFavorite;
  final VoidCallback onFavoriteToggle;
  final bool highlight;
  final String searchQuery;

  const NewsCard({
    super.key,
    required this.news,
    required this.isFavorite,
    required this.onFavoriteToggle,
    this.highlight = true,
    required this.searchQuery,
  });

  @override
  State<NewsCard> createState() => _NewsCardState();
}

class _NewsCardState extends State<NewsCard> with SingleTickerProviderStateMixin {
  bool _isPressed = false;

  void _open(BuildContext context) {
    final maybeWebsite = widget.news['contact']?['website'];
    final maybeUrl = widget.news['url'] ?? widget.news['link'];
    final url = (maybeWebsite is String && maybeWebsite.isNotEmpty)
        ? maybeWebsite
        : (maybeUrl is String ? maybeUrl : '');

    final title = widget.news['name'] ?? 'News';

    if (url.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('No URL available')),
      );
      return;
    }

    context.push('/webview', extra: {'url': url, 'title': title});
  }

  String? _getLocalLogoPath() {
    final id = widget.news['id']?.toString();
    return id != null ? 'assets/logos/$id.png' : null;
  }

  void _share() {
    final title = widget.news['name'] ?? 'Newspaper';
    final url = widget.news['url'] ?? widget.news['link'] ?? '';
    if (url is String && url.isNotEmpty) {
      Share.share('$title\n$url');
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final scheme = theme.colorScheme;
    final mode = context.watch<ThemeProvider>().appThemeMode;
    final localLogoPath = _getLocalLogoPath();

    final isDark = mode == AppThemeMode.dark;
    final isDesh = mode.toString().toLowerCase().contains("desh");
    final fallbackText = (widget.news['name']?.toString().substring(0, 2).toUpperCase() ?? "NP");

    return GestureDetector(
      onTapDown: (_) => setState(() => _isPressed = true),
      onTapUp: (_) => setState(() => _isPressed = false),
      onTapCancel: () => setState(() => _isPressed = false),
      onTap: () => _open(context),
      child: AnimatedScale(
        scale: _isPressed ? 0.97 : 1.0,
        duration: const Duration(milliseconds: 150),
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 10),
          child: AspectRatio(
            aspectRatio: 3 / 1,
            child: Container(
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(24),
                color: isDark ? Colors.white.withOpacity(0.06) : Colors.white.withOpacity(0.02),
                border: Border.all(
                  color: Colors.white.withOpacity(0.08),
                  width: 1.2,
                ),
              ),
              child: ClipRRect(
                borderRadius: BorderRadius.circular(24),
                child: Stack(
                  fit: StackFit.expand,
                  children: [
                    BackdropFilter(
                      filter: ImageFilter.blur(sigmaX: 30, sigmaY: 30),
                      child: Container(
                        decoration: BoxDecoration(
                          gradient: LinearGradient(
                            begin: Alignment.topLeft,
                            end: Alignment.bottomRight,
                            colors: [
                              Colors.white.withOpacity(0.08),
                              Colors.white.withOpacity(0.02),
                            ],
                          ),
                        ),
                      ),
                    ),
                    if (isDark || isDesh)
                      Container(
                        decoration: const BoxDecoration(
                          gradient: LinearGradient(
                            begin: Alignment.topCenter,
                            end: Alignment.bottomCenter,
                            colors: [
                              Colors.white30,
                              Colors.transparent,
                            ],
                          ),
                        ),
                      ),
                    Center(
                      child: Padding(
                        padding: const EdgeInsets.all(20.0),
                        child: Container(
                          decoration: BoxDecoration(
                            shape: BoxShape.circle,
                            gradient: RadialGradient(
                              center: Alignment.center,
                              radius: 0.5,
                              colors: [
                                Colors.white.withOpacity(isDark ? 0.25 : 0.1),
                                Colors.transparent,
                              ],
                            ),
                            boxShadow: widget.highlight && (isDark || isDesh)
                                ? [
                                    BoxShadow(
                                      color: Colors.white.withOpacity(0.15),
                                      blurRadius: 24,
                                      spreadRadius: 1,
                                      offset: const Offset(0, 4),
                                    ),
                                  ]
                                : [],
                          ),
                          padding: const EdgeInsets.all(8),
                          child: localLogoPath != null
                              ? ClipRRect(
                                  borderRadius: BorderRadius.circular(16),
                                  child: Image.asset(
                                    localLogoPath,
                                    fit: BoxFit.contain,
                                    errorBuilder: (_, __, ___) => _fallbackAvatar(fallbackText),
                                  ),
                                )
                              : _fallbackAvatar(fallbackText),
                        ),
                      ),
                    ),
                   // ‚úÖ With this block:
Positioned(
  bottom: 8,
  left: 8,
  child: Column(
    crossAxisAlignment: CrossAxisAlignment.start,
    children: [
      IconButton(
        icon: Icon(
          widget.isFavorite ? Icons.favorite : Icons.favorite_border,
          color: widget.isFavorite ? Colors.redAccent : theme.iconTheme.color,
          size: 20,
        ),
        onPressed: widget.onFavoriteToggle,
        visualDensity: VisualDensity.compact,
        padding: EdgeInsets.zero,
        constraints: const BoxConstraints(),
      ),
      const SizedBox(height: 4),
      IconButton(
        icon: const Icon(Icons.share, size: 20),
        onPressed: _share,
        visualDensity: VisualDensity.compact,
        padding: EdgeInsets.zero,
        constraints: const BoxConstraints(),
      ),
    ],
  ),
),

                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _fallbackAvatar(String initials) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.grey.shade200.withOpacity(0.4),
        borderRadius: BorderRadius.circular(16),
      ),
      alignment: Alignment.center,
      child: Text(
        initials,
        style: const TextStyle(
          fontSize: 24,
          fontWeight: FontWeight.bold,
          color: Colors.black87,
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/history/history_widget.dart ===

// lib/features/history/history_widget.dart

import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:http/http.dart' as http;
import 'package:intl/intl.dart';
import 'package:share_plus/share_plus.dart';
import '/core/theme_provider.dart';
import '/core/theme.dart';
import 'package:provider/provider.dart';
import 'dart:ui';

class HistoryWidget extends StatefulWidget {
  const HistoryWidget({Key? key}) : super(key: key);

  @override
  State<HistoryWidget> createState() => _HistoryWidgetState();
}

class _HistoryWidgetState extends State<HistoryWidget> {
  bool isLoading = true;
  Map<String, dynamic>? data;
  String? error;
  DateTime currentDate = DateTime.now();

  @override
  void initState() {
    super.initState();
    fetchHistory();
  }

  Future<void> fetchHistory() async {
    setState(() => isLoading = true);
    final url = Uri.parse(
      'https://byabbe.se/on-this-day/${currentDate.month}/${currentDate.day}/events.json'
    );

    try {
      final response = await http.get(url);
      if (response.statusCode == 200) {
        setState(() {
          data = json.decode(response.body);
          isLoading = false;
        });
      } else {
        setState(() {
          error = 'Error ${response.statusCode}: Unable to fetch data';
          isLoading = false;
        });
      }
    } catch (e) {
      setState(() {
        error = 'Exception: $e';
        isLoading = false;
      });
    }
  }

  Widget _modernIconButton({
    required IconData icon,
    required VoidCallback onPressed,
    String? tooltip,
  }) {
    final prov = context.watch<ThemeProvider>();
    return Material(
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      elevation: 4,
      color: prov.glassColor,
      child: IconButton(
        tooltip: tooltip,
        icon: Icon(icon, size: 24, color: Theme.of(context).iconTheme.color),
        onPressed: onPressed,
      ),
    );
  }

  void _goToPreviousDay() {
    setState(() => currentDate = currentDate.subtract(const Duration(days: 1)));
    fetchHistory();
  }

  void _goToNextDay() {
    setState(() => currentDate = currentDate.add(const Duration(days: 1)));
    fetchHistory();
  }

  @override
  Widget build(BuildContext context) {
    final prov = context.watch<ThemeProvider>();
    final theme = Theme.of(context);
    final todayLabel = DateFormat('MMMM d').format(currentDate);

    // pick gradient based on theme mode
    final colors = AppGradients.getGradientColors(prov.appThemeMode);
    final bgGradient = [
      colors[0].withOpacity(0.9),
      colors[1].withOpacity(0.9),
    ];

    final events = (data?['events'] as List<dynamic>? ?? []).toList();
    final textStyle = prov.floatingTextStyle(color: Colors.white);

    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: AppBar(
        automaticallyImplyLeading: false,
        backgroundColor: Colors.transparent,
        elevation: 0,
        centerTitle: true,
        title: Text('History ‚Ä¢ $todayLabel', style: textStyle.copyWith(fontSize: 22)),
        flexibleSpace: ClipRect(
          child: BackdropFilter(
            filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20),
            child: Container(color: prov.glassColor),
          ),
        ),
      ),
      body: isLoading
        ? const Center(child: CircularProgressIndicator())
        : (error != null
          ? Center(child: Text(error!, style: prov.floatingTextStyle(color: theme.colorScheme.error)))
          : Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: bgGradient,
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                ),
              ),
              child: Column(
                children: [
                  const SizedBox(height: 80),
                  // Header
                  Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 24),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Row(
                          children: [
                            Icon(Icons.history, color: theme.iconTheme.color, size: 26),
                            const SizedBox(width: 8),
                            Text('Major Historical Events', style: textStyle.copyWith(fontSize: 24)),
                          ],
                        ),
                        const SizedBox(height: 6),
                        Container(
                          height: 4,
                          width: 160,
                          decoration: BoxDecoration(
                            gradient: LinearGradient(
                              colors: [colors[1], colors[0]],
                            ),
                            borderRadius: const BorderRadius.only(
                              topRight: Radius.circular(4),
                              bottomRight: Radius.circular(4),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(height: 16),
                  // Events list
                  Expanded(
                    child: events.isEmpty
                      ? Center(child: Text('No events found.', style: theme.textTheme.bodyLarge?.copyWith(color: theme.hintColor)))
                      : ListView.builder(
                          padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 8),
                          itemCount: events.length,
                          itemBuilder: (ctx, i) {
                            final ev = events[i];
                            return Container(
                              margin: const EdgeInsets.symmetric(vertical: 8),
                              decoration: BoxDecoration(
                                gradient: LinearGradient(
                                  colors: prov.appThemeMode == AppThemeMode.light
                                    ? [Colors.white.withOpacity(0.3), Colors.white.withOpacity(0.1)]
                                    : [Colors.black54, Colors.black38],
                                  begin: Alignment.topLeft,
                                  end: Alignment.bottomRight,
                                ),
                                borderRadius: BorderRadius.circular(20),
                                border: Border.all(
                                  width: 2,
                                  color: prov.borderColor.withOpacity(0.5),
                                ),
                                boxShadow: [
                                  BoxShadow(
                                    color: Colors.black.withOpacity(0.5),
                                    blurRadius: 12,
                                    offset: const Offset(0, 6),
                                  ),
                                ],
                              ),
                              child: Padding(
                                padding: const EdgeInsets.all(20),
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    // Year & actions
                                    Row(
                                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                      children: [
                                        Row(
                                          children: [
                                            Icon(Icons.calendar_today, color: theme.iconTheme.color, size: 20),
                                            const SizedBox(width: 6),
                                            Text(ev['year'].toString(), style: textStyle.copyWith(fontSize: 20)),
                                          ],
                                        ),
                                        Row(
                                          children: [
                                            _modernIconButton(
                                              icon: Icons.share,
                                              tooltip: 'Share',
                                              onPressed: () => Share.share(
                                                'On this day in ${ev['year']}: ${ev['description']}'
                                              ),
                                            ),
                                            const SizedBox(width: 4),
                                            _modernIconButton(
                                              icon: Icons.copy,
                                              tooltip: 'Copy',
                                              onPressed: () {
                                                Clipboard.setData(ClipboardData(
                                                  text: 'On this day in ${ev['year']}: ${ev['description']}',
                                                ));
                                                ScaffoldMessenger.of(context).showSnackBar(
                                                  const SnackBar(content: Text('Copied to clipboard'))
                                                );
                                              },
                                            ),
                                          ],
                                        ),
                                      ],
                                    ),
                                    const SizedBox(height: 12),
                                    // Separator
                                    Container(
                                      height: 2,
                                      decoration: BoxDecoration(
                                        gradient: LinearGradient(colors: bgGradient),
                                      ),
                                    ),
                                    const SizedBox(height: 12),
                                    // Description
                                    Text(
                                      ev['description'] ?? '',
                                      style: theme.textTheme.bodyLarge?.copyWith(color: theme.textTheme.bodyMedium?.color),
                                    ),
                                  ],
                                ),
                              ),
                            );
                          },
                        ),
                  ),
                ],
              ),
            )
      ),
      bottomNavigationBar: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(colors: bgGradient),
          borderRadius: const BorderRadius.vertical(top: Radius.circular(24)),
          boxShadow: [BoxShadow(color: Colors.black45, blurRadius: 12)],
        ),
        padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 16),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceAround,
          children: [
            IconButton.filled(
              onPressed: _goToPreviousDay,
              icon: const Icon(Icons.navigate_before),
              style: IconButton.styleFrom(
                backgroundColor: prov.glassColor,
                shape: const CircleBorder(),
                elevation: 4,
                shadowColor: Colors.black45,
                padding: const EdgeInsets.all(12),
              ),
            ),
            IconButton.filledTonal(
              onPressed: fetchHistory,
              icon: const Icon(Icons.refresh),
              style: IconButton.styleFrom(
                backgroundColor: prov.glassColor,
                shape: const CircleBorder(),
                elevation: 4,
                shadowColor: Colors.black45,
                padding: const EdgeInsets.all(12),
              ),
            ),
            IconButton.filled(
              onPressed: _goToNextDay,
              icon: const Icon(Icons.navigate_next),
              style: IconButton.styleFrom(
                backgroundColor: prov.glassColor,
                shape: const CircleBorder(),
                elevation: 4,
                shadowColor: Colors.black45,
                padding: const EdgeInsets.all(12),
              ),
            ),
            IconButton.filledTonal(
              onPressed: () => Navigator.pop(context),
              icon: const Icon(Icons.exit_to_app),
              style: IconButton.styleFrom(
                backgroundColor: prov.glassColor,
                shape: const CircleBorder(),
                elevation: 4,
                shadowColor: Colors.black45,
                padding: const EdgeInsets.all(12),
              ),
            ),
          ],
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/movies/movie_widget.dart ===

// File: lib/features/movies/movie_widget.dart

import 'dart:async';
import 'dart:convert';
import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:go_router/go_router.dart';
import 'package:http/http.dart' as https;
import 'package:provider/provider.dart';

import 'movie.dart';
import 'recommendation_service.dart';
import '../../core/theme_provider.dart';
import '../../core/theme.dart';

class MovieWidget extends StatelessWidget {
  final double height;
  const MovieWidget({Key? key, required this.height}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final scheme = theme.colorScheme;
    return Center(
      child: ElevatedButton.icon(
        icon: Icon(Icons.movie, color: scheme.onPrimary),
        label: Text(
          "Open CineSpot",
          style: theme.textTheme.labelLarge
              ?.copyWith(color: scheme.onPrimary),
        ),
        style: ElevatedButton.styleFrom(
          backgroundColor: scheme.surface.withOpacity(0.6),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
            side: BorderSide(color: scheme.primary, width: 2),
          ),
          shadowColor: scheme.primary.withOpacity(0.7),
          elevation: 8,
        ),
        onPressed: () => Navigator.of(context).push(
          MaterialPageRoute(
            fullscreenDialog: true,
            builder: (_) => const FullScreenMoviePage(),
          ),
        ),
      ),
    );
  }
}

class FullScreenMoviePage extends StatefulWidget {
  const FullScreenMoviePage({Key? key}) : super(key: key);

  @override
  State<FullScreenMoviePage> createState() => _FullScreenMoviePageState();
}

class _FullScreenMoviePageState extends State<FullScreenMoviePage>
    with TickerProviderStateMixin {
  late final TabController _langCtrl, _catCtrl;
  final _langs = ['All', 'English', 'Bangla', 'Hindi', 'Other'];
  final _langCodes = [null, 'en', 'bn', 'hi', 'other'];
  final _cats = ['Trending', 'Upcoming', 'Now Playing'];
  final _apiCats = ['popular', 'upcoming', 'now_playing'];
  final Set<int> _favoriteIds = {};

  @override
  void initState() {
    super.initState();
    _langCtrl = TabController(length: _langs.length, vsync: this);
    _catCtrl = TabController(length: _cats.length, vsync: this);
  }

  @override
  void dispose() {
    _langCtrl.dispose();
    _catCtrl.dispose();
    super.dispose();
  }

  /// Fetches movies from TMDB, with robust error handling.
  Future<List<Movie>> _fetch(String apiCat, String? langCode) async {
    const apiKey = 'e2999b9d149f7847e3c467822ccbc1a7';
    final today = DateTime.now().toIso8601String().split('T')[0];

    final uri = Uri.https('api.themoviedb.org', 
      apiCat == 'popular'
        ? '/3/discover/movie'
        : '/3/movie/$apiCat',
      {
        'api_key': apiKey,
        'language': 'en-US',
        if (langCode != null) 'with_original_language': langCode,
        if (apiCat == 'popular') 'sort_by': 'popularity.desc',
        if (apiCat == 'upcoming') 'primary_release_date.gte': today,
      },
    );

    try {
      // 10s timeout to avoid hanging indefinitely
      final response = await https.get(uri).timeout(const Duration(seconds: 10));
      if (response.statusCode != 200) {
        throw Exception(
            'TMDB error ${response.statusCode}: ${response.reasonPhrase}');
      }

      final decoded = jsonDecode(response.body);
      if (decoded is! Map<String, dynamic>) {
        throw FormatException('Expected JSON object');
      }

      final results = decoded['results'];
      if (results is! List) {
        throw FormatException('Missing "results" list');
      }

      // Build movie list, skipping any invalid entries
      List<Movie> movies = results
          .where((e) => e is Map<String, dynamic>)
          .map<Movie>((e) => Movie.fromJson(e as Map<String, dynamic>))
          .toList();

      // Personalize only the popular category
      if (apiCat == 'popular' && langCode == null) {
        try {
          movies =
              await RecommendationService.instance.personalize(movies);
        } catch (e) {
          // if personalization fails, use unmodified list
          debugPrint('Recommendation error: $e');
        }
      }

      return movies;
    } on TimeoutException catch (e) {
      debugPrint('TMDB request timed out: $e');
      return [];
    } on FormatException catch (e) {
      debugPrint('TMDB JSON format error: $e');
      return [];
    } catch (e) {
      debugPrint('Unknown TMDB error: $e');
      return [];
    }
  }

  Widget _neonButton(IconData icon, VoidCallback onTap, Color color) =>
      Material(
        color: color.withOpacity(0.6),
        shape:
            RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        child: InkWell(
          borderRadius: BorderRadius.circular(12),
          onTap: onTap,
          child: Padding(
            padding: const EdgeInsets.all(8),
            child:
                Icon(icon, color: Theme.of(context).colorScheme.onPrimary),
          ),
        ),
      );

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final scheme = theme.colorScheme;
    final gradientColors = AppGradients.getGradientColors(
        context.read<ThemeProvider>().appThemeMode);

    return Scaffold(
      backgroundColor: Colors.transparent,
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: gradientColors,
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        child: SafeArea(
          child: Column(
            children: [
              const SizedBox(height: 12),
              Text("CineSpot üé¨",
                  style: theme.textTheme.headlineSmall),
              TabBar(
                controller: _langCtrl,
                isScrollable: true,
                indicatorColor: scheme.primary,
                labelColor: scheme.onPrimary,
                unselectedLabelColor: scheme.onSurface,
                tabs: _langs.map((l) => Tab(text: l)).toList(),
              ),
              TabBar(
                controller: _catCtrl,
                indicatorColor: scheme.primary,
                labelColor: scheme.onPrimary,
                unselectedLabelColor: scheme.onSurface,
                tabs: _cats.map((c) => Tab(text: c)).toList(),
              ),
              Expanded(
                child: TabBarView(
                  controller: _langCtrl,
                  children: _langs.map((lang) {
                    return TabBarView(
                      controller: _catCtrl,
                      children: _apiCats.map((cat) {
                        final langIndex = _langs.indexOf(lang);
                        return FutureBuilder<List<Movie>>(
                          future: _fetch(cat, _langCodes[langIndex]),
                          builder: (ctx, snap) {
                            if (snap.connectionState ==
                                ConnectionState.waiting) {
                              return Center(
                                  child: CircularProgressIndicator(
                                      color: scheme.primary));
                            }
                            if (snap.hasError) {
                              return Center(
                                child: Text(
                                  'Error: ${snap.error}',
                                  style: theme.textTheme.bodyMedium
                                      ?.copyWith(color: scheme.error),
                                ),
                              );
                            }
                            final movies = snap.data!;
                            if (movies.isEmpty) {
                              return Center(
                                  child: Text('No movies',
                                      style: theme.textTheme.bodyMedium));
                            }

                            final cols =
                                MediaQuery.of(ctx).size.width > 600 ? 3 : 2;
                            return Padding(
                              padding: const EdgeInsets.all(12),
                              child: GridView.builder(
                                itemCount: movies.length,
                                gridDelegate:
                                    SliverGridDelegateWithFixedCrossAxisCount(
                                  crossAxisCount: cols,
                                  crossAxisSpacing: 12,
                                  mainAxisSpacing: 12,
                                  childAspectRatio: 0.65,
                                ),
                                itemBuilder: (ctx, i) => _MovieCard(
                                  movie: movies[i],
                                  rank: i + 1,
                                  isFavorite:
                                      _favoriteIds.contains(movies[i].id),
                                  onToggleFavorite: () => setState(() {
                                    final id = movies[i].id;
                                    _favoriteIds.contains(id)
                                        ? _favoriteIds.remove(id)
                                        : _favoriteIds.add(id);
                                  }),
                                ),
                              ),
                            );
                          },
                        );
                      }).toList(),
                    );
                  }).toList(),
                ),
              ),
              const Divider(),
              Padding(
                padding: const EdgeInsets.symmetric(vertical: 8),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                  children: [
                    _neonButton(
                        Icons.close, () => Navigator.of(context).pop(),
                        scheme.secondary),
                    _neonButton(
                        Icons.refresh, () => setState(() {}),
                        scheme.secondary),
                    _neonButton(
                        Icons.search,
                        () => showDialog(
                              context: context,
                              builder: (_) => AlertDialog(
                                title: Text("Search",
                                    style:
                                        theme.textTheme.titleMedium),
                                content: Text(
                                    "Search feature not implemented.",
                                    style:
                                        theme.textTheme.bodyMedium),
                                actions: [
                                  TextButton(
                                      onPressed: () =>
                                          Navigator.pop(context),
                                      child: const Text("OK"))
                                ],
                              ),
                            ),
                        scheme.secondary),
                    _neonButton(
                        Icons.star,
                        () => showDialog(
                              context: context,
                              builder: (_) => AlertDialog(
                                title: Text("Favorites",
                                    style:
                                        theme.textTheme.titleMedium),
                                content: Text(
                                    "Favorites: ${_favoriteIds.length} selected",
                                    style:
                                        theme.textTheme.bodyMedium),
                                actions: [
                                  TextButton(
                                      onPressed: () =>
                                          Navigator.pop(context),
                                      child: const Text("OK"))
                                ],
                              ),
                            ),
                        scheme.secondary),
                  ],
                ),
              ),
              const SizedBox(height: 10),
            ],
          ),
        ),
      ),
    );
  }
}

class _MovieCard extends StatelessWidget {
  final Movie movie;
  final int rank;
  final bool isFavorite;
  final VoidCallback onToggleFavorite;

  const _MovieCard({
    Key? key,
    required this.movie,
    required this.rank,
    required this.isFavorite,
    required this.onToggleFavorite,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final scheme = theme.colorScheme;
    return Padding(
      padding: const EdgeInsets.all(6),
      child: ClipRRect(
        borderRadius: BorderRadius.circular(16),
        child: Container(
          decoration: BoxDecoration(
            color: scheme.surface.withOpacity(0.5),
            borderRadius: BorderRadius.circular(16),
            border: Border.all(color: scheme.primary, width: 2),
            boxShadow: [
              BoxShadow(
                color: scheme.primary.withOpacity(0.4),
                blurRadius: 16,
                spreadRadius: 4,
              ),
            ],
          ),
          child: InkWell(
            onTap: () => context.push('/movies/${movie.id}', extra: movie),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                Align(
                  alignment: Alignment.topRight,
                  child: IconButton(
                    icon: Icon(
                      isFavorite ? Icons.star : Icons.star_border,
                      color: isFavorite
                          ? Colors.amber
                          : scheme.onSurface,
                      size: 20,
                    ),
                    onPressed: onToggleFavorite,
                  ),
                ),
                Expanded(
                  child: movie.posterPath?.isNotEmpty == true
                      ? CachedNetworkImage(
                          imageUrl:
                              'https://image.tmdb.org/t/p/w500${movie.posterPath}',
                          fit: BoxFit.cover,
                          errorWidget: (_, __, ___) =>
                              const Icon(Icons.broken_image),
                          placeholder: (_, __) =>
                              const Center(child: CircularProgressIndicator()),
                        )
                      : const Center(
                          child:
                              Icon(Icons.image_not_supported)),
                ),
                Container(
                  decoration: BoxDecoration(
                    color: scheme.surface.withOpacity(0.6),
                    borderRadius: const BorderRadius.vertical(
                        bottom: Radius.circular(16)),
                  ),
                  padding: const EdgeInsets.all(8),
                  child: Column(
                    crossAxisAlignment:
                        CrossAxisAlignment.start,
                    children: [
                      Text(
                        movie.title,
                        maxLines: 1,
                        overflow: TextOverflow.ellipsis,
                        style: theme.textTheme.titleSmall
                            ?.copyWith(color: scheme.primary),
                      ),
                      const SizedBox(height: 4),
                      Text(
                        movie.releaseDate,
                        style: theme.textTheme.bodySmall
                            ?.copyWith(
                                color: scheme.onSurface
                                    .withOpacity(0.8)),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/movies/movie_list_horizontal.dart ===

// lib/features/movies/movie_list_horizontal.dart

import 'package:flutter/material.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';

import '../../core/language_provider.dart';
import '../../core/theme_provider.dart';
import '../../core/theme.dart';
import 'movie.dart';
import 'movie_service.dart';

class MovieListHorizontal extends StatelessWidget {
  final String category;
  final double height;

  const MovieListHorizontal({
    Key? key,
    this.category = 'popular',
    required this.height,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final lang = context.watch<LanguageProvider>().locale.languageCode;
    final scheme = Theme.of(context).colorScheme;

    return SizedBox(
      height: height,
      child: FutureBuilder<List<Movie>>(
        future: MovieService.instance.fetch(
          category: category,
          language: lang,
        ),
        builder: (ctx, snap) {
          if (snap.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator(color: scheme.primary));
          }
          if (snap.hasError) {
            return Center(
              child: Text(
                'Error loading movies:\n${snap.error}',
                textAlign: TextAlign.center,
                style: Theme.of(ctx).textTheme.bodyMedium?.copyWith(color: scheme.error),
              ),
            );
          }

          final movies = snap.data ?? [];
          if (movies.isEmpty) {
            return Center(
              child: Text('No movies found', style: Theme.of(ctx).textTheme.bodyMedium),
            );
          }

          return ListView.builder(
            scrollDirection: Axis.horizontal,
            padding: const EdgeInsets.symmetric(horizontal: 12),
            itemCount: movies.length,
            itemBuilder: (ctx, i) {
              final m = movies[i];
              return GestureDetector(
                onTap: () => context.push('/movies/${m.id}', extra: m),
                child: Container(
                  width: height * 0.6,
                  margin: const EdgeInsets.symmetric(horizontal: 8),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Expanded(
                        child: ClipRRect(
                          borderRadius: BorderRadius.circular(8),
                          child: m.posterPath != null && m.posterPath!.isNotEmpty
                              ? CachedNetworkImage(
                                  imageUrl: 'https://image.tmdb.org/t/p/w500${m.posterPath}',
                                  placeholder: (_, __) => const Center(child: CircularProgressIndicator()),
                                  errorWidget: (_, __, ___) => const Icon(Icons.broken_image),
                                  fit: BoxFit.cover,
                                  width: double.infinity,
                                )
                              : const Center(child: Icon(Icons.image_not_supported)),
                        ),
                      ),
                      const SizedBox(height: 6),
                      Text(
                        m.title,
                        maxLines: 1,
                        overflow: TextOverflow.ellipsis,
                        style: Theme.of(ctx).textTheme.bodyMedium,
                      ),
                    ],
                  ),
                ),
              );
            },
          );
        },
      ),
    );
  }
}

// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/movies/movie_detail_screen.dart ===

// lib/features/movies/movie_detail_screen.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter_rating_bar/flutter_rating_bar.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';
import '../../core/theme_provider.dart';
import '../../core/theme.dart';

import 'movie.dart';

class MovieDetailScreen extends StatelessWidget {
  final Movie movie;
  const MovieDetailScreen({Key? key, required this.movie}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final scheme = theme.colorScheme;
    final router = GoRouter.of(context);
    final gradient = AppGradients.getGradientColors(context.read<ThemeProvider>().appThemeMode);

    return Scaffold(
      extendBodyBehindAppBar: true,
      backgroundColor: Colors.transparent,
      body: Stack(fit: StackFit.expand, children: [
        Container(color: scheme.background),
        Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: gradient,
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
          ),
        ),
        Positioned.fill(
          child: BackdropFilter(
            filter: ImageFilter.blur(sigmaX: 18, sigmaY: 18),
            child: Container(color: Colors.black.withOpacity(0.3)),
          ),
        ),
        CustomScrollView(slivers: [
          SliverAppBar(
            backgroundColor: Colors.transparent,
            pinned: true,
            expandedHeight: 300,
            elevation: 0,
            leading: Padding(
              padding: const EdgeInsets.only(left: 12, top: 12),
              child: Material(
                color: scheme.surface.withOpacity(0.3),
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                child: IconButton(
                  icon: Icon(Icons.arrow_back, color: scheme.onPrimary),
                  onPressed: () => Navigator.of(context).pop(),
                ),
              ),
            ),
            actions: [
              Padding(
                padding: const EdgeInsets.only(right: 12, top: 12),
                child: Material(
                  color: scheme.surface.withOpacity(0.3),
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                  child: IconButton(
                    icon: Icon(Icons.refresh, color: scheme.onPrimary),
                    onPressed: () => router.go('/movies/${movie.id}', extra: movie),
                  ),
                ),
              ),
            ],
            flexibleSpace: FlexibleSpaceBar(
              title: Text(
                movie.title,
                style: theme.textTheme.titleLarge?.copyWith(
                  color: scheme.onPrimary,
                  shadows: const [Shadow(blurRadius: 4, color: Colors.black54)],
                ),
              ),
              background: Stack(fit: StackFit.expand, children: [
                movie.backdropPath.isNotEmpty
                    ? CachedNetworkImage(
                        imageUrl: 'https://image.tmdb.org/t/p/w500${movie.backdropPath}',
                        fit: BoxFit.cover,
                        errorWidget: (_, __, ___) => const Icon(Icons.broken_image),
                        placeholder: (_, __) => const Center(child: CircularProgressIndicator()),
                      )
                    : const Center(child: Icon(Icons.image_not_supported)),
                Container(color: Colors.black45),
              ]),
            ),
          ),
          SliverPadding(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 24),
            sliver: SliverList(
              delegate: SliverChildListDelegate([
                Center(
                  child: RatingBarIndicator(
                    rating: movie.voteAverage / 2,
                    itemCount: 5,
                    itemSize: 36,
                    itemBuilder: (_, __) => Icon(Icons.star, color: scheme.secondary),
                  ),
                ),
                const SizedBox(height: 20),
                Text('Release Date: ${movie.releaseDate}', style: theme.textTheme.bodyLarge?.copyWith(color: scheme.onSurface)),
                const SizedBox(height: 12),
                Text('Genres: ${movie.genreIds.join(', ')}', style: theme.textTheme.bodyLarge?.copyWith(color: scheme.onSurface)),
                const SizedBox(height: 20),
                Text(movie.overview, style: theme.textTheme.bodyMedium?.copyWith(color: scheme.onPrimary)),
                const SizedBox(height: 40),
              ]),
            ),
          ),
        ]),
      ]),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/movies/recommendation_service.dart ===

// lib/features/movies/recommendation_service.dart

import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import 'movie.dart';

class RecommendationService {
  RecommendationService._();
  static final RecommendationService instance = RecommendationService._();

  static const _genreScoresKey = 'genreScores';
  Map<int, double> _genreScores = {};

  Future<void> load() async {
    final prefs = await SharedPreferences.getInstance();
    final jsonStr = prefs.getString(_genreScoresKey);
    if (jsonStr != null) {
      final Map<String, dynamic> m = jsonDecode(jsonStr);
      _genreScores =
          m.map((k, v) => MapEntry(int.parse(k), v as double));
    }
  }

  Future<void> _save() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(
      _genreScoresKey,
      jsonEncode(_genreScores.map((k, v) => MapEntry(k.toString(), v))),
    );
  }

  Future<void> recordInteraction(Movie movie) async {
    await load();
    for (var g in movie.genreIds) {
      _genreScores[g] = (_genreScores[g] ?? 0) + 1.0;
    }
    await _save();
  }

  /// Returns a NEW list of movies sorted by (TMDB rating * 0.7 + affinity * 0.3).
  Future<List<Movie>> personalize(List<Movie> movies) async {
    await load();
    // find max genre score
    final maxScore = _genreScores.values.fold<double>(
        0.0, (prev, e) => e > prev ? e : prev);

    // build scored list
    final entries = <MapEntry<Movie, double>>[];
    for (var m in movies) {
      final affinity = m.genreIds
          .fold<double>(0.0, (sum, g) => sum + (_genreScores[g] ?? 0));
      final norm = maxScore > 0 ? (affinity / maxScore) : 0.0;
      final finalScore = m.voteAverage * 0.7 + norm * 5.0 * 0.3;
      entries.add(MapEntry(m, finalScore));
    }

    entries.sort((a, b) => b.value.compareTo(a.value));
    // return only the Movie objects, in sorted order
    return entries.map((e) => e.key).toList();
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/movies/movie.dart ===

// lib/features/movies/movie.dart

class Movie {
  final int id;
  final String title;
  final String overview;
  final String posterPath;
  final String backdropPath;
  final double voteAverage;
  final String releaseDate;
  final List<int> genreIds;
  final String originalLanguage;
  final double popularity;

  Movie({
    required this.id,
    required this.title,
    required this.overview,
    required this.posterPath,
    required this.backdropPath,
    required this.voteAverage,
    required this.releaseDate,
    required this.genreIds,
    required this.originalLanguage,
    required this.popularity,
  });

  factory Movie.fromJson(Map<String, dynamic> json) {
    return Movie(
      id: json['id'] as int,
      title: json['title'] as String? ?? '',
      overview: json['overview'] as String? ?? '',
      posterPath: json['poster_path'] as String? ?? '',
      backdropPath: json['backdrop_path'] as String? ?? '',
      voteAverage: (json['vote_average'] as num).toDouble(),
      releaseDate: json['release_date'] as String? ?? '',
      genreIds: List<int>.from(json['genre_ids'] as List<dynamic>? ?? []),
      originalLanguage: json['original_language'] as String? ?? '',
      popularity: (json['popularity'] as num).toDouble(),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/movies/movie_service.dart ===

// lib/features/movies/movie_service.dart

import 'dart:convert';
import 'package:dio/dio.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'movie.dart';
import 'recommendation_service.dart'; // ‚Üê ensure this path matches your project

/// Internal isolate‚Äêsafe parser
List<Movie> _parseMovies(Map<String, dynamic> json) {
  final results = json['results'] as List<dynamic>? ?? [];
  return results
      .map((e) => Movie.fromJson(e as Map<String, dynamic>))
      .toList();
}

class MovieService {
  MovieService._() {
    final key = dotenv.env['TMDB_API_KEY']!;
    _dio = Dio(BaseOptions(
      baseUrl: 'https://api.themoviedb.org/3/',
      connectTimeout: const Duration(milliseconds: 5000),
      receiveTimeout: const Duration(milliseconds: 3000),
      queryParameters: {'api_key': key},
    ))
      ..interceptors.add(LogInterceptor(
        requestBody: true,
        responseBody: true,
        logPrint: (m) => debugPrint('[TMDB] $m'),
      ));
  }

  static final MovieService instance = MovieService._();

  late final Dio _dio;
  final Map<String, List<Movie>> _cache = {};

  Future<List<Movie>> fetchCategory({
    required String category,
    String language = 'en-US',
    int page = 1,
  }) async {
    final cacheKey = 'cat:$category|lang:$language|page:$page';
    if (_cache.containsKey(cacheKey)) return _cache[cacheKey]!;

    try {
      final resp = await _dio.get<Map<String, dynamic>>(
        'movie/$category',
        queryParameters: {'language': language, 'page': page},
      );
      final movies = await compute(_parseMovies, resp.data!);
      _cache[cacheKey] = movies;
      return movies;
    } on DioError catch (e) {
      throw Exception('TMDB error (${e.response?.statusCode}): ${e.message}');
    }
  }

  Future<List<Movie>> discoverByLanguage({
    required String origLanguage,
    int page = 1,
  }) async {
    final cacheKey = 'disc:lang:$origLanguage|page:$page';
    if (_cache.containsKey(cacheKey)) return _cache[cacheKey]!;

    try {
      final resp = await _dio.get<Map<String, dynamic>>(
        'discover/movie',
        queryParameters: {
          'with_original_language': origLanguage,
          'sort_by': 'popularity.desc',
          'page': page,
        },
      );
      final movies = await compute(_parseMovies, resp.data!);
      _cache[cacheKey] = movies;
      return movies;
    } on DioError catch (e) {
      throw Exception('TMDB discover error (${e.response?.statusCode}): ${e.message}');
    }
  }

  Future<List<Movie>> fetch({
    required String category,
    String? origLanguage,
    String language = 'en-US',
    int page = 1,
  }) async {
    List<Movie> movies;
    if (origLanguage == null) {
      movies = await fetchCategory(
        category: category,
        language: language,
        page: page,
      );
      if (category == 'popular') {
        movies = await RecommendationService.instance.personalize(movies);
      }
    } else {
      movies = await discoverByLanguage(origLanguage: origLanguage, page: page);
    }
    return movies;
  }

  void clearCache() => _cache.clear();
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/login/login_screen.dart ===

import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import '../../../features/profile/auth_service.dart';
import '/l10n/app_localizations.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final TextEditingController _emailCtl = TextEditingController();
  final TextEditingController _passCtl = TextEditingController();
  String? _error;

  @override
  void dispose() {
    _emailCtl.dispose();
    _passCtl.dispose();
    super.dispose();
  }

  void _login() async {
    final msg = await AuthService().login(
      _emailCtl.text.trim(),
      _passCtl.text.trim(),
    );

    if (msg != null) {
      setState(() => _error = msg);
    } else {
      if (!mounted) return;
      context.go('/home');
    }
  }

  void _loginWithGoogle() async {
    final result = await AuthService().signInWithGoogle();
    if (!mounted) return;
    if (result != null) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(result)),
      );
    } else {
      context.go('/home');
    }
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;

    return Scaffold(
      appBar: AppBar(
        title: Text(loc.login),
        automaticallyImplyLeading: false,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => context.go('/home'),
        ),
      ),
      body: Padding(
        padding: const EdgeInsets.all(24),
        child: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              if (_error != null) ...[
                Text(
                  _localizedError(loc, _error!),
                  style: const TextStyle(color: Colors.red),
                ),
                const SizedBox(height: 16),
              ],
              TextField(
                controller: _emailCtl,
                decoration: InputDecoration(labelText: loc.email),
                keyboardType: TextInputType.emailAddress,
              ),
              const SizedBox(height: 12),
              TextField(
                controller: _passCtl,
                decoration: InputDecoration(labelText: loc.password),
                obscureText: true,
              ),
              const SizedBox(height: 24),
              ElevatedButton(
                onPressed: _login,
                style: ElevatedButton.styleFrom(minimumSize: const Size.fromHeight(50)),
                child: Text(loc.login),
              ),
              const SizedBox(height: 12),
              ElevatedButton.icon(
                icon: Image.asset('assets/google_logo.png', height: 24),
                label: const Text('Continue with Google'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.white,
                  foregroundColor: Colors.black87,
                  minimumSize: const Size.fromHeight(50),
                ),
                onPressed: _loginWithGoogle,
              ),
              const SizedBox(height: 12),
              Center(
                child: TextButton(
                  onPressed: () => context.go('/signup'),
                  child: Text(loc.createAccount),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  String _localizedError(AppLocalizations loc, String msg) {
    switch (msg) {
      case 'Invalid email or password.':
        return loc.invalidCredentials;
      case 'No account found. Please sign up first.':
        return loc.noAccountFound;
      case 'Account already exists. Please log in.':
        return loc.accountExists;
      default:
        return msg;
    }
  }
}

// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/onboarding/onboarding_screen.dart ===

import 'package:flutter/material.dart';
import 'package:lottie/lottie.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:go_router/go_router.dart';
import '/l10n/app_localizations.dart';
import '../../core/theme_provider.dart';
import '../common/animated_background.dart';

class OnboardingScreen extends StatefulWidget {
  const OnboardingScreen({Key? key}) : super(key: key);

  @override
  State<OnboardingScreen> createState() => _OnboardingScreenState();
}

class _OnboardingScreenState extends State<OnboardingScreen> {
  final PageController _controller = PageController();
  int _currentIndex = 0;

  final List<_OnboardingPage> _pages = [
    _OnboardingPage(
      titleBuilder: (loc) => loc.bdNewsreader,
      descriptionBuilder: (loc) => loc.latest,
      animationAsset: 'assets/lottie/news.json',
    ),
    _OnboardingPage(
      titleBuilder: (loc) => loc.fastReliable ?? 'Fast & Reliable',
      descriptionBuilder: (loc) => loc.digitalTech,
      animationAsset: 'assets/lottie/rocket.json',
    ),
    _OnboardingPage(
      titleBuilder: (loc) => loc.personalizedExperience ?? 'Personalized Experience',
      descriptionBuilder: (loc) => loc.settings,
      animationAsset: 'assets/lottie/settings.json',
    ),
  ];

  Future<void> _completeOnboarding() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('onboardingCompleted', true);
    context.go('/login');
  }

  void _nextPage() {
    if (_currentIndex < _pages.length - 1) {
      _controller.nextPage(duration: const Duration(milliseconds: 400), curve: Curves.ease);
    } else {
      _completeOnboarding();
    }
  }

  void _skipToLast() {
    _controller.animateToPage(
      _pages.length - 1,
      duration: const Duration(milliseconds: 400),
      curve: Curves.ease,
    );
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final theme = Theme.of(context);
    final scheme = theme.colorScheme;

    return Scaffold(
      body: AnimatedBackground(
        overlayOpacity: 0.15,
        blurSigma: 30,
        child: SafeArea(
          child: Stack(
            children: [
              PageView.builder(
                controller: _controller,
                itemCount: _pages.length,
                onPageChanged: (index) => setState(() => _currentIndex = index),
                itemBuilder: (context, index) {
                  final page = _pages[index];
                  return Padding(
                    padding: const EdgeInsets.all(24),
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Image.asset('assets/app-icon.png', width: 96, height: 96),
                        const SizedBox(height: 24),
                        Expanded(
                          child: Lottie.asset(page.animationAsset, repeat: true),
                        ),
                        const SizedBox(height: 24),
                        Text(
                          page.titleBuilder(loc),
                          textAlign: TextAlign.center,
                          style: theme.textTheme.headlineSmall?.copyWith(
                            fontWeight: FontWeight.bold,
                            color: scheme.primary,
                          ),
                        ),
                        const SizedBox(height: 16),
                        Text(
                          page.descriptionBuilder(loc),
                          textAlign: TextAlign.center,
                          style: theme.textTheme.bodyLarge?.copyWith(color: scheme.onSurface.withOpacity(0.85)),
                        ),
                        const SizedBox(height: 32),
                      ],
                    ),
                  );
                },
              ),
              if (_currentIndex < _pages.length - 1)
                Positioned(
                  right: 16,
                  top: 16,
                  child: TextButton(
                    onPressed: _skipToLast,
                    child: Text(loc.close, style: theme.textTheme.bodyMedium?.copyWith(color: scheme.primary)),
                  ),
                ),
              Positioned(
                bottom: 24,
                left: 24,
                right: 24,
                child: Column(
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: List.generate(
                        _pages.length,
                        (idx) {
                          final selected = idx == _currentIndex;
                          return AnimatedContainer(
                            duration: const Duration(milliseconds: 300),
                            margin: const EdgeInsets.symmetric(horizontal: 4),
                            width: selected ? 24 : 8,
                            height: 8,
                            decoration: BoxDecoration(
                              color: selected ? scheme.primary : scheme.onSurface.withOpacity(0.3),
                              borderRadius: BorderRadius.circular(6),
                            ),
                          );
                        },
                      ),
                    ),
                    const SizedBox(height: 16),
                    ElevatedButton(
                      onPressed: _nextPage,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: scheme.primary,
                        foregroundColor: scheme.onPrimary,
                        minimumSize: const Size.fromHeight(48),
                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                      ),
                      child: Text(_currentIndex == _pages.length - 1 ? loc.getStarted : loc.next),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class _OnboardingPage {
  final String Function(AppLocalizations) titleBuilder;
  final String Function(AppLocalizations) descriptionBuilder;
  final String animationAsset;

  const _OnboardingPage({
    required this.titleBuilder,
    required this.descriptionBuilder,
    required this.animationAsset,
  });
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/help/help_screen.dart ===

import 'package:flutter/material.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:go_router/go_router.dart';

class HelpScreen extends StatelessWidget {
  const HelpScreen({super.key});

  Future<void> _launchEmail() async {
    final Uri emailUri = Uri(
      scheme: 'mailto',
      path: 'customerservice@dsmobiles.com',
      queryParameters: {'subject': 'Help & Support Inquiry'},
    );
    if (await canLaunchUrl(emailUri)) {
      await launchUrl(emailUri);
    }
  }

  Future<void> _launchWebsite() async {
    final Uri websiteUri = Uri.parse('https://www.dsmobiles.com');
    if (await canLaunchUrl(websiteUri)) {
      await launchUrl(websiteUri, mode: LaunchMode.externalApplication);
    }
  }

  Future<void> _launchRateUs() async {
    final Uri rateUri = Uri.parse('https://play.google.com/store/apps/details?id=com.example.app');
    if (await canLaunchUrl(rateUri)) {
      await launchUrl(rateUri, mode: LaunchMode.externalApplication);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Help & Support'),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => context.go('/home'),
        ),
      ),
      body: ListView(
        padding: const EdgeInsets.all(16),
        children: [
          const ListTile(
            leading: Icon(Icons.question_answer),
            title: Text('How to use BD News Reader?'),
            subtitle: Text('Navigate news categories from the homepage.'),
          ),
          const ListTile(
            leading: Icon(Icons.lock),
            title: Text('Is my data secure?'),
            subtitle: Text('Yes, we respect your privacy and do not store personal data.'),
          ),
          const ListTile(
            leading: Icon(Icons.update),
            title: Text('How to get latest updates?'),
            subtitle: Text('Updates are pushed automatically via Play Store.'),
          ),
          const Divider(height: 32),
          ElevatedButton.icon(
            onPressed: _launchEmail,
            icon: const Icon(Icons.email_outlined),
            label: const Text('Email Support'),
            style: ElevatedButton.styleFrom(minimumSize: const Size.fromHeight(50)),
          ),
          const SizedBox(height: 16),
          OutlinedButton.icon(
            onPressed: _launchWebsite,
            icon: const Icon(Icons.language),
            label: const Text('Visit Website'),
            style: OutlinedButton.styleFrom(minimumSize: const Size.fromHeight(50)),
          ),
          const SizedBox(height: 16),
          OutlinedButton.icon(
            onPressed: _launchRateUs,
            icon: const Icon(Icons.star_rate_outlined),
            label: const Text('Rate Us'),
            style: OutlinedButton.styleFrom(minimumSize: const Size.fromHeight(50)),
          ),
        ],
      ),
    );
  }
}

// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/extras/extras_screen.dart ===

// lib/features/extras/extras_screen.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import '/core/theme.dart';
import '/core/theme_provider.dart';
import '/features/common/appBar.dart';
import '/widgets/app_drawer.dart';
import '../movies/movie_widget.dart' show FullScreenMoviePage;
import '../history/history_widget.dart';
import '../quiz/daily_quiz_widget.dart';


class ExtrasScreen extends StatelessWidget {
  const ExtrasScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final prov = context.watch<ThemeProvider>();
    final mode = prov.appThemeMode;
    final gradient = AppGradients.getGradientColors(mode);
    final start = gradient[0], end = gradient[1];
    final theme = Theme.of(context);

    return Scaffold(
      extendBodyBehindAppBar: true,
      backgroundColor: Colors.transparent,
      drawer: const AppDrawer(),
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        centerTitle: true,
        title: const AppBarTitle('Extras'),
        flexibleSpace: ClipRect(
          child: BackdropFilter(
            filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20),
            child: const SizedBox.expand(),
          ),
        ),
      ),
      body: Container(
        constraints: const BoxConstraints.expand(),
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [start.withOpacity(0.85), end.withOpacity(0.85)],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        child: SafeArea(
          child: SingleChildScrollView(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 24),
            child: Center(
              child: ConstrainedBox(
                constraints: const BoxConstraints(maxWidth: 400),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: [
                    _infoCard(
                      context: context,
                      icon: Icons.movie,
                      title: 'CineSpot',
                      subtitle: 'Tap to explore cinema',
                      gradient: const [Color(0xFF8E2DE2), Color(0xFF4A00E0)],
                      onTap: () => Navigator.of(context).push(
                        MaterialPageRoute(
                          fullscreenDialog: true,
                          builder: (_) => const FullScreenMoviePage(),
                        ),
                      ),
                    ),
                    const SizedBox(height: 24),
                    _infoCard(
                      context: context,
                      icon: Icons.history,
                      title: 'OnThisDay...',
                      subtitle: 'Events, Birthdays & Inventions',
                      gradient: const [Color(0xFFFC4A1A), Color(0xFFF7B733)],
                      onTap: () => Navigator.of(context).push(
                        MaterialPageRoute(
                          fullscreenDialog: true,
                          builder: (_) => const HistoryWidget(),
                        ),
                      ),
                    ),
                    const SizedBox(height: 24),
                    _infoCard(
                      context: context,
                      icon: Icons.quiz,
                      title: 'BrainBuzz',
                      subtitle: 'Trivia game, track streaks, earn badges!',
                      gradient: const [Color(0xFF36D1DC), Color(0xFF5B86E5)],
                      onTap: () => Navigator.of(context).push(
                        MaterialPageRoute(
                          fullscreenDialog: true,
                          builder: (_) => const DailyQuizWidget(),
                        ),
                      ),
                    ),
                    const SizedBox(height: 24),
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }

Widget _infoCard({
  required BuildContext context,
  required IconData icon,
  required String title,
  String? subtitle,
  required List<Color> gradient,
  required VoidCallback onTap,
}) {
  final prov = context.read<ThemeProvider>();
  final theme = Theme.of(context);
  final titleStyle = prov.floatingTextStyle(fontSize: 20);
  final subtitleStyle = prov.floatingTextStyle(
    fontSize: 14,
    fontWeight: FontWeight.normal,
    color: theme.textTheme.bodyMedium!.color!.withOpacity(0.7),
  );

  return GestureDetector(
    onTap: onTap,
    child: ClipRRect(
      borderRadius: BorderRadius.circular(24),
      child: BackdropFilter(
        filter: ImageFilter.blur(sigmaX: 18, sigmaY: 18),
        child: Container(
          height: 180,
          padding: const EdgeInsets.all(20),
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: [
                gradient[0].withOpacity(0.35),
                gradient[1].withOpacity(0.25),
              ],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
            borderRadius: BorderRadius.circular(24),
            border: Border.all(
              color: Colors.white.withOpacity(0.2),
              width: 1.4,
            ),
            boxShadow: [
              BoxShadow(
                color: gradient.last.withOpacity(0.3),
                blurRadius: 16,
                offset: const Offset(0, 6),
              ),
            ],
          ),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(icon, size: 48, color: Colors.white),
              const SizedBox(height: 14),
              Text(title, style: titleStyle),
              if (subtitle != null) ...[
                const SizedBox(height: 6),
                Text(subtitle, style: subtitleStyle, textAlign: TextAlign.center),
              ],
            ],
          ),
        ),
      ),
    ),
  );
}
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/firebase_options.dart ===

// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'AIzaSyDHaDNvv-pLn4NYcpS139J2Bv6r2VQDA-g',
    appId: '1:92831175770:web:c9f2352eb095beec93f463',
    messagingSenderId: '92831175770',
    projectId: 'droid-e9db9',
    authDomain: 'droid-e9db9.firebaseapp.com',
    storageBucket: 'droid-e9db9.firebasestorage.app',
    measurementId: 'G-LKZEDMNFX6',
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyCeSxbjb0TIYG0kWuLMm-j7TdbZ0nXt8go',
    appId: '1:92831175770:android:2b0309d5b85ef55a93f463',
    messagingSenderId: '92831175770',
    projectId: 'droid-e9db9',
    storageBucket: 'droid-e9db9.firebasestorage.app',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIzaSyA0Vsaayr2jDfB_FEyHQ7PCJ30A51WUsc8',
    appId: '1:92831175770:ios:0e16728d7bc3edea93f463',
    messagingSenderId: '92831175770',
    projectId: 'droid-e9db9',
    storageBucket: 'droid-e9db9.firebasestorage.app',
    androidClientId: '92831175770-69mrb0h4gslfr4q93q2kf4scugi7c1tf.apps.googleusercontent.com',
    iosClientId: '92831175770-lr8jl26158284kfk114r7rvh4caj2q5c.apps.googleusercontent.com',
    iosBundleId: 'com.bd.bdnewsreader',
  );

  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: 'AIzaSyA0Vsaayr2jDfB_FEyHQ7PCJ30A51WUsc8',
    appId: '1:92831175770:ios:b69407f94ea150b993f463',
    messagingSenderId: '92831175770',
    projectId: 'droid-e9db9',
    storageBucket: 'droid-e9db9.firebasestorage.app',
    androidClientId: '92831175770-69mrb0h4gslfr4q93q2kf4scugi7c1tf.apps.googleusercontent.com',
    iosClientId: '92831175770-kr1cu4c0u4emu4amuimcfk2432q4ntgk.apps.googleusercontent.com',
    iosBundleId: 'com.example.droid',
  );

  static const FirebaseOptions windows = FirebaseOptions(
    apiKey: 'AIzaSyDHaDNvv-pLn4NYcpS139J2Bv6r2VQDA-g',
    appId: '1:92831175770:web:2df2e34aba8e687793f463',
    messagingSenderId: '92831175770',
    projectId: 'droid-e9db9',
    authDomain: 'droid-e9db9.firebaseapp.com',
    storageBucket: 'droid-e9db9.firebasestorage.app',
    measurementId: 'G-YM7G0LQ61T',
  );

}

// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/main.dart ===

import 'package:flutter/material.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:google_mobile_ads/google_mobile_ads.dart';
import 'package:provider/provider.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:go_router/go_router.dart';
import 'package:flutter_localizations/flutter_localizations.dart';

import 'core/app_paths.dart';
import 'core/routes.dart';
import 'core/splash_service.dart';
import 'core/theme.dart';
import 'core/theme_provider.dart';
import 'core/language_provider.dart';
import 'core/premium_service.dart';
import 'l10n/app_localizations.dart';
import 'firebase_options.dart';

late final PremiumService premiumService;

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await dotenv.load(fileName: '.env');

  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  await MobileAds.instance.initialize();

  final prefs = await SharedPreferences.getInstance();

  // Initialize services before runApp
  premiumService = PremiumService(prefs: prefs);
  await premiumService.loadStatus();

  final initialRoute = await SplashService(prefs: prefs).resolveInitialRoute();

  runApp(MyApp(initialRoute: initialRoute));
}

class MyApp extends StatelessWidget {
  final String initialRoute;
  const MyApp({Key? key, required this.initialRoute}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final router = AppRouter.createRouter(initialLocation: initialRoute);

    return MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => ThemeProvider()),
        ChangeNotifierProvider(create: (_) => LanguageProvider()),
        ChangeNotifierProvider(create: (_) => premiumService),
      ],
      child: Consumer3<ThemeProvider, LanguageProvider, PremiumService>(
        builder: (ctx, themeProv, langProv, premium, _) {
          return MaterialApp.router(
            title: dotenv.env['APP_NAME'] ?? 'BD News Reader',
            debugShowCheckedModeBanner: false,
            theme: AppTheme.buildLightTheme(),
            darkTheme: AppTheme.buildDarkTheme(),
            themeMode: themeProv.themeMode,
            locale: langProv.locale,
            supportedLocales: const [Locale('en'), Locale('bn')],
            localizationsDelegates: const [
              AppLocalizations.delegate,
              GlobalMaterialLocalizations.delegate,
              GlobalWidgetsLocalizations.delegate,
              GlobalCupertinoLocalizations.delegate,
            ],
            routerConfig: router,
          );
        },
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/main_navigation_screen.dart ===

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import 'features/home/home_screen.dart';
import 'features/news/newspaper_screen.dart';
import 'features/magazine/magazine_screen.dart';
import 'features/settings/settings_screen.dart';
import 'features/extras/extras_screen.dart';
import 'l10n/app_localizations.dart';
import 'core/theme_provider.dart';
import 'core/theme.dart';

class MainNavigationScreen extends StatefulWidget {
  final int selectedTab;
  const MainNavigationScreen({Key? key, this.selectedTab = 0}) : super(key: key);

  @override
  State<MainNavigationScreen> createState() => _MainNavigationScreenState();
}

class _MainNavigationScreenState extends State<MainNavigationScreen> {
  late int _currentIndex;
  late final List<Widget> _tabs;

  final List<String> _iconNames = [
    'home',
    'newspapers',
    'magazines',
    'settings',
    'Extras',
  ];

  @override
  void initState() {
    super.initState();
    _currentIndex = widget.selectedTab;
    _tabs = const [
      HomeScreen(),
      NewspaperScreen(),
      MagazineScreen(),
      SettingsScreen(),
      ExtrasScreen(),
    ];
  }

  void _onItemTapped(int index) {
    setState(() => _currentIndex = index);
  }

  @override
  Widget build(BuildContext context) {
    final themeProv = context.watch<ThemeProvider>();
    final mode = themeProv.appThemeMode;
    final loc = AppLocalizations.of(context)!;
    final theme = Theme.of(context);
    final cs = theme.colorScheme;
    final textTheme = theme.textTheme;

    final labels = [
      loc.home,
      loc.newspapers,
      loc.magazines,
      loc.settings,
      'Extras',
    ];

    final activeGradient = LinearGradient(
      begin: Alignment.topLeft,
      end: Alignment.bottomRight,
      colors: AppGradients.getGradientColors(mode),
    );

    final inactiveGradient = LinearGradient(
      begin: Alignment.topLeft,
      end: Alignment.bottomRight,
      colors: [
        cs.surfaceVariant.withOpacity(0.3),
        cs.surface.withOpacity(0.3),
      ],
    );

    String themeSuffix;
    switch (mode) {
      case AppThemeMode.dark:
        themeSuffix = 'dark';
        break;
      case AppThemeMode.bangladesh:
        themeSuffix = 'desh';
        break;
      default:
        themeSuffix = 'light';
    }

    return Scaffold(
      body: IndexedStack(
        index: _currentIndex,
        children: _tabs,
      ),
      bottomNavigationBar: ClipRRect(
        borderRadius: const BorderRadius.only(
          topLeft: Radius.circular(24),
          topRight: Radius.circular(24),
        ),
        child: BackdropFilter(
          filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20),
          child: Container(
            padding: const EdgeInsets.symmetric(vertical: 8),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [
                  cs.background.withOpacity(0.85),
                  cs.surface.withOpacity(0.65),
                ],
              ),
              border: Border.all(color: themeProv.borderColor, width: 1),
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: List.generate(_tabs.length, (i) {
                final selected = i == _currentIndex;
                final String assetPath = 'assets/icons/${_iconNames[i]}_$themeSuffix.png';
                return GestureDetector(
                  onTap: () => _onItemTapped(i),
                  child: _buildNavIcon(
                    assetPath: assetPath,
                    label: labels[i],
                    selected: selected,
                    activeGradient: activeGradient,
                    inactiveGradient: inactiveGradient,
                    textTheme: textTheme,
                  ),
                );
              }),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildNavIcon({
    required String assetPath,
    required String label,
    required bool selected,
    required Gradient activeGradient,
    required Gradient inactiveGradient,
    required TextTheme textTheme,
  }) {
    final double size = 60;
    final double iconSize = size;
    final Color shadowColor =
        selected ? activeGradient.colors.first.withOpacity(0.4) : Colors.black26;

    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        AnimatedContainer(
          duration: const Duration(milliseconds: 300),
          width: size,
          height: size,
          decoration: BoxDecoration(
            shape: BoxShape.circle,
            gradient: selected ? activeGradient : inactiveGradient,
            boxShadow: selected
                ? [
                    BoxShadow(
                      color: shadowColor,
                      blurRadius: 14,
                      offset: const Offset(0, 6),
                    ),
                  ]
                : null,
          ),
          child: Center(
            child: Image.asset(
              assetPath,
              width: iconSize,
              height: iconSize,
              fit: BoxFit.contain,
            ),
          ),
        ),
        const SizedBox(height: 4),
        Text(
          label,
          style: textTheme.labelLarge?.copyWith(
            fontWeight: FontWeight.bold,
            color: selected
                ? textTheme.labelLarge?.color
                : textTheme.labelLarge?.color?.withOpacity(0.6),
          ),
        ),
      ],
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/data/models/news_article.g.dart ===

// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'combined_dart_code15.05.txt';

// **************************************************************************
// TypeAdapterGenerator
// **************************************************************************

class NewsArticleAdapter extends TypeAdapter<NewsArticle> {
  @override
  final int typeId = 0;

  @override
  NewsArticle read(BinaryReader reader) {
    final numOfFields = reader.readByte();
    final fields = <int, dynamic>{
      for (int i = 0; i < numOfFields; i++) reader.readByte(): reader.read(),
    };
    return NewsArticle(
      title: fields[0] as String,
      description: fields[1] as String,
      url: fields[2] as String,
      source: fields[3] as String,
      imageUrl: fields[4] as String?,
      language: fields[5] as String,
      snippet: fields[6] as String,
      fullContent: fields[7] as String,
      publishedAt: fields[8] as DateTime,
      isLive: fields[9] as bool,
      sourceOverride: fields[10] as String?,
      sourceLogo: fields[11] as String?,
      fromCache: fields[12] as bool, // ‚úÖ added fromCache
    );
  }

  @override
  void write(BinaryWriter writer, NewsArticle obj) {
    writer
      ..writeByte(13) // ‚úÖ total number of fields now
      ..writeByte(0)
      ..write(obj.title)
      ..writeByte(1)
      ..write(obj.description)
      ..writeByte(2)
      ..write(obj.url)
      ..writeByte(3)
      ..write(obj.source)
      ..writeByte(4)
      ..write(obj.imageUrl)
      ..writeByte(5)
      ..write(obj.language)
      ..writeByte(6)
      ..write(obj.snippet)
      ..writeByte(7)
      ..write(obj.fullContent)
      ..writeByte(8)
      ..write(obj.publishedAt)
      ..writeByte(9)
      ..write(obj.isLive)
      ..writeByte(10)
      ..write(obj.sourceOverride)
      ..writeByte(11)
      ..write(obj.sourceLogo)
      ..writeByte(12)
      ..write(obj.fromCache); // ‚úÖ write fromCache
  }

  @override
  int get hashCode => typeId.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is NewsArticleAdapter &&
          runtimeType == other.runtimeType &&
          typeId == other.typeId;
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/data/models/news_article.dart ===

import 'package:hive/hive.dart';
import 'package:webfeed_revised/webfeed_revised.dart';

part 'news_article.g.dart';

@HiveType(typeId: 0)
class NewsArticle extends HiveObject {
  @HiveField(0)
  final String title;

  @HiveField(1)
  final String description;

  @HiveField(2)
  final String url;

  @HiveField(3)
  final String source;

  @HiveField(4)
  final String? imageUrl;

  @HiveField(5)
  final String language;

  @HiveField(6)
  final String snippet;

  @HiveField(7)
  final String fullContent;

  @HiveField(8)
  final DateTime publishedAt;

  @HiveField(9)
  final bool isLive;

  @HiveField(10)
  String? sourceOverride;

  @HiveField(11)
  String? sourceLogo;

  @HiveField(12)
  bool fromCache; // ‚úÖ Add cache flag

  NewsArticle({
    required this.title,
    this.description = '',
    required this.url,
    required this.source,
    this.imageUrl,
    this.language = 'en',
    this.snippet = '',
    this.fullContent = '',
    required this.publishedAt,
    this.isLive = false,
    this.sourceOverride,
    this.sourceLogo,
    this.fromCache = false, // ‚úÖ default false
  });

  factory NewsArticle.fromRssItem(RssItem item) {
    final mediaUrl = item.media?.thumbnails?.firstOrNull?.url ??
        item.media?.contents?.firstOrNull?.url ??
        _extractImageFromEnclosure(item) ??
        _extractImageFromHtml(item.content?.value ?? item.description ?? '');

    return NewsArticle(
      title: item.title ?? '',
      description: item.description ?? '',
      url: item.link ?? '',
      source: item.source?.value ?? '',
      imageUrl: mediaUrl,
      language: item.dc?.language ?? 'en',
      publishedAt: item.pubDate ?? DateTime.now(),
    );
  }

  factory NewsArticle.fromMap(Map<String, dynamic> map) => NewsArticle(
        title: map['title'] ?? '',
        description: map['description'] ?? '',
        url: map['url'] ?? '',
        source: map['source'] ?? '',
        imageUrl: map['imageUrl'],
        language: map['language'] ?? 'en',
        snippet: map['snippet'] ?? '',
        fullContent: map['fullContent'] ?? '',
        publishedAt: DateTime.tryParse(map['publishedAt'] ?? '') ?? DateTime.now(),
        isLive: map['isLive'] ?? false,
        sourceOverride: map['sourceOverride'],
        sourceLogo: map['sourceLogo'],
        fromCache: map['fromCache'] ?? false, // ‚úÖ support map
      );

  Map<String, dynamic> toMap() => {
        'title': title,
        'description': description,
        'url': url,
        'source': source,
        'imageUrl': imageUrl,
        'language': language,
        'snippet': snippet,
        'fullContent': fullContent,
        'publishedAt': publishedAt.toIso8601String(),
        'isLive': isLive,
        'sourceOverride': sourceOverride,
        'sourceLogo': sourceLogo,
        'fromCache': fromCache, // ‚úÖ include in export
      };

  static String? _extractImageFromEnclosure(RssItem item) {
    final url = item.enclosure?.url ?? '';
    return (url.endsWith('.jpg') || url.endsWith('.png')) ? url : null;
  }

  static String? _extractImageFromHtml(String html) {
    final RegExp imgTag = RegExp(r'<img[^>]+src="([^">]+)"');
    final match = imgTag.firstMatch(html);
    return match?.group(1);
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/data/services/news_service.dart ===

import '../models/news_article.dart';

class NewsService {
  // Example base URL for API, adjust if needed
  static const String _baseUrl = "https://api.yournewsprovider.com";

  Future<List<NewsArticle>> fetchLatestNews() async {
    return _fetchNewsByCategory('latest');
  }

  Future<List<NewsArticle>> fetchNationalNews() async {
    return _fetchNewsByCategory('national');
  }

  Future<List<NewsArticle>> fetchTrendingNews() async {
    return _fetchNewsByCategory('trending');
  }

  Future<List<NewsArticle>> fetchTechNews() async {
    return _fetchNewsByCategory('technology');
  }

  Future<List<NewsArticle>> fetchSportsNews() async {
    return _fetchNewsByCategory('sports');
  }

  Future<List<NewsArticle>> fetchEntertainmentNews() async {
    return _fetchNewsByCategory('entertainment');
  }

  Future<List<NewsArticle>> fetchHealthNews() async {
    return _fetchNewsByCategory('health');
  }

  // üî• Private helper method
  Future<List<NewsArticle>> _fetchNewsByCategory(String category) async {
    try {
      // TODO: Replace this with actual HTTP call using package:http or Dio
      await Future.delayed(Duration(milliseconds: 500)); // Simulate network delay

      // For now returning dummy list
      return <NewsArticle>[
  NewsArticle(
    title: 'Sample $category News Title',
    description: 'This is a sample description for $category news.',
    url: 'https://example.com/sample-$category-news',
    source: 'BD News Reader', // üëà FIX: Add source here
    imageUrl: 'https://via.placeholder.com/150',
    publishedAt: DateTime.now(),
  ),
];
;
    } catch (e) {
      print('Error fetching $category news: $e');
      return []; // Return empty list on error
    }
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/data/services/hive_service.dart ===

// lib/data/services/hive_service.dart

import 'package:hive/hive.dart';
import 'package:hive_flutter/hive_flutter.dart';
import '../models/news_article.dart';

class HiveService {
  HiveService._();

  /// How long before cached articles expire.
  static const Duration cacheDuration = Duration(minutes: 30);

  /// Initialize Hive & open one articles‚Äêbox and one meta‚Äêbox per category.
  /// 
  /// Pass in exactly the list of category keys you're using (e.g. from
  /// your RSS service). Hive will register the adapter (once) and open
  /// two boxes for each category.
  static Future<void> init(List<String> categories) async {
    await Hive.initFlutter();

    // Register the adapter if not already done
    final adapterId = NewsArticleAdapter().typeId;
    if (!Hive.isAdapterRegistered(adapterId)) {
      Hive.registerAdapter(NewsArticleAdapter());
    }

    // Open a box for each category and its metadata
    for (final cat in categories) {
      final boxName = _boxName(cat);
      final metaName = _metaName(cat);

      if (!Hive.isBoxOpen(boxName)) {
        await Hive.openBox<NewsArticle>(boxName);
      }
      if (!Hive.isBoxOpen(metaName)) {
        // meta box holds a String under 'lastSaved'
        await Hive.openBox<String>(metaName);
      }
    }
  }

  static String _boxName(String category) => 'news_$category';
  static String _metaName(String category) => 'news_${category}_meta';

  static Box<NewsArticle> _articleBox(String category) =>
      Hive.box<NewsArticle>(_boxName(category));
  static Box<String> _metaBox(String category) =>
      Hive.box<String>(_metaName(category));

  /// Persist the list of articles, then stamp the time.
  static Future<void> saveArticles(
    String category,
    List<NewsArticle> articles,
  ) async {
    final box = _articleBox(category);
    await box.clear();
    for (final a in articles) {
      await box.put(a.url, a);
    }
    await _metaBox(category).put(
      'lastSaved',
      DateTime.now().toIso8601String(),
    );
  }

  /// Read back cached articles, marking them from cache.
  static List<NewsArticle> getArticles(String category) {
    return _articleBox(category)
        .values
        .map((a) => a..fromCache = true)
        .toList();
  }

  /// True if no saved timestamp or older than [cacheDuration].
  static bool isExpired(String category) {
    final savedStr = _metaBox(category).get('lastSaved');
    if (savedStr == null) return true;
    final saved = DateTime.tryParse(savedStr);
    if (saved == null) return true;
    return DateTime.now().difference(saved) > cacheDuration;
  }

  /// True if there are *any* cached articles.
  static bool hasArticles(String category) =>
      _articleBox(category).isNotEmpty;
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/data/services/remove_ads.dart ===

import 'dart:async';
import 'package:flutter/material.dart';
import 'package:in_app_purchase/in_app_purchase.dart';
import 'package:provider/provider.dart';

import '../../core/premium_service.dart';

class RemoveAdsScreen extends StatefulWidget {
  const RemoveAdsScreen({Key? key}) : super(key: key);
  @override
  State<RemoveAdsScreen> createState() => _RemoveAdsScreenState();
}

class _RemoveAdsScreenState extends State<RemoveAdsScreen> {
  final _iap = InAppPurchase.instance;
  final _productId = 'remove_ads';
  late final StreamSubscription<List<PurchaseDetails>> _sub;
  bool _isAvailable = false, _isPurchased = false;
  List<ProductDetails> _products = [];

  @override
  void initState() {
    super.initState();
    _isPurchased = context.read<PremiumService>().isPremium;
    _initStore();
    _sub = _iap.purchaseStream.listen(_onPurchase, onError: (e) => debugPrint('$e'));
  }

  @override
  void dispose() {
    _sub.cancel();
    super.dispose();
  }

  Future<void> _initStore() async {
    _isAvailable = await _iap.isAvailable();
    if (!_isAvailable) return;
    final resp = await _iap.queryProductDetails({_productId});
    if (resp.productDetails.isEmpty) return;
    if (!mounted) return;
    setState(() => _products = resp.productDetails);
  }

  void _onPurchase(List<PurchaseDetails> purchases) {
    if (!mounted) return;
    for (var p in purchases) {
      if (p.status == PurchaseStatus.purchased && p.productID == _productId) {
        context.read<PremiumService>().setPremium(true);
        if (mounted) setState(() => _isPurchased = true);
      }
      if (p.pendingCompletePurchase) _iap.completePurchase(p);
    }
  }

  void _buy() {
    if (_products.isNotEmpty) {
      final product = _products.first;
      final param = PurchaseParam(productDetails: product);
      _iap.buyNonConsumable(purchaseParam: param);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Remove Ads')),
      body: Center(
        child: _isPurchased
            ? const Text('‚úÖ Ads Removed', style: TextStyle(fontSize: 20))
            : !_isAvailable
                ? const Text('Store unavailable')
                : _products.isEmpty
                    ? const CircularProgressIndicator()
                    : ElevatedButton.icon(
                        key: const ValueKey('iap-remove-ads-btn'),
                        onPressed: _buy,
                        icon: const Icon(Icons.payment),
                        label: Text('Buy ${_products.first.price} to Remove Ads'),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.transparent,
                          elevation: 0,
                          side: const BorderSide(width: 1.5),
                        ),
                      ),
      ),
    );
  }
}

// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/data/services/rss_service.dart ===

import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as https;
import 'package:webfeed_revised/webfeed_revised.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';  // dotenv for .env keys

import '../models/news_article.dart';

class RssService {
  RssService._();

  static const _cacheDuration = Duration(minutes: 30);
  static const _cacheKeyPrefix = 'newsapi_cache';

  static final FlutterLocalNotificationsPlugin _notificationsPlugin =
      FlutterLocalNotificationsPlugin();

  /// Initialize once at app startup
  static Future<void> initializeNotifications() async {
    const androidInit = AndroidInitializationSettings('@mipmap/ic_launcher');
    const initSettings = InitializationSettings(android: androidInit);
    await _notificationsPlugin.initialize(initSettings);
  }

  /// Our four supported categories
  static const List<String> categories = [
    'latest',
    'national',
    'international',
    'lifestyle & education',
  ];

  /// A small fallback of RSS feeds, keyed by category.
  static const Map<String, List<Map<String, String>>> _rssFallback = {
    'latest': [
      {'name': '‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶Ü‡¶≤‡ßã', 'url': 'https://www.prothomalo.com/feed'},
      {'name': '‡¶¨‡¶ø‡¶°‡¶ø‡¶®‡¶ø‡¶â‡¶ú‡ß®‡ß™ ‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø', 'url':'https://bdnews24.com/en/rss/en/latest/rss.xml'},
      {'name': '‡¶∏‡¶Æ‡¶ï‡¶æ‡¶≤', 'url': 'https://samakal.com/feed'},
      {'name': '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¶‡¶ø‡¶®', 'url': 'https://www.bd-pratidin.com/rss.xml'},
      {'name': '‡¶Æ‡¶æ‡¶®‡¶¨‡¶ú‡¶Æ‡¶ø‡¶®', 'url': 'https://mzamin.com/rss.php'},
      {'name': '‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º', 'url': 'https://www.amadershomoy.com/rss.xml'},
      {'name': '‡¶á‡¶®‡¶ï‡¶ø‡¶≤‡¶æ‡¶¨', 'url': 'https://www.dailyinqilab.com/rss.xml'},
      {'name': '‡¶ú‡¶æ‡¶ó‡ßã ‡¶®‡¶ø‡¶â‡¶ú ‡ß®‡ß™', 'url': 'https://www.jagonews24.com/rss/rss.xml'},
      {'name': '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶®‡¶ø‡¶â‡¶ú‡ß®‡ß™', 'url': 'https://www.banglanews24.com/rss/rss.xml'},
      {'name': '‡¶¢‡¶æ‡¶ï‡¶æ ‡¶™‡ßã‡¶∏‡ßç‡¶ü', 'url': 'https://www.dhakapost.com/feed'},
      {'name': '‡¶á‡¶§‡ßç‡¶§‡ßá‡¶´‡¶æ‡¶ï', 'url': 'https://www.ittefaq.com.bd/feed'},
      {'name': '‡¶ï‡¶æ‡¶≤‡ßá‡¶∞ ‡¶ï‡¶£‡ßç‡¶†', 'url': 'https://www.kalerkantho.com/rss.xml'},
      {'name': '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¶‡¶ø‡¶®-‡¶ú‡¶æ‡¶§‡ßÄ‡¶Ø‡¶º', 'url': 'https://www.bd-pratidin.com/national/rss'},
      {'name': '‡¶®‡¶Ø‡¶º‡¶æ ‡¶¶‡¶ø‡¶ó‡¶®‡ßç‡¶§-‡¶∞‡¶æ‡¶ú‡¶®‡ßÄ‡¶§‡¶ø', 'url': 'https://www.dailynayadiganta.com/politics/rss'},
      {'name':'BBC World','url':'https://feeds.bbci.co.uk/news/world/rss.xml'},
    ],
    'national': [
      {'name': '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¶‡¶ø‡¶®-‡¶ú‡¶æ‡¶§‡ßÄ‡¶Ø‡¶º', 'url': 'https://www.bd-pratidin.com/national/rss'},
      {'name':'Cricbuzz BD','url':'https://www.cricbuzz.com/rss/BD.xml'},
      {'name': '‡¶ï‡ßç‡¶∞‡¶ø‡¶ï‡ßá‡¶ü‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ', 'url': 'https://cricketbangla.com/feed/'},
      {'name': '‡¶¨‡¶ø‡¶°‡¶ø‡¶®‡¶ø‡¶â‡¶ú‡ß®‡ß™-‡¶ï‡ßç‡¶∞‡ßÄ‡¶°‡¶º‡¶æ', 'url': 'https://bangla.bdnews24.com/category/sport/feed/'},
      {'name':'‡¶¨‡¶ø‡¶¨‡¶ø‡¶∏‡¶ø-‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ','url': 'https://feeds.bbci.co.uk/bengali/bangladesh/rss.xml'},
      {'name': '‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶Ü‡¶≤‡ßã',    'url': 'https://www.prothomalo.com/feed'},
      {'name': 'ESPN CricInfo',  'url': 'https://www.espncricinfo.com/rss/content/story/feeds/0.xml'},
    ],
    'international': [
      {'name':'BBC World','url':'https://feeds.bbci.co.uk/news/world/rss.xml'},
      {'name':'DW News','url':'https://rss.dw.com/rdf/rss-en-all'},
      {'name':'‡¶¨‡¶ø‡¶¨‡¶ø‡¶∏‡¶ø-‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨ (World)','url': 'https://feeds.bbci.co.uk/bengali/world/rss.xml'},
    ],
    'education': [
      {'name':'EdTech Review','url':'https://edtechreview.in/feed'},
      {'name': '‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ ‡¶Ö‡¶ß‡¶ø‡¶¶‡¶™‡ßç‡¶§‡¶∞', 'url': 'https://www.dshe.gov.bd/bn/feed'},
      {'name': '‡¶ï‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶™‡¶æ‡¶∏ ‡¶ü‡¶æ‡¶á‡¶Æ‡¶∏', 'url': 'https://www.campustimesbd.com/feed/'},
      {'name':'‡¶¨‡¶ø‡¶¨‡¶ø‡¶∏‡¶ø-‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶¨‡¶ø‡¶®‡ßã‡¶¶‡¶® (Entertainment)','url': 'https://feeds.bbci.co.uk/bengali/entertainment/rss.xml'},
    ],
  };

  /// Entry point: fetch for a given category & locale
  static Future<List<NewsArticle>> fetchNews({
    required String category,
    required Locale locale,
    BuildContext? context,
  }) async {
    assert(categories.contains(category), 'Unsupported category: $category');

    final apiResults = await _fetchFromNewsApi(
      category: category,
      locale: locale,
      context: context,
    );
    if (apiResults.isNotEmpty) return apiResults;

    final rssSources = _rssFallback[category]!;
    return _fetchFromRss(rssSources, context: context);
  }

  /// NewsAPI with caching
  static Future<List<NewsArticle>> _fetchFromNewsApi({
    required String category,
    required Locale locale,
    BuildContext? context,
  }) async {
    final apiKey = dotenv.env['NEWS_API_KEY'] ?? '';
    if (apiKey.isEmpty) throw StateError('NEWS_API_KEY not set in .env');
    final prefs = await SharedPreferences.getInstance();
    final now = DateTime.now();

    final lang = locale.languageCode;
    final cacheKey = '$_cacheKeyPrefix:$category:$lang';
    final cacheTimeKey = '$cacheKey:time';

    final raw = prefs.getString(cacheKey);
    final rawTime = prefs.getString(cacheTimeKey);
    if (raw != null && rawTime != null) {
      final saved = DateTime.tryParse(rawTime);
      if (saved != null && now.difference(saved) < _cacheDuration) {
        final list = jsonDecode(raw) as List<dynamic>;
        return list
            .map((m) => NewsArticle.fromMap(m as Map<String, dynamic>))
            .toList();
      }
    }

    final isTopHeadlines = category == 'latest' || category == 'sports';
    final endpoint = isTopHeadlines ? 'top-headlines' : 'everything';
    final params = <String, String>{
      'apiKey': apiKey,
      'language': lang,
      if (isTopHeadlines && category == 'sports') 'category': 'sports',
      if (isTopHeadlines && category == 'latest') 'country': 'bd',
      if (!isTopHeadlines && category == 'international') 'q': 'international OR world',
      if (!isTopHeadlines && category == 'education') 'q': 'education OR ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ',
      'pageSize': '30',
    };

    final uri = Uri.https('newsapi.org', '/v2/$endpoint', params);
    debugPrint('[DEBUG] Fetching NewsAPI URL: $uri');

    try {
      final res = await https.get(uri).timeout(const Duration(seconds: 10));
      if (res.statusCode == 200) {
        final body = jsonDecode(res.body) as Map<String, dynamic>;
        final rawArticles = (body['articles'] as List<dynamic>?) ?? [];
        final articles = rawArticles
            .map((j) => NewsArticle.fromMap(j as Map<String, dynamic>))
            .where((a) => a.title.isNotEmpty)
            .toList();

        await prefs.setString(cacheKey, jsonEncode(articles.map((a) => a.toMap()).toList()));
        await prefs.setString(cacheTimeKey, now.toIso8601String());

        if (context != null) {
          for (final a in articles) {
            if (a.imageUrl?.isNotEmpty == true) {
              precacheImage(NetworkImage(a.imageUrl!), context);
            }
          }
        }
        return articles;
      }
    } catch (_) {
      // fail silently to fallback
    }
    return [];
  }

  /// Pure RSS fetch + dedupe
  static Future<List<NewsArticle>> _fetchFromRss(
    List<Map<String, String>> sources, {
    BuildContext? context,
  }) async {
    final client = http.Client();
    final all = <NewsArticle>[];
    try {
      final results = await Future.wait(sources.map((s) {
        return _parseRss(client, s['url']!, s['name'], context);
      }));
      for (var l in results) all.addAll(l);
    } finally {
      client.close();
    }
    final seen = <String>{};
    return all.where((a) => seen.add(a.url)).toList();
  }

  static Future<List<NewsArticle>> _parseRss(
    https.Client client,
    String url,
    String? sourceName,
    BuildContext? context, {
    int retries = 2,
  }) async {
    try {
      final res = await client.get(Uri.parse(url)).timeout(const Duration(seconds: 15));
      if (res.statusCode != 200 && retries > 0) {
        await Future.delayed(const Duration(seconds: 2));
        return _parseRss(client, url, sourceName, context, retries: retries - 1);
      }
      if (res.statusCode != 200) return [];

      final ct = res.headers['content-type'];
      final charset = ct?.split('charset=').last ?? 'utf-8';
      final body = Encoding.getByName(charset)!.decode(res.bodyBytes);

      final feed = RssFeed.parse(body);
      final items = feed.items
              ?.map(NewsArticle.fromRssItem)
              .where((a) => a.title.isNotEmpty)
              .toList() ?? [];

      if (context != null) {
        for (final a in items) {
          if (a.imageUrl?.isNotEmpty == true) {
            precacheImage(NetworkImage(a.imageUrl!), context);
          }
        }
      }
      if (sourceName != null) {
        for (final a in items) {
          a.sourceOverride = sourceName;
        }
      }
      return items;
    } catch (_) {
      if (retries > 0) {
        await Future.delayed(const Duration(seconds: 2));
        return _parseRss(client, url, sourceName, context, retries: retries - 1);
      }
      return [];
    }
  }

  /// Desktop notifications for new RSS‚Äêonly stories
  static Future<void> pollFeedsAndNotify(Locale locale) async {
    final prefs = await SharedPreferences.getInstance();
    final seen = prefs.getStringList('seenArticles') ?? [];
    final sources = _rssFallback['latest']!;
    final fresh = await _fetchFromRss(sources);
    for (final a in fresh) {
      if (!seen.contains(a.url)) {
        await _showNotification(a.title);
        seen.add(a.url);
      }
    }
    await prefs.setStringList('seenArticles', seen);
  }

  static Future<void> _showNotification(String title) async {
    const android = AndroidNotificationDetails(
      'rss_channel', 'RSS Updates',
      channelDescription: 'New fallback RSS story',
      importance: Importance.max, priority: Priority.high,
    );
    const pd = NotificationDetails(android: android);
    await _notificationsPlugin.show(
      DateTime.now().millisecondsSinceEpoch ~/ 1000,
      'üì∞ ‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡¶Ç‡¶¨‡¶æ‡¶¶',
      title,
      pd,
    );
  }
}

// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/widgets/fade_transition_wrapper.dart ===

// lib/widgets/fade_transition_wrapper.dart

import 'dart:ui';
import 'package:flutter/material.dart';

/// A page route that ‚Äúcrystalizes‚Äù the transition:
/// 1) Blurs the old page behind a frosted overlay.
/// 2) Fades and gently scales in the new page.
class FadeTransitionWrapper extends PageRouteBuilder {
  FadeTransitionWrapper({required this.child})
      : super(
          transitionDuration: const Duration(milliseconds: 800),
          reverseTransitionDuration: const Duration(milliseconds: 500),
          pageBuilder: (
            BuildContext context,
            Animation<double> animation,
            Animation<double> secondaryAnimation,
          ) =>
              child,
          transitionsBuilder: (
            BuildContext context,
            Animation<double> animation,
            Animation<double> secondaryAnimation,
            Widget child,
          ) {
            // 1) Frosted blur overlay on the old page:
            final blur = Tween<double>(begin: 0, end: 8).animate(
              CurvedAnimation(parent: animation, curve: const Interval(0, 0.5)),
            );
            final frostOpacity = Tween<double>(begin: 0, end: 0.1).animate(
              CurvedAnimation(parent: animation, curve: const Interval(0, 0.5)),
            );

            // 2) Fade and scale the incoming page:
            final fade = CurvedAnimation(parent: animation, curve: Curves.easeInOut);
            final scale = Tween<double>(begin: 0.95, end: 1.0).animate(
              CurvedAnimation(parent: animation, curve: Curves.easeOutBack),
            );

            return Stack(
              fit: StackFit.expand,
              children: [
                // The old page is still in the background; we just blur+frost it.
                BackdropFilter(
                  filter: ImageFilter.blur(sigmaX: blur.value, sigmaY: blur.value),
                  child: Container(color: Colors.white.withOpacity(frostOpacity.value)),
                ),

                // Then bring in the new child with fade+scale:
                FadeTransition(
                  opacity: fade,
                  child: ScaleTransition(
                    scale: scale,
                    alignment: Alignment.center,
                    child: child,
                  ),
                ),
              ],
            );
          },
        );

  final Widget child;
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/widgets/banner_ad_widget.dart ===

import 'package:flutter/material.dart';
import 'package:google_mobile_ads/google_mobile_ads.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:provider/provider.dart';

import '../core/premium_service.dart';

class BannerAdWidget extends StatefulWidget {
  const BannerAdWidget({Key? key}) : super(key: key);

  @override
  State<BannerAdWidget> createState() => _BannerAdWidgetState();
}

class _BannerAdWidgetState extends State<BannerAdWidget> {
  BannerAd? _bannerAd;
  bool _isAdLoaded = false;

  @override
  void initState() {
    super.initState();

    final unitId = dotenv.env['BANNER_AD_UNIT_ID']?.isNotEmpty == true
        ? dotenv.env['BANNER_AD_UNIT_ID']!
        : dotenv.env['BANNER_AD_UNIT_ID_TEST'] ??
            'ca-app-pub-3940256099942544/6300978111'; // fallback

    _bannerAd = BannerAd(
      adUnitId: unitId,
      size: AdSize.banner,
      request: const AdRequest(),
      listener: BannerAdListener(
        onAdLoaded: (ad) {
          if (mounted) {
            setState(() => _isAdLoaded = true);
          }
        },
        onAdFailedToLoad: (ad, error) {
          debugPrint('‚ùå BannerAd failed: $error');
          ad.dispose();
        },
      ),
    )..load();
  }

  @override
  void dispose() {
    _bannerAd?.dispose();
    super.dispose();
  }

 @override
Widget build(BuildContext context) {
  final isPremium = context.watch<PremiumService>().isPremium;
  if (isPremium || !_isAdLoaded || _bannerAd == null) {
    return const SizedBox.shrink();
  }

  return Container(
    alignment: Alignment.center,
    width: _bannerAd!.size.width.toDouble(),
    height: _bannerAd!.size.height.toDouble(),
    child: AdWidget(ad: _bannerAd!),
  );
}

}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/widgets/news_list_widget.dart ===

import 'package:flutter/material.dart';
import 'package:cached_network_image/cached_network_image.dart';
import '../../data/models/news_article.dart';

class NewsListWidget extends StatelessWidget {
  final List<NewsArticle> articles;
  final void Function(NewsArticle) onTap;

  const NewsListWidget({Key? key, required this.articles, required this.onTap}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    if (articles.isEmpty) {
      return const Center(
        child: Text('No articles available.', style: TextStyle(color: Colors.grey)),
      );
    }

    return RefreshIndicator(
      onRefresh: () async {
        // TODO: hook this to refresh logic
      },
      child: ListView.separated(
        itemCount: articles.length,
        physics: const AlwaysScrollableScrollPhysics(),
        padding: const EdgeInsets.symmetric(vertical: 12),
        separatorBuilder: (_, __) => const Divider(height: 0),
        itemBuilder: (context, index) {
          final article = articles[index];
          final isCached = article.fromCache;
          final isFresh = DateTime.now().difference(article.publishedAt).inMinutes < 30;

          return ListTile(
            contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
            leading: ClipRRect(
              borderRadius: BorderRadius.circular(10),
              child: CachedNetworkImage(
                imageUrl: article.imageUrl ?? '',
                placeholder: (context, url) => const SizedBox(
                  width: 56,
                  height: 56,
                  child: Center(child: CircularProgressIndicator(strokeWidth: 2)),
                ),
                errorWidget: (context, url, error) => Container(
                  width: 56,
                  height: 56,
                  color: Colors.grey[200],
                  alignment: Alignment.center,
                  child: const Icon(Icons.broken_image, size: 24),
                ),
                width: 56,
                height: 56,
                fit: BoxFit.cover,
              ),
            ),
            title: Text(
              article.title,
              maxLines: 2,
              overflow: TextOverflow.ellipsis,
              style: const TextStyle(fontWeight: FontWeight.bold),
            ),
            subtitle: Row(
              children: [
                Expanded(
                  child: Text(
                    article.sourceOverride ?? article.source,
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                    style: const TextStyle(color: Colors.grey),
                  ),
                ),
                if (isFresh)
                  _badge('NEW', Colors.blueAccent)
                else if (isCached)
                  _badge('CACHED', Colors.grey),
              ],
            ),
            onTap: () => onTap(article),
          );
        },
      ),
    );
  }

  Widget _badge(String label, Color color) {
    return Container(
      margin: const EdgeInsets.only(left: 8),
      padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
      decoration: BoxDecoration(
        color: color.withOpacity(0.9),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Text(
        label,
        style: const TextStyle(color: Colors.white, fontSize: 10, fontWeight: FontWeight.bold),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/widgets/app_drawer.dart ===

// lib/widgets/app_drawer.dart

import 'dart:io';
import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';

import '../core/theme_provider.dart';
import '../core/theme.dart';
import '../features/profile/auth_service.dart';
import '/l10n/app_localizations.dart';

class _DrawerItem {
  final IconData icon;
  final String keyName;
  final String route;
  const _DrawerItem(this.icon, this.keyName, this.route);
}

class AppDrawer extends StatelessWidget {
  const AppDrawer({Key? key}) : super(key: key);

  static const List<_DrawerItem> _items = [
    _DrawerItem(Icons.home, 'home', '/home'),
    _DrawerItem(Icons.article, 'newspapers', '/newspaper'),
    _DrawerItem(Icons.favorite, 'favorites', '/favorites'),
    _DrawerItem(Icons.person, 'profile', '/profile'),
    _DrawerItem(Icons.info_outline, 'about', '/about'),
    _DrawerItem(Icons.support_agent, 'supports', '/supports'),
    _DrawerItem(Icons.search, 'search', '/search'),
  ];

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final prov = context.watch<ThemeProvider>();
    final theme = Theme.of(context);
    final textColor = theme.textTheme.bodyLarge?.color ?? Colors.white;
    final gradientColors = AppGradients.getGradientColors(prov.appThemeMode);

    return Drawer(
      backgroundColor: Colors.transparent,
      elevation: 0,
      child: ClipRRect(
        borderRadius: const BorderRadius.only(
          topRight: Radius.circular(28),
          bottomRight: Radius.circular(28),
        ),
        child: Stack(
          children: [
            // Gradient background
            Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                  colors: [
                    gradientColors[0].withOpacity(0.85),
                    gradientColors[1].withOpacity(0.85),
                  ],
                ),
              ),
            ),
            // Blur overlay
            BackdropFilter(
              filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20),
              child: Container(color: Colors.transparent),
            ),
            // Drawer content
            Column(
              children: [
                // Profile header
                Container(
                  decoration: prov.glassDecoration(
                    borderRadius: const BorderRadius.vertical(top: Radius.circular(28)),
                  ),
                  child: const ProfileHeader(),
                ),
                _buildDivider(),
                // Menu items
                Expanded(child: _buildMenu(context, loc, textColor)),
                _buildDivider(),
                // Logout footer
                Container(
                  decoration: prov.glassDecoration(
                    borderRadius: BorderRadius.circular(20),
                  ),
                  margin: const EdgeInsets.all(16),
                  child: Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        // Logout button
                        ElevatedButton.icon(
                          style: ElevatedButton.styleFrom(
                            backgroundColor: prov.glassColor,
                            shadowColor: Colors.black26,
                          ),
                          onPressed: () async {
                            // 1) Log out
                            await AuthService().logout();
                            // 2) Close drawer
                            Navigator.of(context).pop();
                            // 3) Navigate to login
                            context.go('/login');
                          },
                          icon: Icon(Icons.logout, color: textColor),
                          label: Text(loc.logout, style: TextStyle(color: textColor)),
                        ),
                        // Custom image on the right
                        SizedBox(
                          width: 40,
                          height: 40,
                          child: Image.asset(
                            'assets/widgets/logout_image.png',
                            fit: BoxFit.contain,
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildMenu(BuildContext context, AppLocalizations loc, Color textColor) {
    return ListView.builder(
      padding: const EdgeInsets.symmetric(vertical: 8),
      itemCount: _items.length,
      itemBuilder: (ctx, i) {
        final itm = _items[i];
        final title = _title(itm.keyName, loc);
        return _DrawerTile(
          icon: itm.icon,
          title: title,
          route: itm.route,
          textColor: textColor,
        );
      },
    );
  }

  String _title(String key, AppLocalizations loc) {
    switch (key) {
      case 'home':
        return loc.home;
      case 'newspapers':
        return loc.newspapers;
      case 'favorites':
        return loc.favorites;
      case 'profile':
        return loc.profile;
      case 'about':
        return loc.about;
      case 'supports':
        return loc.supports;
      case 'search':
        return loc.search;
      default:
        return key;
    }
  }

  static Widget _buildDivider() => Container(
        margin: const EdgeInsets.symmetric(vertical: 8),
        height: 5,
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.centerLeft,
            end: Alignment.centerRight,
            colors: [
              Colors.white.withOpacity(0.5),
              Colors.transparent,
              Colors.white.withOpacity(0.5),
            ],
          ),
        ),
      );
}

class ProfileHeader extends StatelessWidget {
  const ProfileHeader({Key? key}) : super(key: key);

  Future<Map<String, String>> _loadProfile() => AuthService().getProfile();

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final prov = context.watch<ThemeProvider>();
    final textStyle = prov.floatingTextStyle(fontSize: 18);

    return FutureBuilder<Map<String, String>>(
      future: _loadProfile(),
      builder: (ctx, snap) {
        final imageUrl = snap.data?['image'] ?? '';
        final name = snap.connectionState == ConnectionState.waiting
            ? loc.loading
            : (snap.hasData && snap.data!['name']?.isNotEmpty == true
                ? snap.data!['name']!
                : loc.guest);

        return Container(
          height: 220,
          width: double.infinity,
          alignment: Alignment.center,
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              CircleAvatar(
                radius: 40,
                backgroundColor: prov.glassColor,
                backgroundImage: imageUrl.isNotEmpty
                    ? (imageUrl.startsWith('https')
                        ? NetworkImage(imageUrl)
                        : FileImage(File(imageUrl))) as ImageProvider<Object>?
                    : null,
                child: imageUrl.isEmpty
                    ? Icon(Icons.person, size: 40, color: Colors.grey)
                    : null,
              ),
              const SizedBox(height: 14),
              Text(name, style: textStyle),
            ],
          ),
        );
      },
    );
  }
}

class _DrawerTile extends StatelessWidget {
  final IconData icon;
  final String title;
  final String route;
  final Color textColor;

  const _DrawerTile({
    Key? key,
    required this.icon,
    required this.title,
    required this.route,
    required this.textColor,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final current = GoRouterState.of(context).uri.toString();
    final isSelected = current == route;

    return ListTile(
      leading: Icon(icon, color: textColor),
      title: Text(
        title,
        style: TextStyle(
          color: textColor,
          fontWeight: isSelected ? FontWeight.bold : FontWeight.w600,
        ),
      ),
      selected: isSelected,
      onTap: () {
        Navigator.of(context).pop();
        context.go(route);
      },
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/widgets/error_widget.dart ===

import 'package:flutter/material.dart';

class ErrorDisplay extends StatelessWidget {

  const ErrorDisplay({required this.message, required this.onRetry, super.key});
  final String message;
  final VoidCallback onRetry;

  @override
  Widget build(BuildContext context) {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(24.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            const Icon(Icons.error_outline, color: Colors.redAccent, size: 60),
            const SizedBox(height: 16),
            Text(
              message,
              textAlign: TextAlign.center,
              style: const TextStyle(fontSize: 18, fontWeight: FontWeight.w500),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: onRetry,
              child: const Text('Retry'),
            ),
          ],
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/widgets/favorite_button.dart ===

// lib/widgets/favorite_button.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import '../data/models/news_article.dart';
import '../core/utils/favorites_manager.dart';

class FavoriteButton extends StatefulWidget {
  const FavoriteButton({
    super.key,
    required this.article,
    this.onFavoriteChanged,
  });

  final NewsArticle article;
  final VoidCallback? onFavoriteChanged;

  @override
  State<FavoriteButton> createState() => _FavoriteButtonState();
}

class _FavoriteButtonState extends State<FavoriteButton>
    with SingleTickerProviderStateMixin {
  bool _isFavorite = false;
  late final AnimationController _animController;
  late final Animation<double> _scaleAnim;
  late final Animation<double> _flashAnim;

  @override
  void initState() {
    super.initState();
    _loadFavoriteStatus();

    _animController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 300),
    );

    _scaleAnim = TweenSequence<double>([
      TweenSequenceItem(tween: Tween(begin: 1.0, end: 1.3), weight: 50),
      TweenSequenceItem(tween: Tween(begin: 1.3, end: 1.0), weight: 50),
    ]).animate(
      CurvedAnimation(parent: _animController, curve: Curves.easeOutBack),
    );

    _flashAnim = Tween<double>(begin: 0.0, end: 0.3).animate(
      CurvedAnimation(parent: _animController, curve: const Interval(0, 0.5)),
    );
  }

  @override
  void dispose() {
    _animController.dispose();
    super.dispose();
  }

  Future<void> _loadFavoriteStatus() async {
    final articles = FavoritesManager.instance.favoriteArticles;
    final status =
        articles.any((a) => a.url == widget.article.url);
    setState(() => _isFavorite = status);
  }

  Future<void> _toggleFavorite() async {
    // Start the pop+flash
    _animController.forward(from: 0);
    if (_isFavorite) {
      await FavoritesManager.instance.removeFavorite(widget.article);
    } else {
      await FavoritesManager.instance.addFavorite(widget.article);
    }
    await _loadFavoriteStatus();
    widget.onFavoriteChanged?.call();
  }

  @override
  Widget build(BuildContext context) {
    final colorScheme = Theme.of(context).colorScheme;
    final heartColor = _isFavorite
        ? colorScheme.secondary
        : colorScheme.onSurface.withOpacity(0.6);

    return Semantics(
      label: _isFavorite ? 'Remove from favorites' : 'Add to favorites',
      button: true,
      child: GestureDetector(
        onTap: _toggleFavorite,
        child: AnimatedBuilder(
          animation: _animController,
          builder: (context, child) {
            return Stack(
              alignment: Alignment.center,
              children: [
                // Flashing frosted circle
                if (_flashAnim.value > 0)
                  BackdropFilter(
                    filter: ImageFilter.blur(
                      sigmaX: 12 * _flashAnim.value,
                      sigmaY: 12 * _flashAnim.value,
                    ),
                    child: Container(
                      width: 40 + 20 * _flashAnim.value,
                      height: 40 + 20 * _flashAnim.value,
                      decoration: BoxDecoration(
                        color:
                            Colors.white.withOpacity(_flashAnim.value * 0.2),
                        shape: BoxShape.circle,
                      ),
                    ),
                  ),
                // Scaled heart
                Transform.scale(
                  scale: _scaleAnim.value,
                  child: Icon(
                    _isFavorite ? Icons.favorite : Icons.favorite_border,
                    color: heartColor,
                    size: 28,
                  ),
                ),
              ],
            );
          },
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/widgets/category_chips_bar.dart ===

import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '/core/theme_provider.dart';

class ChipsBar extends StatelessWidget {
  final List<String> items;
  final int selectedIndex;
  final void Function(int index) onTap;
  final double height;
  final double fontSize;
  final EdgeInsetsGeometry padding;
  final bool glow;

  const ChipsBar({
    Key? key,
    required this.items,
    required this.selectedIndex,
    required this.onTap,
    this.height = 52,
    this.fontSize = 13,
    this.padding = const EdgeInsets.symmetric(horizontal: 12),
    this.glow = false,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final prov = context.watch<ThemeProvider>();
    final theme = Theme.of(context);

    final baseColor = prov.glassColor;
    final glowColor = prov.borderColor.withOpacity(0.3);
    final selectedColor = const Color(0xFFFFD700); // Gold

    return Padding(
      padding: padding,
      child: Container(
        height: height,
        decoration: BoxDecoration(
          color: baseColor,
          borderRadius: BorderRadius.circular(18),
          border: Border.all(color: glowColor, width: 1),
          boxShadow: glow
              ? [
                  BoxShadow(
                    color: glowColor.withOpacity(0.4),
                    blurRadius: 10,
                    offset: const Offset(0, 4),
                  ),
                ]
              : [],
        ),
        child: ListView.separated(
          scrollDirection: Axis.horizontal,
          padding: const EdgeInsets.symmetric(horizontal: 8),
          itemCount: items.length,
          separatorBuilder: (_, __) => const SizedBox(width: 6),
          itemBuilder: (context, i) {
            final selected = i == selectedIndex;
            return ChoiceChip(
              label: Text(
                items[i],
                style: theme.textTheme.labelLarge?.copyWith(
                  fontSize: fontSize,
                  fontWeight: selected ? FontWeight.bold : FontWeight.w500,
                  color: selected
                      ? Colors.black
                      : (prov.appThemeMode == AppThemeMode.light
                          ? Colors.black54
                          : Colors.white70),
                  shadows: selected
                      ? const [
                          Shadow(
                            blurRadius: 6,
                            color: Colors.black26,
                            offset: Offset(0, 2),
                          ),
                        ]
                      : [],
                ),
              ),
              selected: selected,
              onSelected: (_) => onTap(i),
              backgroundColor: baseColor,
              selectedColor: selectedColor,
              shape: StadiumBorder(
                side: BorderSide(
                  color: selected ? Colors.transparent : glowColor,
                  width: 1,
                ),
              ),
            );
          },
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/widgets/loading_widget.dart ===

import 'package:flutter/material.dart';
import 'package:shimmer/shimmer.dart';

class LoadingWidget extends StatelessWidget {
  const LoadingWidget({
    super.key,
    this.height = 150,
    this.width = double.infinity,
    this.radius = 16,
  });

  final double height;
  final double width;
  final double radius;

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final isDark = theme.brightness == Brightness.dark;

    return Semantics(
      label: 'Loading content',
      child: Shimmer.fromColors(
        baseColor: isDark ? Colors.grey.shade800 : Colors.grey.shade300,
        highlightColor: isDark ? Colors.grey.shade600 : Colors.grey.shade100,
        child: Container(
          height: height,
          width: width,
          decoration: BoxDecoration(
            color: theme.cardColor,
            borderRadius: BorderRadius.circular(radius),
          ),
        ),
      ),
    );
  }
}


