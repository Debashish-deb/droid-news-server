// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/l10n/app_localizations.dart ===

import 'package:flutter/material.dart';

class AppLocalizations {
  final Locale locale;
  AppLocalizations(this.locale);

  static AppLocalizations of(BuildContext context) =>
      Localizations.of<AppLocalizations>(context, AppLocalizations)!;

  static const LocalizationsDelegate<AppLocalizations> delegate = _AppLocalizationsDelegate();

  // General UI
  String get close => _t('বন্ধ করুন', 'Close');
  String get home => _t('হোম', 'Home');
  String get profile => _t('প্রোফাইল', 'Profile');
  String get editProfile => _t('প্রোফাইল সম্পাদনা', 'Edit Profile');
  String get settings => _t('সেটিংস', 'Settings');
  String get theme => _t('থিম', 'Theme');
  String get language => _t('ভাষা', 'Language');
  String get darkMode => _t('ডার্ক মোড', 'Dark Mode');
  String get version => _t('সংস্করণ', 'Version');
  String get versionPrefix => _t('সংস্করণ', 'Version');
  String get bdNewsHub => _t('বিডিনিউজ হাব 📰', 'BDNews Hub 📰');
   String get lookup => _t('অনুসন্ধান', 'Lookup');
  // Auth
  String get login => _t('লগইন', 'Login');
  String get logout => _t('লগআউট', 'Logout');
  String get signup => _t('সাইন আপ', 'Sign Up');
  String get password => _t('পাসওয়ার্ড', 'Password');
  String get email => _t('ইমেইল', 'Email');
  String get fullName => _t('পুরো নাম', 'Full Name');
  String get forgotPassword => _t('পাসওয়ার্ড ভুলে গেছেন', 'Forgot Password');
  String get sendResetLink => _t('রিসেট লিঙ্ক পাঠান', 'Send Reset Link');
  String get enterEmailReset => _t('পাসওয়ার্ড রিসেট করতে আপনার ইমেল লিখুন:', 'Enter your email to reset your password:');
  String get alreadyHaveAccount => _t('ইতিমধ্যে একটি অ্যাকাউন্ট আছে?', 'Already have an account? Login');
  String get createAccount => _t('অ্যাকাউন্ট তৈরি করুন', 'Create account');
  String get invalidCredentials => _t('ভুল ইমেইল বা পাসওয়ার্ড।', 'Invalid email or password.');
  String get noAccountFound => _t('এই ইমেইলে কোন অ্যাকাউন্ট নেই।', 'No account found for this email.');
  String get accountExists => _t('এই ইমেইলে ইতিমধ্যে অ্যাকাউন্ট আছে।', 'An account already exists with this email.');
  String get resetEmailSent => _t('📧 পাসওয়ার্ড রিসেট ইমেইল পাঠানো হয়েছে!', '📧 Password reset email sent!');

  // Profile Fields
  String get phone => _t('ফোন', 'Phone');
  String get bio => _t('জীবন বৃত্তান্ত', 'Bio');
  String get address => _t('ঠিকানা', 'Address');
  String get website => _t('ওয়েবসাইট', 'Website');
  String get role => _t('ভূমিকা', 'Role');
  String get department => _t('বিভাগ', 'Department');
  String get changeImage => _t('ছবি পরিবর্তন করুন', 'Change Image');
  String get removeImage => _t('ছবি অপসারণ', 'Remove Image');

  // Editor Features
  String get saveChanges => _t('পরিবর্তনগুলি সংরক্ষণ করুন', 'Save Changes');
  String get profileSaved => _t('প্রোফাইল সংরক্ষিত', 'Profile saved');
  String get required => _t('আবশ্যক', 'Required');

  // News Categories
  String get latest => _t('সর্বশেষ', 'Latest');
  String get newspapers => _t('সংবাদপত্র', 'Newspapers');
  String get magazines => _t('ম্যাগাজিন', 'Magazines');
  String get favorites => _t('প্রিয়', 'Favorites');
  String get national => _t('জাতীয়', 'National');
  String get international => _t('আন্তর্জাতিক', 'International');
  String get businessFinance => _t('ব্যবসা ও অর্থনীতি', 'Business & Finance');
  String get digitalTech => _t('ডিজিটাল ও প্রযুক্তি', 'Digital & Technology');
  String get sportsNews => _t('খেলার খবর', 'Sports News');
  String get entertainmentArts => _t('বিনোদন ও শিল্প', 'Entertainment & Arts');
  String get worldPolitics => _t('বিশ্ব ও রাজনীতি', 'World & Politics');
  String get blog => _t('ব্লগ', 'Blog');
  String get business => _t('ব্যবসা', 'Business');
  String get sports => _t('খেলা', 'Sports');
  String get technology => _t('প্রযুক্তি', 'Technology');
  String get entertainment => _t('বিনোদন', 'Entertainment');
  String get lifestyle => _t('জীবনধারা', 'LifeStyle');

  // Premium Features
  String get bangladeshTheme => _t('দেশ 🇧🇩', 'Desh 🇧🇩');
  String get adFree => _t('বিজ্ঞাপনবিহীন অভিজ্ঞতা', 'Ad-Free Experience');
  String get adFreeHint => _t('পরিষ্কার পড়ার অভিজ্ঞতার জন্য বিজ্ঞাপন সরানো হয়।', 'Removes all ads for a clean reading experience.');
  String get offlineDownloads => _t('অফলাইন ডাউনলোড', 'Offline Downloads');
  String get offlineHint => _t('অফলাইনে দেখার জন্য কনটেন্ট সংরক্ষণ করুন।', 'Save content locally for offline viewing.');
  String get prioritySupport => _t('প্রাধান্য সহায়তা', 'Priority Support');
  String get prioritySupportHint => _t('সহায়তা টিম থেকে দ্রুত সহায়তা।', 'Get faster responses from our support team.');

  // Search and Empty States
  String get searchHint => _t('সন্ধান করুন...', 'Search...');
  String get searchPapers => _t('পত্রিকা খুঁজুন…', 'Search…');
  String get noMagazines => _t('কোন ম্যাগাজিন পাওয়া যায়নি', 'No magazines found');
  String get noPapersFound => _t('কোন সংবাদপত্র পাওয়া যায়নি', 'No papers found');
  String get allLanguages => _t('সব ভাষা', 'All Languages');

  // Categories for Magazines
  String get catFashion => _t('ফ্যাশন ও সৌন্দর্য', 'Fashion & Aesthetics');
  String get catScience => _t('বিজ্ঞান ও আবিষ্কার', 'Science & Discovery');
  String get catFinance => _t('অর্থনীতি ও অর্থ', 'Economics & Finance');
  String get catAffairs => _t('আন্তর্জাতিক সম্পর্ক', 'Global Affairs');
  String get catTech => _t('প্রযুক্তি', 'Emerging Technologies');
  String get catArts => _t('শিল্প ও মানবিকতা', 'Arts & Humanities');
  String get catLifestyle => _t('জীবনধারা ও বিলাসিতা', 'Lifestyle & Luxury');
  String get catSports => _t('খেলা ও পারফরম্যান্স', 'Sports & Performance');

  // Feedback
  String get feedback => _t('প্রতিক্রিয়া', 'Feedback');
  String get rateApp => _t('অ্যাপ রেট দিন', 'Rate this App');
  String get contactSupport => _t('সহায়তা যোগাযোগ', 'Contact Support');
  String get contactEmail => 'customerservice@dsmobiles.com';
  String get mailClientError => _t('মেইল ক্লায়েন্ট চালু করা যায়নি।', 'Could not launch mail client.');
  String get storeOpenError => _t('স্টোর খুলতে অক্ষম।', 'Unable to open store.');
  String get viewArticle => _t('নিবন্ধ দেখুন', 'View Article');
  String get loadError => _t('লোড করতে ব্যর্থ', 'Load failed');
  String get noUserConnected => _t('কোনো ব্যবহারকারী সংযুক্ত নেই', 'No user connected yet');
  String get enterEmail => _t('ইমেইল লিখুন', 'Enter your email');
String get save => _t('সংরক্ষণ করুন', 'Save');
String get getFullProfile => _t('পূর্ণ প্রোফাইল পান', 'Get Full Profile');
  String get bangla => _t('বাংলা', 'Bengali');
  String get english => _t('ইংরেজি', 'English');
  String get supports => _t('সাপোর্ট', 'Supports');
  String get health => _t('স্বাস্থ্য', 'Health');
  String get opinion => _t('মতামত', 'Opinion');
  String get about => _t('সম্পর্কে', 'About');
  String get education => _t('শিক্ষা', 'Education');

  // Dynamic Translation Helper
  String _t(String bn, String en) => locale.languageCode == 'bn' ? bn : en;
}

class _AppLocalizationsDelegate extends LocalizationsDelegate<AppLocalizations> {
  const _AppLocalizationsDelegate();

  @override
  bool isSupported(Locale locale) => ['en', 'bn'].contains(locale.languageCode);

  @override
  Future<AppLocalizations> load(Locale locale) async => AppLocalizations(locale);

  @override
  bool shouldReload(covariant LocalizationsDelegate<AppLocalizations> old) => false;
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/tools/upload_data_to_firestore.dart ===

// lib/tools/firebase_upload.dart
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart' show rootBundle;
import 'package:firebase_core/firebase_core.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../firebase_options.dart';

Future<void> uploadDataFromJson() async {
  final jsonString = await rootBundle.loadString('assets/data.json');
  final data = jsonDecode(jsonString);
  final newspapers = data['newspapers'] as List<dynamic>? ?? [];
  final magazines  = data['magazines']  as List<dynamic>? ?? [];

  final firestore = FirebaseFirestore.instance;
  final batch     = firestore.batch();

  for (var item in newspapers) {
    final id = item['id'] as String;
    batch.set(firestore.collection('newspapers').doc(id), item);
  }
  for (var item in magazines) {
    final id = item['id'] as String;
    batch.set(firestore.collection('magazines').doc(id), item);
  }

  await batch.commit();
  print('✅ Upload complete');
}

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  await uploadDataFromJson();
  // Exit the app after upload—no UI needed
  // On Android, this closes the process; on others it just ends.
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/tools/firebase_upload.dart ===

import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'dart:convert';
import 'dart:io';
import 'package:path/path.dart' as p;

Future<void> main(List<String> args) async {
  await Firebase.initializeApp();

  String? targetExtension;
  if (args.isNotEmpty) {
    targetExtension = args[0].startsWith('.') ? args[0].toLowerCase() : '.${args[0].toLowerCase()}';
  }

  await uploadProjectFiles(targetExtension);
}

Future<void> uploadProjectFiles(String? filterExtension) async {
  final Directory projectDir = Directory(Directory.current.path);
  final List<FileSystemEntity> files = await projectDir.list(recursive: true).toList();
  final List<File> filteredFiles = files.whereType<File>().where((file) {
    if (filterExtension == null) return true;
    return p.extension(file.path).toLowerCase() == filterExtension;
  }).toList();

  int totalFiles = filteredFiles.length;
  int uploadedFiles = 0;

  print('Starting upload of $totalFiles files...');

  for (var entity in filteredFiles) {
    final String extension = p.extension(entity.path).toLowerCase();
    final String fileName = p.basename(entity.path);
    final int fileSize = await entity.length();

    try {
      if (['.dart', '.yaml', '.plist'].contains(extension) || (extension == '.json' && fileSize > 100 * 1024)) {
        final ref = FirebaseStorage.instance.ref('source-backups/$fileName');
        await ref.putFile(entity);
        print('Uploaded $fileName to Firebase Storage.');
      } else if (extension == '.json' && fileSize <= 100 * 1024) {
        final String content = await entity.readAsString();
        final Map<String, dynamic> data = jsonDecode(content);
        await FirebaseFirestore.instance.collection('uploaded_data').doc(fileName).set(data);
        print('Uploaded $fileName to Firestore.');
      } else {
        final ref = FirebaseStorage.instance.ref('other-backups/$fileName');
        await ref.putFile(entity);
        print('Uploaded $fileName to other-backups Storage folder.');
      }
    } catch (e) {
      print('Failed to upload $fileName: $e');
    }

    uploadedFiles++;
    double progress = (uploadedFiles / totalFiles) * 100;
    print('Progress: ${progress.toStringAsFixed(2)}%');
  }

  print('All files processed. Upload complete.');
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/routes.dart ===

import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'app_paths.dart';

// Import all screens
import '../../features/splash/splash_screen.dart';
import '../../features/onboarding/onboarding_screen.dart';
import '../../features/profile/login_screen.dart';
import '../../features/profile/signup_screen.dart';
import '../../features/profile/forgot_password_screen.dart';
import '../../features/profile/profile_screen.dart';
import '../../features/profile/edit_profile_screen.dart';
import '../../features/news/newspaper_screen.dart';
import '../../features/magazine/magazine_screen.dart';
import '../../features/favorites/favorites_screen.dart';
import '../../features/about/about_screen.dart';
import '../../features/help/help_screen.dart';
import '../../features/search/search_screen.dart';
import '../../features/news_detail/news_detail_screen.dart';
import '../../features/common/webview_screen.dart';
import '../../features/extras/extras_screen.dart';
import '../../main_navigation_screen.dart';
import '../../data/models/news_article.dart';

class AppRouter {
  static GoRouter createRouter({String initialLocation = AppPaths.splash}) {
    return GoRouter(
      initialLocation: initialLocation,
      errorBuilder: (context, state) {
        debugPrint('Router Error: ${state.error}');
        return const ErrorScreen();
      },
      routes: [
        _fadeRoute(AppPaths.splash, const SplashScreen()),
        _fadeRoute(AppPaths.onboarding, const OnboardingScreen()),
        
        _slideRoute(AppPaths.login, const LoginScreen()),
        _slideRoute(AppPaths.signup, const SignupScreen()),
        _slideRoute(AppPaths.forgotPassword, const ForgotPasswordScreen()),

        _fadeRoute(AppPaths.home, const MainNavigationScreen(selectedTab: 0)),
        _fadeRoute(AppPaths.newspaper, const MainNavigationScreen(selectedTab: 1)),
        _fadeRoute(AppPaths.magazines, const MainNavigationScreen(selectedTab: 2)),
        _fadeRoute(AppPaths.settings, const MainNavigationScreen(selectedTab: 3)),

        _fadeRoute(AppPaths.extras, const ExtrasScreen()),
        _fadeRoute(AppPaths.favorites, const FavoritesScreen()),
        _fadeRoute(AppPaths.about, const AboutScreen()),
        _fadeRoute(AppPaths.supports, const HelpScreen()),
        _fadeRoute(AppPaths.search, const SearchScreen()),

        _slideRoute(AppPaths.profile, const ProfileScreen()),
        _slideRoute(AppPaths.editProfile, const EditProfileScreen()),

        GoRoute(
          path: AppPaths.newsDetail,
          pageBuilder: (context, state) => _scalePage(
            child: NewsDetailScreen(news: state.extra as NewsArticle),
            key: state.pageKey,
          ),
        ),

        GoRoute(
          path: AppPaths.webview,
          name: 'webview',
          pageBuilder: (context, state) {
            final args = state.extra;
            if (args is Map<String, dynamic> && args.containsKey('url')) {
              return _scalePage(
                child: WebViewScreen(
                  url: args['url'] as String,
                  title: args['title'] as String? ?? 'Web View',
                ),
                key: state.pageKey,
              );
            } else {
              return MaterialPage(key: state.pageKey, child: const ErrorScreen());
            }
          },
        ),
      ],
    );
  }

  /// Fade transition route
  static GoRoute _fadeRoute(String path, Widget child) {
    return GoRoute(
      path: path,
      pageBuilder: (context, state) => CustomTransitionPage(
        key: state.pageKey,
        child: child,
        transitionsBuilder: (context, animation, secondaryAnimation, child) =>
            FadeTransition(opacity: animation, child: child),
      ),
    );
  }

  /// Slide from right route
  static GoRoute _slideRoute(String path, Widget child) {
    return GoRoute(
      path: path,
      pageBuilder: (context, state) => CustomTransitionPage(
        key: state.pageKey,
        child: child,
        transitionsBuilder: (context, animation, secondaryAnimation, child) =>
            SlideTransition(
              position: Tween<Offset>(
                begin: const Offset(1, 0),
                end: Offset.zero,
              ).animate(animation),
              child: child,
            ),
      ),
    );
  }

  /// Scale transition page (for detail screens)
  static CustomTransitionPage _scalePage({required Widget child, required LocalKey key}) {
    return CustomTransitionPage(
      key: key,
      child: child,
      transitionsBuilder: (context, animation, secondaryAnimation, child) =>
          ScaleTransition(
            scale: Tween<double>(begin: 0.9, end: 1).animate(animation),
            child: child,
          ),
    );
  }
}

class ErrorScreen extends StatelessWidget {
  const ErrorScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return Scaffold(
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.error_outline, size: 80, color: theme.colorScheme.error),
            const SizedBox(height: 16),
            Text(
              'Oops! Something went wrong.',
              style: theme.textTheme.titleLarge,
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/app_paths.dart ===

/// Holds all route path constants for navigation
class AppPaths {
  static const String splash = '/splash';
  static const String onboarding = '/onboarding';
  static const String login = '/login';
  static const String signup = '/signup';
  static const String forgotPassword = '/forgot-password';
  static const String home = '/home';
  static const String newspaper = '/newspaper';
  static const String magazines = '/magazines';
  static const String settings = '/settings';
  static const String extras = '/extras';
  static const String favorites = '/favorites';
  static const String about = '/about';
  static const String supports = '/supports';
  static const String search = '/search';
  static const String profile = '/profile';
  static const String editProfile = '/edit-profile';
  static const String newsDetail = '/news-detail';
  static const String webview = '/webview';
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/utils.dart ===

// File: lib/utils/date_time_utils.dart

import 'package:intl/intl.dart';

class DateTimeUtils {
  /// Returns current date in format like: Monday, April 7, 2025
  static String getCurrentDate() {
    return DateFormat.yMMMMEEEEd().format(DateTime.now());
  }

  /// Returns current time in format like: 5:30 PM
  static String getCurrentTime() {
    return DateFormat.jm().format(DateTime.now());
  }

  /// Formats any DateTime object to a readable string.
  static String formatDateTime(DateTime dateTime, {String pattern = 'yMMMMEEEEd'}) {
    return DateFormat(pattern).format(dateTime);
  }

  /// Returns a human-readable "time ago" or "in time" format.
  static String timeAgo(
    DateTime dateTime, {
    String minute = 'minute',
    String hour = 'hour',
    String day = 'day',
    String week = 'week',
    String month = 'month',
    String year = 'year',
    String ago = 'ago',
    String inPrefix = 'In',
    String justNow = 'Just now',
    String fewSeconds = 'In a few seconds',
  }) {
    final Duration diff = DateTime.now().difference(dateTime);

    if (diff.inSeconds.abs() < 60) return diff.isNegative ? fewSeconds : justNow;
    if (diff.inMinutes.abs() < 60) {
      final int minutes = diff.inMinutes.abs();
      return diff.isNegative
          ? '$inPrefix $minutes $minute${minutes == 1 ? '' : 's'}'
          : '$minutes $minute${minutes == 1 ? '' : 's'} $ago';
    }
    if (diff.inHours.abs() < 24) {
      final int hours = diff.inHours.abs();
      return diff.isNegative
          ? '$inPrefix $hours $hour${hours == 1 ? '' : 's'}'
          : '$hours $hour${hours == 1 ? '' : 's'} $ago';
    }
    if (diff.inDays.abs() < 7) {
      final int days = diff.inDays.abs();
      return diff.isNegative
          ? '$inPrefix $days $day${days == 1 ? '' : 's'}'
          : '$days $day${days == 1 ? '' : 's'} $ago';
    }
    if (diff.inDays.abs() < 30) {
      final int weeks = (diff.inDays.abs() / 7).floor();
      return diff.isNegative
          ? '$inPrefix $weeks $week${weeks == 1 ? '' : 's'}'
          : '$weeks $week${weeks == 1 ? '' : 's'} $ago';
    }
    if (diff.inDays.abs() < 365) {
      final int months = (diff.inDays.abs() / 30).floor();
      return diff.isNegative
          ? '$inPrefix $months $month${months == 1 ? '' : 's'}'
          : '$months $month${months == 1 ? '' : 's'} $ago';
    }
    final int years = (diff.inDays.abs() / 365).floor();
    return diff.isNegative
        ? '$inPrefix $years $year${years == 1 ? '' : 's'}'
        : '$years $year${years == 1 ? '' : 's'} $ago';
  }
}

class StringUtils {
  /// Capitalizes the first letter of a string.
  static String capitalize(String text) {
    if (text.isEmpty) return text;
    return text[0].toUpperCase() + text.substring(1);
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/utils/favorites_manager.dart ===

// lib/core/utils/favorites_manager.dart

import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import '../../data/models/news_article.dart';

class FavoritesManager {
  static final FavoritesManager _instance = FavoritesManager._internal();
  FavoritesManager._internal();
  static FavoritesManager get instance => _instance;

  static const String favoritesKey = 'favorites';
  static const String magazineFavoritesKey = 'magazine_favorites';
  static const String newspaperFavoritesKey = 'newspaper_favorites';

  List<NewsArticle> _favoriteArticles = [];
  List<Map<String, dynamic>> _favoriteMagazines = [];
  List<Map<String, dynamic>> _favoriteNewspapers = [];

  List<NewsArticle> get favoriteArticles => _favoriteArticles;
  List<Map<String, dynamic>> get favoriteMagazines => _favoriteMagazines;
  List<Map<String, dynamic>> get favoriteNewspapers => _favoriteNewspapers;

  Future<void> loadFavorites() async {
    final prefs = await SharedPreferences.getInstance();
    final articleJson       = prefs.getStringList(favoritesKey) ?? [];
    final magazineJson      = prefs.getStringList(magazineFavoritesKey) ?? [];
    final newspaperJson     = prefs.getStringList(newspaperFavoritesKey) ?? [];

    _favoriteArticles = articleJson
        .map((str) => NewsArticle.fromMap(json.decode(str)))
        .toList();

    _favoriteMagazines = magazineJson
        .map((str) => Map<String, dynamic>.from(json.decode(str)))
        .toList();

    _favoriteNewspapers = newspaperJson
        .map((str) => Map<String, dynamic>.from(json.decode(str)))
        .toList();
  }

  // -------------------------
  // Articles

  Future<void> addFavorite(NewsArticle article) async {
    final prefs = await SharedPreferences.getInstance();
    _favoriteArticles.add(article);
    await prefs.setStringList(
      favoritesKey,
      _favoriteArticles.map((e) => json.encode(e.toMap())).toList(),
    );
  }

  Future<void> removeFavorite(NewsArticle article) async {
    final prefs = await SharedPreferences.getInstance();
    _favoriteArticles.removeWhere((e) => e.url == article.url);
    await prefs.setStringList(
      favoritesKey,
      _favoriteArticles.map((e) => json.encode(e.toMap())).toList(),
    );
  }

  /// Toggle article in favorites (add if missing, remove if already favorited)
  Future<void> toggleArticle(NewsArticle article) async {
    final prefs = await SharedPreferences.getInstance();
    final exists = _favoriteArticles.any((e) => e.url == article.url);
    if (exists) {
      _favoriteArticles.removeWhere((e) => e.url == article.url);
    } else {
      _favoriteArticles.add(article);
    }
    await prefs.setStringList(
      favoritesKey,
      _favoriteArticles.map((e) => json.encode(e.toMap())).toList(),
    );
  }

  /// Check synchronously if an article is favorited
  bool isFavoriteArticle(NewsArticle article) {
    return _favoriteArticles.any((e) => e.url == article.url);
  }

  // -------------------------
  // Magazines

  Future<void> toggleMagazine(Map<String, dynamic> magazine) async {
    final prefs = await SharedPreferences.getInstance();
    final id     = magazine['id'].toString();
    final isFav  = _favoriteMagazines.any((m) => m['id'].toString() == id);

    if (isFav) {
      _favoriteMagazines.removeWhere((m) => m['id'].toString() == id);
    } else {
      _favoriteMagazines.add(magazine);
    }

    await prefs.setStringList(
      magazineFavoritesKey,
      _favoriteMagazines.map((m) => json.encode(m)).toList(),
    );
  }

  bool isFavoriteMagazine(String id) {
    return _favoriteMagazines.any((m) => m['id'].toString() == id);
  }

  // -------------------------
  // Newspapers

  Future<void> toggleNewspaper(Map<String, dynamic> newspaper) async {
    final prefs = await SharedPreferences.getInstance();
    final id     = newspaper['id'].toString();
    final isFav  = _favoriteNewspapers.any((n) => n['id'].toString() == id);

    if (isFav) {
      _favoriteNewspapers.removeWhere((n) => n['id'].toString() == id);
    } else {
      _favoriteNewspapers.add(newspaper);
    }

    await prefs.setStringList(
      newspaperFavoritesKey,
      _favoriteNewspapers.map((n) => json.encode(n)).toList(),
    );
  }

  bool isFavoriteNewspaper(String id) {
    return _favoriteNewspapers.any((n) => n['id'].toString() == id);
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/utils/og_image_fetcher.dart ===

import 'package:html/dom.dart';
import 'package:http/http.dart' as http;
import 'package:html/parser.dart' as html_parser;

/// Fetches the best available image from a webpage (og:image or twitter:image).
Future<String?> fetchBestImageFromUrl(String url) async {
  try {
    final http.Response response = await http.get(Uri.parse(url));

    if (response.statusCode == 200) {
      final Document document = html_parser.parse(response.body);

      // Try Open Graph image first
      final Element? ogImageMeta = document.querySelector('meta[property="og:image"]');
      if (ogImageMeta != null && ogImageMeta.attributes['content'] != null) {
        return ogImageMeta.attributes['content'];
      }

      // Fallback: Try Twitter Card image
      final Element? twitterImageMeta = document.querySelector('meta[name="twitter:image"]');
      if (twitterImageMeta != null && twitterImageMeta.attributes['content'] != null) {
        return twitterImageMeta.attributes['content'];
      }
    }
    return null; // No image found
  } catch (e) {
    print('⚠️ Error fetching image: $e');
    return null;
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/utils/source_logos.dart ===

// path: lib/data/constants/source_logos.dart

class SourceLogos {
  static const Map<String, String> logos = {
    // ─── Bengali Newspapers ───
    'প্রথম আলো': 'assets/logos/prothomalo.png',
    'কালের কণ্ঠ': 'assets/logos/kalerkantho.png',
    'বিডিনিউজ২৪ বাংলা': 'assets/logos/bdnews24.png',
    'যুগান্তর': 'assets/logos/jugantor.png',
    'ইত্তেফাক': 'assets/logos/ittefaq.png',
    'আনন্দবাজার পত্রিকা': 'assets/logos/anandabazar.png',
    'এই সময়': 'assets/logos/eisamay.png',
    'সংবাদ প্রতিদিন': 'assets/logos/sangbadpratidin.png',
    'সমকাল': 'assets/logos/samakal.png',
    'বণিক বার্তা': 'assets/logos/bonikbarta.png',
    'ঢাকা টাইমস': 'assets/logos/dhakatimes.png',
    'গেজেটবিডি': 'assets/logos/gazetebd.png',
    'টেক শহর': 'assets/logos/techshohor.png',
    'প্রিয়.কম': 'assets/logos/priyo.png',
    'রোর বাংলা': 'assets/logos/roarbangla.png',

    // ─── English Newspapers ───
    'CNN Top Stories': 'assets/logos/cnn.png',
    'BBC World News': 'assets/logos/bbc.png',
    'Reuters Top News': 'assets/logos/reuters.png',
    'The Guardian World': 'assets/logos/guardian.png',
    'Dhaka Tribune': 'assets/logos/dhakatribune.png',
    'Daily Star National': 'assets/logos/dailystar.png',
    'New York Times US': 'assets/logos/nytimes.png',
    'Financial Times': 'assets/logos/ft.png',
    'Forbes': 'assets/logos/forbes.png',
    'Bloomberg Business': 'assets/logos/bloomberg.png',
    'Sky Sports': 'assets/logos/skysports.png',
    'ESPN Top Sports': 'assets/logos/espn.png',
    'BBC Sports': 'assets/logos/bbc_sports.png',

    // ─── Tech ───
    'TechCrunch': 'assets/logos/techcrunch.png',
    'Ars Technica': 'assets/logos/arstechnica.png',
    'The Verge Tech': 'assets/logos/theverge.png',

    // ─── Entertainment ───
    'Billboard': 'assets/logos/billboard.png',
    'Variety': 'assets/logos/variety.png',
    'Hollywood Reporter': 'assets/logos/hollywoodreporter.png',

    // ─── Lifestyle & Blog ───
    'Lifehack': 'assets/logos/lifehack.png',
    'MindBodyGreen': 'assets/logos/mindbodygreen.png',
    'VeryWell Health': 'assets/logos/verywellhealth.png',
    'Medium Technology': 'assets/logos/medium.png',
    'Dev.to': 'assets/logos/devto.png',
    'Hashnode Blogs': 'assets/logos/hashnode.png',

    // ─── Magazines / Bonus Sources ───
    'Roar বাংলা': 'assets/logos/roarbangla.png',
    'Amar Bangla BD': 'assets/logos/amarbanglabd.png',
    'TBS News': 'assets/logos/tbsnews.png',
    'BD24Live': 'assets/logos/bd24live.png',
  };
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/navigation_helper.dart ===

import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';

class NavigationHelper {
  static void goHome(BuildContext context) {
    context.go('/home');
  }

  static void goNewspaper(BuildContext context) {
    context.go('/newspaper');
  }

  static void goMagazines(BuildContext context) {
    context.go('/magazines');
  }

  static void goSettings(BuildContext context) {
    context.go('/settings');
  }

  static void goFavorites(BuildContext context) {
    context.go('/favorites');
  }

  static void goAbout(BuildContext context) {
    context.go('/about');
  }

  static void goHelp(BuildContext context) {
    context.go('/supports');
  }

  static void goSearch(BuildContext context) {
    context.go('/search');
  }

  static void goProfile(BuildContext context) {
    context.go('/profile');
  }

  static void goEditProfile(BuildContext context) {
    context.go('/edit_profile');
  }

  static void goLogin(BuildContext context) {
    context.go('/login');
  }

  static void goSignup(BuildContext context) {
    context.go('/signup');
  }

  static void goForgotPassword(BuildContext context) {
    context.go('/forgot-password');
  }

  static void goWebView(BuildContext context, {required String url, String? title}) {
    context.go('/webview', extra: {'url': url, 'title': title ?? 'Web View'});
  }

  static void goNewsDetail(BuildContext context, dynamic article) {
    context.go('/news-detail', extra: article);
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/language_provider.dart ===

import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

class LanguageProvider extends ChangeNotifier {
  static const String _languageKey = 'languageCode';

  Locale _locale = const Locale('en');
  Locale get locale => _locale;

  LanguageProvider() {
    _loadLocale();
  }

  Future<void> _loadLocale() async {
    final prefs = await SharedPreferences.getInstance();
    final storedCode = prefs.getString(_languageKey);
    if (storedCode != null && storedCode != _locale.languageCode) {
      _locale = Locale(storedCode);
      notifyListeners();
    }
  }

  Future<void> setLocale(String code) async {
    if (code == _locale.languageCode) return;
    _locale = Locale(code);
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_languageKey, code);
    notifyListeners();
  }

  Future<void> resetLocale() async {
    _locale = const Locale('en');
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove(_languageKey);
    notifyListeners();
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/splash_service.dart ===

// lib/core/splash_service.dart
import 'package:shared_preferences/shared_preferences.dart';

class SplashService {
  final SharedPreferences prefs;

  SplashService({required this.prefs});

  static const String onboardingCompletedKey = 'onboardingCompleted';
  static const String isLoggedInKey = 'isLoggedIn';

  Future<String> resolveInitialRoute() async {
    final hasSeenOnboarding = prefs.getBool(onboardingCompletedKey) ?? false;
    final isLoggedIn = prefs.getBool(isLoggedInKey) ?? false;

    if (!hasSeenOnboarding) {
      return '/onboarding';
    } else if (!isLoggedIn) {
      return '/login';
    } else {
      return '/home';
    }
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/theme_provider.dart ===

// lib/core/theme_provider.dart
import 'package:flutter/material.dart';

/// Defines the available theme modes for the app.
enum AppThemeMode {
  light,
  dark,
  bangladesh,
}

/// Provides theme state management for the app.
class ThemeProvider with ChangeNotifier {
  AppThemeMode _currentTheme = AppThemeMode.light;

  /// Returns the current app theme mode.
  AppThemeMode get appThemeMode => _currentTheme;

  /// Returns the corresponding [ThemeMode] based on [AppThemeMode].
  ThemeMode get themeMode {
    switch (_currentTheme) {
      case AppThemeMode.dark:
        return ThemeMode.dark;
      case AppThemeMode.bangladesh:
        return ThemeMode.dark; // Bangladesh theme is also dark styled
      case AppThemeMode.light:
      default:
        return ThemeMode.light;
    }
  }

  /// Changes the app theme to the given [AppThemeMode].
  void toggleTheme(AppThemeMode mode) {
    if (_currentTheme != mode) {
      _currentTheme = mode;
      notifyListeners();
    }
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/constants.dart ===

import 'package:flutter/material.dart';

// Goku Siyan Mode Activated!
// Unleash the energy with these legendary constants for colors, sizes, and icons.

// AppColors: Our palette of super-powered hues.
class AppColors {
  // A dazzling light primary color, like the flash of a Kamehameha!
  static const Color primaryLight = Color(0xFF007BFF);
  // A deep, mysterious dark primary color, perfect for intense battles.
  static const Color primaryDark = Color(0xFF121212);
  // An accent color that sparks energy and power—unleash your inner spirit!
  static const Color accent = Color(0xFF00C853);
  // Error color that signals a fight must be won—fight through any challenge!
  static const Color error = Color(0xFFD32F2F);
  // A light background color to illuminate your UI like a Super Saiyan aura.
  static const Color backgroundLight = Color(0xFFF5F5F5);
  // A dark background color to ground your design with powerful depth.
  static const Color backgroundDark = Color(0xFF181818);
}

// AppSizes: The precise measurements that define your battle-ready layout.
class AppSizes {
  // Small padding for those quick, agile moves.
  static const double paddingSmall = 8.0;
  // Medium padding – balanced and steady like a well-trained fighter.
  static const double paddingMedium = 16.0;
  // Large padding to dominate the field, giving you room to shine.
  static const double paddingLarge = 24.0;

  // Corner radius to soften edges—because even warriors need a bit of style.
  static const double cornerRadius = 16.0;
}

// AppIcons: The iconic symbols that drive your UI energy.
class AppIcons {
  // The app's emblem, as bold as a freshly forged legend.
  static const IconData appIcon = Icons.newspaper;
  // Settings icon to fine-tune your Super Saiyan power.
  static const IconData settingsIcon = Icons.settings;
  // Share icon to spread the energy far and wide.
  static const IconData shareIcon = Icons.share;
  // Favorite icon to mark your most epic moments.
  static const IconData favoriteIcon = Icons.favorite;
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/user_service.dart ===

import 'package:cloud_firestore/cloud_firestore.dart';

class UserService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  Future<void> saveUserProfile({
    required String email,
    required String name,
    required String avatarUrl,
  }) async {
    final userDoc = _firestore.collection('users').doc(email);
    await userDoc.set({
      'name': name,
      'email': email,
      'avatar': avatarUrl,
      'updatedAt': FieldValue.serverTimestamp(),
    }, SetOptions(merge: true));
  }

  Future<Map<String, dynamic>?> getUserProfile(String email) async {
    final userDoc = await _firestore.collection('users').doc(email).get();
    return userDoc.exists ? userDoc.data() : null;
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/theme.dart ===

import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';

class AppTheme {
  // ─ Light Theme ───────────────────────────────────────────────────
  static ThemeData buildLightTheme() => ThemeData(
    useMaterial3: true,
    colorScheme: lightColorScheme,
    brightness: Brightness.light,
    scaffoldBackgroundColor: lightColorScheme.background.withOpacity(0.95),
    textTheme: GoogleFonts.poppinsTextTheme().copyWith(
      bodyLarge: const TextStyle(color: Colors.black87, fontSize: 16),
      bodyMedium: const TextStyle(color: Colors.black54, fontSize: 14),
      headlineLarge: const TextStyle(color: Colors.black, fontSize: 28, fontWeight: FontWeight.bold),
      headlineMedium: const TextStyle(color: Colors.black87, fontSize: 22, fontWeight: FontWeight.bold),
      titleLarge: const TextStyle(color: Colors.black, fontSize: 20, fontWeight: FontWeight.bold),
      titleMedium: const TextStyle(color: Colors.black87, fontSize: 18),
      labelLarge: const TextStyle(color: Colors.black87, fontSize: 14),
    ),
    appBarTheme: AppBarTheme(
      backgroundColor: lightColorScheme.surface.withOpacity(0.8),
      foregroundColor: Colors.black,
      elevation: 0,
    ),
    cardTheme: CardTheme(
      color: Colors.white.withOpacity(0.7),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      elevation: 8,
      shadowColor: Colors.black26,
    ),
    inputDecorationTheme: _inputDecorationTheme(lightColorScheme),
    dropdownMenuTheme: _dropdownMenuTheme(lightColorScheme),
  );

  // ─ Dark Theme ────────────────────────────────────────────────────
  static ThemeData buildDarkTheme() => ThemeData(
    useMaterial3: true,
    colorScheme: darkColorScheme.copyWith(
      background: const Color(0xFF121417),
      surface: const Color(0xFF1A1D20),
    ),
    brightness: Brightness.dark,
    scaffoldBackgroundColor: const Color(0xFF121417).withOpacity(0.95),
    textTheme: GoogleFonts.poppinsTextTheme().copyWith(
      bodyLarge: const TextStyle(color: Colors.white70, fontSize: 16),
      bodyMedium: const TextStyle(color: Colors.white60, fontSize: 14),
      headlineLarge: const TextStyle(color: Colors.white, fontSize: 28, fontWeight: FontWeight.bold),
      headlineMedium: const TextStyle(color: Colors.white70, fontSize: 22, fontWeight: FontWeight.bold),
      titleLarge: const TextStyle(color: Colors.white, fontSize: 20, fontWeight: FontWeight.bold),
      titleMedium: const TextStyle(color: Colors.white70, fontSize: 18),
      labelLarge: const TextStyle(color: Colors.white70, fontSize: 14),
    ),
    appBarTheme: const AppBarTheme(
      backgroundColor: Color(0xFF1A1D20),
      foregroundColor: Colors.white,
      elevation: 0,
    ),
    cardColor: const Color(0xFF1C1F22).withOpacity(0.7),
    inputDecorationTheme: _inputDecorationTheme(darkColorScheme),
    dropdownMenuTheme: _dropdownMenuTheme(darkColorScheme),
    iconTheme: const IconThemeData(color: Colors.white70),
  );

  // ─ Bangladesh Theme ───────────────────────────────────────────────
  static ThemeData buildBangladeshTheme() => ThemeData(
    useMaterial3: true,
    colorScheme: bangladeshColorScheme,
    brightness: Brightness.dark,
    scaffoldBackgroundColor: bangladeshColorScheme.background.withOpacity(0.95),
    textTheme: GoogleFonts.poppinsTextTheme().copyWith(
      bodyLarge: const TextStyle(color: Colors.white70, fontSize: 16),
      bodyMedium: const TextStyle(color: Colors.white60, fontSize: 14),
      headlineLarge: const TextStyle(color: Colors.white, fontSize: 28, fontWeight: FontWeight.bold),
      headlineMedium: const TextStyle(color: Colors.white70, fontSize: 22, fontWeight: FontWeight.bold),
      titleLarge: const TextStyle(color: Colors.white, fontSize: 20, fontWeight: FontWeight.bold),
      titleMedium: const TextStyle(color: Colors.white70, fontSize: 18),
      labelLarge: const TextStyle(color: Colors.white70, fontSize: 14),
    ),
    appBarTheme: AppBarTheme(
      backgroundColor: bangladeshColorScheme.surface.withOpacity(0.8),
      foregroundColor: Colors.white,
      elevation: 0,
    ),
    cardTheme: CardTheme(
      color: bangladeshColorScheme.surface.withOpacity(0.7),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(16),
        side: BorderSide(color: bangladeshColorScheme.primary, width: 1),
      ),
      elevation: 8,
      shadowColor: Colors.black45,
    ),
    inputDecorationTheme: _inputDecorationTheme(bangladeshColorScheme),
    dropdownMenuTheme: _dropdownMenuTheme(bangladeshColorScheme),
    iconTheme: const IconThemeData(color: Colors.white70),
  );

  // ─ Common Input Decoration ──────────────────────────────────────
  static InputDecorationTheme _inputDecorationTheme(ColorScheme scheme) {
    return InputDecorationTheme(
      filled: true,
      fillColor: scheme.brightness == Brightness.dark
          ? scheme.surface.withOpacity(0.5)
          : Colors.white,
      border: OutlineInputBorder(
        borderRadius: BorderRadius.circular(12),
        borderSide: BorderSide.none,
      ),
      focusedBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(12),
        borderSide: BorderSide(
          color: scheme.secondary,
          width: 2,
        ),
      ),
      hintStyle: TextStyle(
        color: scheme.brightness == Brightness.dark
            ? Colors.white60
            : Colors.black54,
      ),
      labelStyle: TextStyle(
        color: scheme.brightness == Brightness.dark
            ? Colors.white
            : Colors.black87,
        fontWeight: FontWeight.bold,
      ),
      floatingLabelStyle: TextStyle(
        color: scheme.brightness == Brightness.dark
            ? Colors.white
            : scheme.primary,
      ),
    );
  }

  // ─ Dropdown Menu Theme ──────────────────────────────────────────
  static DropdownMenuThemeData _dropdownMenuTheme(ColorScheme scheme) {
  return DropdownMenuThemeData(
    menuStyle: MenuStyle(
      backgroundColor: MaterialStateProperty.all(
        scheme.brightness == Brightness.dark
            ? scheme.surface.withOpacity(0.8)
            : Colors.white,
      ),
      shape: MaterialStateProperty.all(
        RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(12),
        ),
      ),
    ),
  );
}

}

// ─ Color Schemes ─────────────────────────────────────────────────
final ColorScheme lightColorScheme = ColorScheme.light(
  primary: const Color(0xFF1565C0),
  secondary: const Color(0xFF42A5F5),
  background: const Color(0xFFF5F5F5),
  surface: const Color(0xFFFFFFFF),
);

final ColorScheme darkColorScheme = ColorScheme.dark(
  primary: const Color(0xFF42A5F5),
  secondary: const Color(0xFF1565C0),
  background: const Color(0xFF121417),
  surface: const Color(0xFF1A1D20),
);

final ColorScheme bangladeshColorScheme = ColorScheme.dark(
  primary: const Color(0xFF00796B),
  secondary: const Color(0xFF004D40),
  background: const Color(0xFF121417),
  surface: const Color(0xFF1A1D20),
);


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/settings/settings_screen.dart ===

// lib/features/settings/settings_screen.dart

import 'dart:ui' show ImageFilter;
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:package_info_plus/package_info_plus.dart';
import 'package:flutter_cache_manager/flutter_cache_manager.dart';

import '../../core/theme_provider.dart';
import '../../core/language_provider.dart';
import '../../localization/l10n/app_localizations.dart';
import '../../widgets/app_drawer.dart';
import '../../features/common/appBar.dart';

class SettingsScreen extends StatefulWidget {
  const SettingsScreen({Key? key}) : super(key: key);

  @override
  State<SettingsScreen> createState() => _SettingsScreenState();
}

class _SettingsScreenState extends State<SettingsScreen> {
  String _version = '';
  bool _isClearingCache = false;

  @override
  void initState() {
    super.initState();
    _loadVersion();
  }

  Future<void> _loadVersion() async {
    final info = await PackageInfo.fromPlatform();
    if (!mounted) return;
    setState(() => _version = info.version);
  }

  Future<void> _rateApp() async {
    final loc = AppLocalizations.of(context)!;
    final uri = Uri.parse('https://play.google.com/store/apps/details?id=com.example.droid');
    if (!await launchUrl(uri)) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(loc.storeOpenError)),
      );
    }
  }

  Future<void> _clearCache() async {
    setState(() => _isClearingCache = true);
    await DefaultCacheManager().emptyCache();
    if (!mounted) return;
    setState(() => _isClearingCache = false);
    final loc = AppLocalizations.of(context)!;
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(loc.clearCacheSuccess)),
    );
  }

  Future<void> _contactSupport() async {
    final loc = AppLocalizations.of(context)!;
    final uri = Uri.parse('mailto:${loc.contactEmail}');
    if (!await launchUrl(uri)) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(loc.mailClientError)),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final themeProv = context.watch<ThemeProvider>();
    final langProv = context.watch<LanguageProvider>();
    final mode = themeProv.appThemeMode;
    final theme = Theme.of(context);
    final textColor = theme.textTheme.bodyLarge?.color ?? Colors.white;

    // pick gradient colors & background asset
    late Color startColor, endColor;
    late String bgAsset;
    switch (mode) {
      case AppThemeMode.dark:
        startColor = const Color(0xFF1C1F22);
        endColor   = const Color(0xFF121417);
        bgAsset    = 'assets/theme/Settings_dark.png';
        break;
      case AppThemeMode.bangladesh:
        startColor = const Color(0xFF004D40);
        endColor   = const Color(0xFF00796B);
        bgAsset    = 'assets/theme/Settings_desh.png';
        break;
      case AppThemeMode.light:
      default:
        startColor = const Color(0xFF1565C0);
        endColor   = const Color(0xFF42A5F5);
        bgAsset    = 'assets/theme/Settings_light.png';
        break;
    }

    // glass panel builder
    Widget glassSection({required Widget child}) => Container(
      margin: const EdgeInsets.symmetric(vertical: 16),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(24),
        border: Border.all(color: startColor.withOpacity(0.5), width: 1.5),
        boxShadow: [
          BoxShadow(color: startColor.withOpacity(0.3), blurRadius: 20, spreadRadius: 1),
        ],
      ),
      child: ClipRRect(
        borderRadius: BorderRadius.circular(24),
        child: BackdropFilter(
          filter: ImageFilter.blur(sigmaX: 25, sigmaY: 25),
          child: Container(
            padding: const EdgeInsets.all(20),
            color: Colors.white.withOpacity(0.10),
            child: child,
          ),
        ),
      ),
    );

    Widget themeButton(AppThemeMode value, IconData icon, String label) {
      final selected = mode == value;
      return Expanded(
        child: GestureDetector(
          onTap: () => themeProv.toggleTheme(value),
          child: Container(
            padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 8),
            decoration: BoxDecoration(
              gradient: selected ? LinearGradient(colors: [startColor, endColor]) : null,
              border: Border.all(color: selected ? endColor : Colors.white24, width: 2),
              borderRadius: BorderRadius.circular(16),
            ),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Icon(icon, color: selected ? Colors.white : textColor),
                const SizedBox(height: 4),
                Text(label,
                  textAlign: TextAlign.center,
                  style: TextStyle(
                    color: selected ? Colors.white : textColor,
                    fontWeight: selected ? FontWeight.bold : FontWeight.normal,
                  ),
                ),
              ],
            ),
          ),
        ),
      );
    }

    Widget langButton(String code, String label) {
      final selected = langProv.locale.languageCode == code;
      return Expanded(
        child: GestureDetector(
          onTap: () => langProv.setLocale(code),
          child: Container(
            padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 8),
            decoration: BoxDecoration(
              gradient: selected ? LinearGradient(colors: [startColor, endColor]) : null,
              border: Border.all(color: selected ? endColor : Colors.white24, width: 2),
              borderRadius: BorderRadius.circular(16),
            ),
            child: Text(label,
              textAlign: TextAlign.center,
              style: TextStyle(
                color: selected ? Colors.white : textColor,
                fontWeight: selected ? FontWeight.bold : FontWeight.normal,
              ),
            ),
          ),
        ),
      );
    }

    return Scaffold(
      extendBodyBehindAppBar: true,
      backgroundColor: Colors.transparent,
      drawer: const AppDrawer(),
      appBar: AppBar(
        centerTitle: true,
        backgroundColor: Colors.transparent,
        elevation: 0,
        title: AppBarTitle(loc.settings),
        flexibleSpace: ClipRect(
          child: BackdropFilter(
            filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20),
            child: const SizedBox.expand(),
          ),
        ),
      ),
      body: Stack(
        fit: StackFit.expand,
        children: [
          // 1) Full-screen background image
          Image.asset(bgAsset, fit: BoxFit.cover),

          // 2) Clear semi-transparent overlay
          Positioned.fill(
            child: Container(
              color: mode == AppThemeMode.light
                  ? Colors.white.withOpacity(0.2)
                  : Colors.black.withOpacity(0.3),
            ),
          ),

          // 3) Your existing scrollable settings content
          SingleChildScrollView(
            padding: const EdgeInsets.fromLTRB(24, 140, 24, 24),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                glassSection(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(loc.theme,
                        style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold, color: textColor)),
                      const SizedBox(height: 12),
                      Row(children: [
                        themeButton(AppThemeMode.light, Icons.wb_sunny, loc.lightTheme),
                        const SizedBox(width: 8),
                        themeButton(AppThemeMode.dark, Icons.nights_stay, loc.darkTheme),
                        const SizedBox(width: 8),
                        themeButton(AppThemeMode.bangladesh, Icons.flag, loc.bangladeshTheme),
                      ]),
                    ],
                  ),
                ),
                glassSection(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(loc.language,
                        style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold, color: textColor)),
                      const SizedBox(height: 12),
                      Row(children: [
                        langButton('en', 'English'),
                        const SizedBox(width: 8),
                        langButton('bn', 'বাংলা'),
                      ]),
                    ],
                  ),
                ),
                glassSection(child: Center(child: Text(loc.adFree, style: TextStyle(color: textColor)))),
                glassSection(
                  child: Column(children: [
                    ListTile(
                      leading: Icon(Icons.cleaning_services, color: textColor),
                      title: Text(loc.clearCache, style: TextStyle(color: textColor)),
                      trailing: _isClearingCache
                          ? const CircularProgressIndicator()
                          : IconButton(icon: Icon(Icons.delete, color: textColor), onPressed: _clearCache),
                    ),
                    ListTile(
                      leading: Icon(Icons.star_rate, color: textColor),
                      title: Text(loc.rateApp, style: TextStyle(color: textColor)),
                      trailing: IconButton(icon: Icon(Icons.chevron_right, color: textColor), onPressed: _rateApp),
                    ),
                    ListTile(
                      leading: Icon(Icons.support_agent, color: textColor),
                      title: Text(loc.contactSupport, style: TextStyle(color: textColor)),
                      subtitle: Text(loc.contactEmail, style: TextStyle(color: textColor.withOpacity(0.7))),
                      trailing: IconButton(icon: Icon(Icons.chevron_right, color: textColor), onPressed: _contactSupport),
                    ),
                  ]),
                ),
                const SizedBox(height: 16),
                Center(
                  child: Text(
                    '${loc.versionPrefix} $_version',
                    style: TextStyle(color: textColor.withOpacity(0.7), fontStyle: FontStyle.italic),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/home/home_screen.dart ===

// path: lib/features/home/home_screen.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:intl/intl.dart';

import '../../core/theme_provider.dart';
import '../../data/models/news_article.dart';
import '../../data/services/rss_service.dart';
import '../../widgets/app_drawer.dart';
import '../../localization/l10n/app_localizations.dart';
import '../home/widgets/news_card.dart';
import '../home/widgets/shimmer_loading.dart';
import '../../features/common/appBar.dart';
import 'package:go_router/go_router.dart'; // ✅ Needed for navigation

final RouteObserver<ModalRoute<void>> routeObserver = RouteObserver<ModalRoute<void>>();

class HomeScreen extends StatefulWidget {
  const HomeScreen({Key? key}) : super(key: key);

  @override
  HomeScreenState createState() => HomeScreenState();
}

class HomeScreenState extends State<HomeScreen>
    with TickerProviderStateMixin, RouteAware {
  late TabController _tabController;
  final ScrollController _scrollController = ScrollController();

  late List<String> _categoryKeys;
  final Map<String, List<NewsArticle>> _articles = {};
  final Map<String, bool> _loadingStatus = {};
  late Map<String, List<Map<String, String>>> _rssFeeds;
  late Map<String, String> _localizedLabels;
  Locale? _lastLocale;
  DateTime? _lastBackPressed;

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      routeObserver.subscribe(this, ModalRoute.of(context)!);
    });
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    final locale = Localizations.localeOf(context);
    if (_lastLocale == locale) return;
    _lastLocale = locale;

    final loc = AppLocalizations.of(context)!;
    _rssFeeds = RssService.getSafeFeeds(locale) ?? {};
    _categoryKeys = _rssFeeds.keys.toList();

    _localizedLabels = {
      'latest': loc.latest,
      'national': loc.national,
      'business': loc.business,
      'sports': loc.sports,
      'technology': loc.technology,
      'entertainment': loc.entertainment,
      'lifestyle': loc.lifestyle,
      'blog': loc.blog,
    };

    _tabController = TabController(length: _categoryKeys.length, vsync: this)
      ..addListener(_scrollToTop);

    _articles.clear();
    _loadingStatus.clear();
    _loadAllFeeds();
  }

  void _scrollToTop() {
    if (_scrollController.hasClients) {
      _scrollController.jumpTo(0);
    }
    setState(() {});
  }

  @override
  void didPopNext() {
    _tabController.animateTo(0);
    _scrollToTop();
  }

  @override
  void dispose() {
    routeObserver.unsubscribe(this);
    _tabController.dispose();
    _scrollController.dispose();
    super.dispose();
  }

  Future<void> _loadAllFeeds() async {
    for (final key in _categoryKeys) {
      setState(() => _loadingStatus[key] = true);
      try {
        final news = await RssService.fetchRssFeeds(_rssFeeds[key]!,
          context: context, // ✅ Corrected: now passing context
        );
        setState(() {
          _articles[key] = news;
          _loadingStatus[key] = false;
        });
      } catch (e) {
        setState(() => _loadingStatus[key] = false);
      }
    }
  }

  Future<bool> _onWillPop() async {
    final now = DateTime.now();
    if (_lastBackPressed == null || now.difference(_lastBackPressed!) > const Duration(seconds: 2)) {
      _lastBackPressed = now;
      Fluttertoast.showToast(
        msg: "Press back again to exit",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.BOTTOM,
      );
      return false;
    }
    return true;
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final mode = context.watch<ThemeProvider>().appThemeMode;

    Color startColor, endColor;
    if (mode == AppThemeMode.light) {
      startColor = Colors.blue.shade800;
      endColor = Colors.blue.shade400;
    } else if (mode == AppThemeMode.bangladesh) {
      startColor = const Color(0xFF004D40);
      endColor = const Color(0xFF00796B);
    } else {
      startColor = Colors.black87;
      endColor = Colors.grey.shade900;
    }
    final glow = Theme.of(context).colorScheme.primary.withOpacity(0.4);

    if (_categoryKeys.isEmpty) {
      return const Scaffold(
        body: Center(child: CircularProgressIndicator()),
      );
    }

    final currentKey = _categoryKeys[_tabController.index];
    final isLoading = _loadingStatus[currentKey] ?? true;
    final articles = _articles[currentKey] ?? [];

    return WillPopScope(
      onWillPop: _onWillPop,
      child: Scaffold(
        extendBodyBehindAppBar: true,
        backgroundColor: Colors.transparent,
        drawer: const AppDrawer(),
        appBar: AppBar(
          backgroundColor: Colors.transparent,
          elevation: 0,
          centerTitle: true,
          title: const AppBarTitle('BDNewsHub 📰'),
          flexibleSpace: ClipRect(
            child: BackdropFilter(
              filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20),
              child: Container(
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    begin: Alignment.topCenter,
                    end: Alignment.bottomCenter,
                    colors: [
                      startColor.withOpacity(0.8),
                      endColor.withOpacity(0.8),
                      Colors.black.withOpacity(0.2),
                    ],
                  ),
                ),
              ),
            ),
          ),
        ),
        body: Stack(
          fit: StackFit.expand,
          children: [
            if (mode == AppThemeMode.light)
              Positioned.fill(
                child: Image.asset(
                  'assets/theme/homepage_light.png',
                  fit: BoxFit.cover,
                ),
              )
            else if (mode == AppThemeMode.bangladesh)
              Positioned.fill(
                child: Image.asset(
                  'assets/theme/homepage_desh.png',
                  fit: BoxFit.cover,
                ),
              )
            else
              Positioned.fill(
                child: Image.asset(
                  'assets/theme/homepage_dark.png',
                  fit: BoxFit.cover,
                ),
              ),
            SafeArea(
              child: Column(
                children: [
                  const SizedBox(height: 12),
                  _buildDateTimeWidget(),
                  const SizedBox(height: 12),
                  _buildCategoryChips(glow),
                  const SizedBox(height: 8),
                  Expanded(
                    child: isLoading
                        ? const ShimmerLoading()
                        : articles.isEmpty
                            ? Center(child: Text(loc.noArticlesFound))
                            : RefreshIndicator(
                                onRefresh: _loadAllFeeds,
                                child: ListView.builder(
                                  controller: _scrollController,
                                  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                                  itemCount: articles.length,
                                  itemBuilder: (_, idx) => Padding(
                                    padding: const EdgeInsets.symmetric(vertical: 8),
                                    child: NewsCard(
                                      article: articles[idx],
                                      searchQuery: '',
                                      onTap: () {
                                        context.push('/webview', extra: {
                                          'url': articles[idx].url,
                                          'title': articles[idx].title,
                                        });
                                      },
                                    ),
                                  ),
                                ),
                              ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildDateTimeWidget() {
    final now = DateTime.now();
    final timeStr = DateFormat('hh:mm a').format(now);
    final dateStr = DateFormat('dd.MM.yyyy').format(now);

    const batteryPct = 75;
    const location = 'Dhaka';
    const temperature = '30°C';

    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 12),
      child: Container(
        width: double.infinity,
        decoration: BoxDecoration(
          color: Colors.white.withOpacity(0.9),
          borderRadius: BorderRadius.circular(32),
          boxShadow: [
            BoxShadow(
              color: Colors.black12,
              blurRadius: 12,
              spreadRadius: 2,
              offset: Offset(0, 4),
            ),
          ],
        ),
        padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 20),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Row(
              children: [
                const Icon(Icons.battery_full, size: 24, color: Colors.black54),
                const SizedBox(width: 4),
                Text('$batteryPct%',
                    style: const TextStyle(color: Colors.black87, fontWeight: FontWeight.w600)),
                const SizedBox(width: 16),
                const Icon(Icons.access_time, size: 24, color: Colors.black54),
                const SizedBox(width: 16),
                const Icon(Icons.lightbulb_outline, size: 24, color: Colors.black54),
                const Spacer(),
                Text(timeStr,
                    style: const TextStyle(color: Colors.black87, fontSize: 24, fontWeight: FontWeight.bold)),
              ],
            ),
            const SizedBox(height: 12),
            Row(
              children: [
                Text('$location, $temperature',
                    style: const TextStyle(color: Colors.black87, fontSize: 18, fontWeight: FontWeight.w500)),
                const Spacer(),
                Text(dateStr, style: const TextStyle(color: Colors.black54, fontSize: 16)),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildCategoryChips(Color glow) {
    final theme = Theme.of(context);
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 12),
      child: ClipRRect(
        borderRadius: BorderRadius.circular(16),
        child: BackdropFilter(
          filter: ImageFilter.blur(sigmaX: 12, sigmaY: 12),
          child: Container(
            height: 48,
            decoration: BoxDecoration(
              color: theme.colorScheme.surfaceVariant.withOpacity(0.3),
              borderRadius: BorderRadius.circular(16),
              border: Border.all(color: glow),
            ),
            child: ListView.builder(
              scrollDirection: Axis.horizontal,
              itemCount: _categoryKeys.length,
              padding: const EdgeInsets.symmetric(horizontal: 8),
              itemBuilder: (_, i) {
                final key = _categoryKeys[i];
                final label = _localizedLabels[key] ?? key;
                final selected = (_tabController.index == i);
                return Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 6),
                  child: ChoiceChip(
                    label: Text(
                      label,
                      style: TextStyle(
                        fontWeight: FontWeight.w600,
                        color: selected
                            ? theme.colorScheme.onPrimaryContainer
                            : theme.colorScheme.onSurfaceVariant,
                      ),
                    ),
                    selected: selected,
                    backgroundColor: theme.colorScheme.surfaceVariant,
                    selectedColor: theme.colorScheme.primaryContainer,
                    padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(16),
                    ),
                    elevation: selected ? 4 : 0,
                    onSelected: (_) {
                      _tabController.animateTo(i);
                      _scrollController.jumpTo(0);
                    },
                  ),
                );
              },
            ),
          ),
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/home/widgets/stock_exchange_widget.dart ===

import 'dart:async';
import 'package:flutter/material.dart';
import 'package:webview_flutter/webview_flutter.dart';
import 'package:url_launcher/url_launcher.dart';

/// Shows ONLY the live DSE share-price scroll with full error/loading handling.
class StockExchangeWidget extends StatefulWidget {
  /// Height of the widget; default to 150.
  final double height;

  const StockExchangeWidget({Key? key, this.height = 150}) : super(key: key);

  @override
  State<StockExchangeWidget> createState() => _StockExchangeWidgetState();
}

class _StockExchangeWidgetState extends State<StockExchangeWidget> {
  late final WebViewController _controller;
  bool _isLoading = true;
  bool _hasError = false;
  static const _url = 'https://www.dsebd.org/latest_share_price_scroll_l.php';

  @override
  void initState() {
    super.initState();

    // Initialize controller
    _controller = WebViewController()
      ..setJavaScriptMode(JavaScriptMode.unrestricted)
      ..setNavigationDelegate(NavigationDelegate(
        onPageStarted: (_) {
          setState(() {
            _isLoading = true;
            _hasError = false;
          });
        },
        onPageFinished: (_) async {
          // Keep only the first <table>
          await _controller.runJavaScript('''
            (function(){
              const table = document.querySelector('table');
              if (!table) return;
              document.body.innerHTML = '';
              document.body.appendChild(table);
            })();
          ''');
          setState(() {
            _isLoading = false;
          });
        },
        onWebResourceError: (_) {
          setState(() {
            _hasError = true;
            _isLoading = false;
          });
        },
      ))
      ..loadRequest(Uri.parse(_url));
  }

  Future<void> _reload() async {
    setState(() {
      _isLoading = true;
      _hasError = false;
    });
    await _controller.reload();
  }

  Future<void> _openInBrowser() => launchUrl(
        Uri.parse(_url),
        mode: LaunchMode.externalApplication,
      );

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      height: widget.height,
      child: Stack(
        children: [
          // WebView content
          Positioned.fill(
            child: ClipRRect(
              borderRadius: BorderRadius.circular(8),
              child: WebViewWidget(controller: _controller),
            ),
          ),

          // Loading spinner
          if (_isLoading)
            const Center(child: CircularProgressIndicator()),

          // Error UI
          if (_hasError)
            Center(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  const Text('Failed to load DSE data'),
                  const SizedBox(height: 8),
                  ElevatedButton.icon(
                    icon: const Icon(Icons.refresh),
                    label: const Text('Retry'),
                    onPressed: _reload,
                  ),
                ],
              ),
            ),

          // Controls (refresh + browser)
          if (!_isLoading && !_hasError)
            Positioned(
              top: 4,
              right: 4,
              child: Row(
                children: [
                  IconButton(
                    icon: const Icon(Icons.refresh),
                    tooltip: 'Reload',
                    onPressed: _reload,
                  ),
                  IconButton(
                    icon: const Icon(Icons.open_in_new),
                    tooltip: 'Open in browser',
                    onPressed: _openInBrowser,
                  ),
                ],
              ),
            ),
        ],
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/home/widgets/shimmer_list_loader.dart ===

// path: lib/features/home/widgets/shimmer_list_loader.dart

import 'package:flutter/material.dart';
import 'package:shimmer/shimmer.dart';

class ShimmerListLoader extends StatelessWidget {
  const ShimmerListLoader({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return ListView.builder(
      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
      itemCount: 6, // Show 6 placeholders
      itemBuilder: (_, __) => Padding(
        padding: const EdgeInsets.symmetric(vertical: 8),
        child: Shimmer.fromColors(
          baseColor: Colors.grey.shade300,
          highlightColor: Colors.grey.shade100,
          child: Container(
            height: 240,
            decoration: BoxDecoration(
              color: Colors.grey[300],
              borderRadius: BorderRadius.circular(16),
            ),
          ),
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/home/widgets/shimmer_loading.dart ===

import 'package:flutter/material.dart';
import 'package:shimmer/shimmer.dart';

class ShimmerLoading extends StatelessWidget {
  const ShimmerLoading({
    super.key,
    this.height = 150,
    this.width = double.infinity,
    this.borderRadius = 16.0,
    this.margin = const EdgeInsets.all(8.0),
    this.period = const Duration(milliseconds: 1500),
  });

  final double height;
  final double width;
  final double borderRadius;
  final EdgeInsetsGeometry margin;
  final Duration period;

  @override
  Widget build(BuildContext context) {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    final baseColor = isDark ? Colors.grey.shade800 : Colors.grey.shade300;
    final highlightColor = isDark ? Colors.grey.shade700 : Colors.grey.shade100;

    return Card(
      elevation: 6,
      margin: margin,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(borderRadius),
      ),
      child: Shimmer.fromColors(
        baseColor: baseColor,
        highlightColor: highlightColor,
        period: period,
        child: Container(
          width: width,
          height: height,
          decoration: BoxDecoration(
            color: baseColor,
            borderRadius: BorderRadius.circular(borderRadius),
          ),
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/home/widgets/webview_screen.dart ===

import 'package:flutter/material.dart';
import 'package:flutter_inappwebview/flutter_inappwebview.dart';

class WebViewScreen extends StatefulWidget {
  const WebViewScreen({super.key, required this.url});
  final String url;

  @override
  State<WebViewScreen> createState() => _WebViewScreenState();
}

class _WebViewScreenState extends State<WebViewScreen> {
  InAppWebViewController? webViewController;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('View Article')),
      body: InAppWebView(
        initialUrlRequest: URLRequest(url: WebUri(widget.url)),
        onWebViewCreated: (InAppWebViewController controller) => webViewController = controller,
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/home/widgets/news_card.dart ===

// path: lib/features/home/widgets/news_card.dart

import 'package:flutter/material.dart';
import '/core/utils/source_logos.dart';
import '../../../data/models/news_article.dart';

class NewsCard extends StatelessWidget {
  final NewsArticle article;
  final String searchQuery;
  final VoidCallback? onTap;

  const NewsCard({
    Key? key,
    required this.article,
    required this.searchQuery,
    this.onTap,
  }) : super(key: key);

  bool get isBreaking => DateTime.now().difference(article.publishedAt) < const Duration(hours: 6);
  bool get isLive => article.isLive;

  @override
  Widget build(BuildContext context) {
    final logoPath = SourceLogos.logos[article.sourceOverride ?? article.source];

    return GestureDetector(
      onTap: onTap,
      child: Card(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        margin: const EdgeInsets.symmetric(vertical: 8),
        elevation: 4,
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            if (article.imageUrl != null && article.imageUrl!.isNotEmpty)
              ClipRRect(
                borderRadius: const BorderRadius.vertical(top: Radius.circular(16)),
                child: Image.network(
                  article.imageUrl!,
                  width: double.infinity,
                  height: 180,
                  fit: BoxFit.cover,
                  errorBuilder: (_, __, ___) => Container(
                    height: 180,
                    color: Colors.grey.shade200,
                    alignment: Alignment.center,
                    child: const Icon(Icons.image_not_supported_outlined),
                  ),
                ),
              ),
            Padding(
              padding: const EdgeInsets.all(12),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      if (logoPath != null)
                        ClipRRect(
                          borderRadius: BorderRadius.circular(4),
                          child: Image.asset(
                            logoPath,
                            width: 24,
                            height: 24,
                          ),
                        )
                      else
                        const Icon(Icons.public, size: 20, color: Colors.deepPurple),

                      const SizedBox(width: 8),
                      Expanded(
                        child: Text(
                          article.sourceOverride ?? article.source,
                          style: const TextStyle(
                            fontSize: 12,
                            fontWeight: FontWeight.w600,
                            color: Colors.deepPurple,
                          ),
                          maxLines: 1,
                          overflow: TextOverflow.ellipsis,
                        ),
                      ),

                      if (isLive)
                        Container(
                          margin: const EdgeInsets.only(left: 6),
                          padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                          decoration: BoxDecoration(
                            color: Colors.redAccent,
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: const Text(
                            "LIVE ⚡",
                            style: TextStyle(
                              color: Colors.white,
                              fontSize: 10,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        )
                      else if (isBreaking)
                        Container(
                          margin: const EdgeInsets.only(left: 6),
                          padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                          decoration: BoxDecoration(
                            color: Colors.orange,
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: const Text(
                            "BREAKING 🔥",
                            style: TextStyle(
                              color: Colors.white,
                              fontSize: 10,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                    ],
                  ),

                  const SizedBox(height: 8),

                  Text(
                    article.title,
                    style: const TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                    ),
                  ),

                  if (article.snippet.isNotEmpty)
                    Padding(
                      padding: const EdgeInsets.only(top: 8.0),
                      child: Text(
                        article.snippet,
                        style: const TextStyle(
                          fontSize: 14,
                          color: Colors.black87,
                          height: 1.4,
                        ),
                        maxLines: 3,
                        overflow: TextOverflow.ellipsis,
                      ),
                    ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/splash/splash_screen.dart ===

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../../core/splash_service.dart';

class SplashScreen extends StatefulWidget {
  const SplashScreen({super.key});

  @override
  State<SplashScreen> createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen> with TickerProviderStateMixin {
  bool _showLogo = false;
  bool _showText = false;
  late AnimationController _zoomController;
  late Animation<double> _zoomAnimation;

  @override
  void initState() {
    super.initState();

    _zoomController = AnimationController(
      duration: const Duration(milliseconds: 1600),
      vsync: this,
    );
    _zoomAnimation = Tween<double>(begin: 0.7, end: 1.2).animate(
      CurvedAnimation(parent: _zoomController, curve: Curves.easeInOutBack),
    );

    _runAnimations();
    _navigateToNext();
  }

  @override
  void dispose() {
    _zoomController.dispose();
    super.dispose();
  }

  Future<void> _runAnimations() async {
    await Future.delayed(const Duration(milliseconds: 300));
    if (!mounted) return;
    setState(() => _showLogo = true);
    _zoomController.forward();
    await Future.delayed(const Duration(milliseconds: 700));
    if (!mounted) return;
    setState(() => _showText = true);
  }

  Future<void> _navigateToNext() async {
    await Future.delayed(const Duration(seconds: 2));

    final prefs = await SharedPreferences.getInstance();
    final splashService = SplashService(prefs: prefs);
    final nextRoute = await splashService.resolveInitialRoute();

    if (!mounted) return;
    context.go(nextRoute);
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return Scaffold(
      body: Stack(
        fit: StackFit.expand,
        children: [
          Container(
            color: theme.colorScheme.background.withOpacity(0.4),
          ),
          BackdropFilter(
            filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20),
            child: Container(color: Colors.transparent),
          ),
          Center(
            child: AnimatedOpacity(
              opacity: _showLogo ? 1 : 0,
              duration: const Duration(milliseconds: 800),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  ScaleTransition(
                    scale: _zoomAnimation,
                    child: ClipRRect(
                      borderRadius: BorderRadius.circular(24),
                      child: Image.asset(
                        'assets/icons/app-icon.png',
                        width: 120,
                        height: 120,
                        fit: BoxFit.cover,
                      ),
                    ),
                  ),
                  const SizedBox(height: 24),
                  AnimatedOpacity(
                    opacity: _showText ? 1 : 0,
                    duration: const Duration(milliseconds: 600),
                    child: Column(
                      children: [
                        Text(
                          'BDNews',
                          style: theme.textTheme.headlineMedium?.copyWith(
                            fontWeight: FontWeight.bold,
                            letterSpacing: 1.2,
                          ),
                        ),
                        const SizedBox(height: 16),
                        CircularProgressIndicator(
                          strokeWidth: 3,
                          valueColor: AlwaysStoppedAnimation<Color>(
                            theme.colorScheme.primary.withOpacity(0.8),
                          ),
                          backgroundColor: theme.colorScheme.onBackground.withOpacity(0.2),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/news_detail/news_detail_screen.dart ===

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:share_plus/share_plus.dart';
import 'package:provider/provider.dart';
import 'package:cached_network_image/cached_network_image.dart';
import '../../data/models/news_article.dart';
import '../../core/utils/favorites_manager.dart';
import '../../core/theme_provider.dart';
import '../../widgets/app_drawer.dart';

class NewsDetailScreen extends StatefulWidget {
  const NewsDetailScreen({Key? key, required this.news}) : super(key: key);
  final NewsArticle news;

  @override
  State<NewsDetailScreen> createState() => _NewsDetailScreenState();
}

class _NewsDetailScreenState extends State<NewsDetailScreen> {
  bool isFavorite = false;

  @override
  void initState() {
    super.initState();
    _checkFavorite();
  }

  Future<void> _checkFavorite() async {
    final fav = FavoritesManager.instance.favoriteArticles
        .any((a) => a.url == widget.news.url);
    setState(() => isFavorite = fav);
  }

  Future<void> _toggleFavorite() async {
    if (isFavorite) {
      await FavoritesManager.instance.removeFavorite(widget.news);
    } else {
      await FavoritesManager.instance.addFavorite(widget.news);
    }
    _checkFavorite();
  }

  void _shareNews() {
    Share.share('${widget.news.title}\n\n${widget.news.url}');
  }

  @override
  Widget build(BuildContext context) {
    final themeProv = context.watch<ThemeProvider>();
    final mode = themeProv.appThemeMode;
    Color start, end;
    switch (mode) {
      case AppThemeMode.bangladesh:
        start = const Color(0xFF004D40);
        end = const Color(0xFF00796B);
        break;
      case AppThemeMode.dark:
        start = Colors.black87;
        end = Colors.grey.shade900;
        break;
      default:
        start = Colors.blue.shade800;
        end = Colors.blue.shade400;
    }

    return Scaffold(
      drawer: const AppDrawer(),
      extendBodyBehindAppBar: true,
      backgroundColor: Colors.transparent,
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        centerTitle: true,
        title: Text(
          widget.news.source,
          style: const TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
        ),
        flexibleSpace: ClipRect(
          child: BackdropFilter(
            filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20),
            child: Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                  colors: [start.withOpacity(0.8), end.withOpacity(0.8)],
                ),
              ),
            ),
          ),
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.share, color: Colors.white),
            onPressed: _shareNews,
          ),
          IconButton(
            icon: Icon(isFavorite ? Icons.favorite : Icons.favorite_border,
                color: Colors.redAccent),
            onPressed: _toggleFavorite,
          ),
        ],
      ),
      body: ClipRect(
        child: BackdropFilter(
          filter: ImageFilter.blur(sigmaX: 16, sigmaY: 16),
          child: SingleChildScrollView(
            padding: const EdgeInsets.fromLTRB(16, kToolbarHeight + 24, 16, 24),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                if (widget.news.imageUrl != null && widget.news.imageUrl!.isNotEmpty)
                  ClipRRect(
                    borderRadius: BorderRadius.circular(16),
                    child: CachedNetworkImage(
                      imageUrl: widget.news.imageUrl!,
                      placeholder: (context, url) => Container(
                        height: 200,
                        color: Colors.black12,
                        child: const Center(child: CircularProgressIndicator()),
                      ),
                      errorWidget: (context, url, error) => Container(
                        height: 200,
                        color: Colors.black12,
                        child: const Center(child: Icon(Icons.broken_image)),
                      ),
                      height: 200,
                      width: double.infinity,
                      fit: BoxFit.cover,
                    ),
                  ),
                const SizedBox(height: 20),
                Container(
                  decoration: BoxDecoration(
                    color: Colors.white.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(16),
                    border: Border.all(color: Colors.white.withOpacity(0.3)),
                  ),
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        widget.news.title,
                        style: const TextStyle(
                          color: Colors.white,
                          fontSize: 24,
                          fontWeight: FontWeight.bold,
                          shadows: [Shadow(blurRadius: 4, color: Colors.black45)],
                        ),
                      ),
                      const SizedBox(height: 12),
                      Text(
                        widget.news.fullContent.isNotEmpty
                            ? widget.news.fullContent
                            : (widget.news.snippet.isNotEmpty
                                ? widget.news.snippet
                                : 'No content available.'),
                        style: const TextStyle(
                          color: Colors.white70,
                          fontSize: 16,
                          height: 1.5,
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/favorites/favorites_screen.dart ===

// lib/features/favorites/favorites_screen.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:go_router/go_router.dart';

import '../../core/theme_provider.dart';
import '../../core/utils/favorites_manager.dart';
import '../../localization/l10n/app_localizations.dart';
import '../../widgets/app_drawer.dart';
import '../news/widgets/animated_background.dart';
import '../news/widgets/news_card.dart';
import '../magazine/widgets/magazine_card.dart';
import '../../data/models/news_article.dart';

class FavoritesScreen extends StatefulWidget {
  const FavoritesScreen({super.key});

  @override
  State<FavoritesScreen> createState() => _FavoritesScreenState();
}

class _FavoritesScreenState extends State<FavoritesScreen> {
  String _filter = 'All';
  late FavoritesManager _favorites;

  @override
  void initState() {
    super.initState();
    _favorites = FavoritesManager.instance;
    _favorites.loadFavorites().then((_) => setState(() {}));
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final mode = context.watch<ThemeProvider>().appThemeMode;
    final textColor = Theme.of(context).textTheme.bodyLarge?.color ?? Colors.white;

    final categories = ['All', loc.articles, loc.magazines, loc.newspapers];

    return WillPopScope(
      onWillPop: () async {
        context.go('/home');
        return false;
      },
      child: Scaffold(
        drawer: const AppDrawer(),
        appBar: AppBar(
          centerTitle: true,
          title: Text(loc.favorites, style: const TextStyle(fontWeight: FontWeight.bold)),
          leading: IconButton(
            icon: const Icon(Icons.arrow_back),
            onPressed: () => context.go('/home'),
          ),
          flexibleSpace: ClipRect(
            child: BackdropFilter(
              filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20),
              child: Container(color: Colors.transparent),
            ),
          ),
        ),
        body: AnimatedBackground(
          duration: const Duration(seconds: 30),
          overlayOpacity: 0.2,
          child: Column(
            children: [
              // —— Glass Dropdown —— 
              Padding(
                padding: const EdgeInsets.all(12),
                child: _glassSection(
                  context,
                  child: DropdownButton<String>(
                    value: _filter,
                    isExpanded: true,
                    dropdownColor: Theme.of(context).cardColor.withOpacity(0.9),
                    iconEnabledColor: textColor,
                    style: TextStyle(color: textColor, fontWeight: FontWeight.w600),
                    underline: const SizedBox(),
                    items: categories.map((cat) {
                      return DropdownMenuItem(
                        value: cat,
                        child: Text(cat, style: TextStyle(color: textColor)),
                      );
                    }).toList(),
                    onChanged: (val) => setState(() => _filter = val!),
                  ),
                ),
              ),

              // —— Favorite Lists —— 
              Expanded(
                child: RefreshIndicator(
                  onRefresh: () async {
                    await _favorites.loadFavorites();
                    setState(() {});
                  },
                  child: ListView(
                    padding: const EdgeInsets.all(16),
                    children: [
                      if ((_filter == 'All' || _filter == loc.articles) &&
                          _favorites.favoriteArticles.isNotEmpty)
                        _buildSection(
                          context,
                          loc.favoriteArticles,
                          _favorites.favoriteArticles.map((NewsArticle a) {
                            return _glassSection(
                              context,
                              child: NewsCard(
                                news: a.toMap(),
                                searchQuery: '',
                                isFavorite: true,
                                onFavoriteToggle: () {
                                  _favorites.toggleArticle(a);
                                  setState(() {});
                                },
                              ),
                            );
                          }).toList(),
                        ),

                      if ((_filter == 'All' || _filter == loc.magazines) &&
                          _favorites.favoriteMagazines.isNotEmpty)
                        _buildSection(
                          context,
                          loc.favoriteMagazines,
                          _favorites.favoriteMagazines.map((mag) {
                            return _glassSection(
                              context,
                              child: MagazineCard(
                                magazine: mag,
                                isFavorite: true,
                                onFavoriteToggle: () {
                                  _favorites.toggleMagazine(mag);
                                  setState(() {});
                                },
                              ),
                            );
                          }).toList(),
                        ),

                      if ((_filter == 'All' || _filter == loc.newspapers) &&
                          _favorites.favoriteNewspapers.isNotEmpty)
                        _buildSection(
                          context,
                          loc.favoriteNewspapers,
                          _favorites.favoriteNewspapers.map((paper) {
                            return _glassSection(
                              context,
                              child: NewsCard(
                                news: paper,
                                searchQuery: '',
                                isFavorite: true,
                                onFavoriteToggle: () {
                                  _favorites.toggleNewspaper(paper);
                                  setState(() {});
                                },
                              ),
                            );
                          }).toList(),
                        ),

                      if (_favorites.favoriteArticles.isEmpty &&
                          _favorites.favoriteMagazines.isEmpty &&
                          _favorites.favoriteNewspapers.isEmpty)
                        Padding(
                          padding: const EdgeInsets.only(top: 100),
                          child: Center(
                            child: Text(
                              loc.noFavoritesYet,
                              style: TextStyle(color: textColor.withOpacity(0.7)),
                            ),
                          ),
                        ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildSection(BuildContext context, String title, List<Widget> items) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          title,
          style: Theme.of(context).textTheme.headlineSmall
              ?.copyWith(fontWeight: FontWeight.bold, color: Theme.of(context).textTheme.headlineSmall?.color),
        ),
        const SizedBox(height: 8),
        ...items,
        const SizedBox(height: 24),
      ],
    );
  }

  /// Wrap any widget in a frosted-glass / metallic card.
  Widget _glassSection(BuildContext context, {required Widget child}) {
    final glow = Theme.of(context).colorScheme.primary.withOpacity(0.4);
    return ClipRRect(
      borderRadius: BorderRadius.circular(18),
      child: BackdropFilter(
        filter: ImageFilter.blur(sigmaX: 12, sigmaY: 12),
        child: Container(
          width: double.infinity,
          padding: const EdgeInsets.all(8),
          decoration: BoxDecoration(
            color: Colors.white.withOpacity(0.1),
            borderRadius: BorderRadius.circular(18),
            border: Border.all(color: glow, width: 1),
            boxShadow: [BoxShadow(color: glow, blurRadius: 8, offset: const Offset(0, 4))],
          ),
          child: child,
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/favorites/widgets/animated_background.dart ===

// TODO Implement this library.

// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/about/about_screen.dart ===

// lib/features/about/about_screen.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:flutter/services.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:package_info_plus/package_info_plus.dart';
import 'package:go_router/go_router.dart';

import '../../widgets/app_drawer.dart';
import '../news/widgets/animated_background.dart';
import '../../../core/theme_provider.dart';

class AboutScreen extends StatefulWidget {
  const AboutScreen({super.key});

  @override
  State<AboutScreen> createState() => _AboutScreenState();
}

class _AboutScreenState extends State<AboutScreen> {
  String _appVersion = '';

  @override
  void initState() {
    super.initState();
    _loadAppInfo();
  }

  Future<void> _loadAppInfo() async {
    final info = await PackageInfo.fromPlatform();
    setState(() {
      _appVersion = '${info.version} (Build ${info.buildNumber})';
    });
  }

  Future<void> _launchEmail() async {
    final uri = Uri(
      scheme: 'mailto',
      path: 'support@dsmobiles.com',
      queryParameters: {'subject': 'BDNewsHub App Inquiry'},
    );
    if (await canLaunchUrl(uri)) await launchUrl(uri);
  }

  Future<void> _launchWebsite() async {
    final uri = Uri.parse('https://www.dsmobiles.com');
    if (await canLaunchUrl(uri)) {
      await launchUrl(uri, mode: LaunchMode.externalApplication);
    }
  }

  void _copyToClipboard(String text, String label) {
    Clipboard.setData(ClipboardData(text: text));
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('$label copied to clipboard'),
        backgroundColor: Theme.of(context).colorScheme.secondary,
        duration: const Duration(seconds: 2),
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        margin: const EdgeInsets.all(16),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final mode = context.watch<ThemeProvider>().appThemeMode;
    final textColor = theme.textTheme.bodyLarge?.color ?? Colors.white;

    return Scaffold(
      drawer: const AppDrawer(),
      appBar: AppBar(
        centerTitle: true,
        title: const Text('About Us', style: TextStyle(fontWeight: FontWeight.bold)),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => context.go('/home'),
        ),
        flexibleSpace: ClipRect(
          child: BackdropFilter(
            filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20),
            child: Container(color: Colors.transparent),
          ),
        ),
      ),
      body: AnimatedBackground(
        duration: const Duration(seconds: 30),
        overlayOpacity: 0.2,
        child: ListView(
          padding: const EdgeInsets.all(24),
          children: [
            _glassSection(
              context,
              child: Column(
                children: [
                  Container(
                    height: 100,
                    width: 100,
                    decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      border: Border.all(color: theme.colorScheme.primary, width: 2),
                    ),
                    child: ClipOval(
                      child: Image.asset('assets/logo.png', fit: BoxFit.cover),
                    ),
                  ),
                  const SizedBox(height: 12),
                  Text('BDNewsHub',
                      style: theme.textTheme.headlineSmall
                          ?.copyWith(fontWeight: FontWeight.bold, color: textColor)),
                  const SizedBox(height: 6),
                  Text('Real-time News at Your Fingertips',
                      textAlign: TextAlign.center,
                      style: theme.textTheme.bodyMedium
                          ?.copyWith(color: theme.colorScheme.onSurface.withOpacity(0.7))),
                ],
              ),
            ),

            const SizedBox(height: 30),

            _buildContentCard(
              context,
              icon: Icons.auto_stories,
              title: 'Our Story',
              content:
                  'BDNewsHub is the first mobile app by DSMobiles Group, delivering fast and reliable news updates. Our mission is to create free, high-quality apps that inform and empower.',
            ),

            _buildContentCard(
              context,
              icon: Icons.track_changes,
              title: 'Our Vision',
              content:
                  'We envision a world where information is free and universal. Through user-first design and innovative tools, we aim to create digital experiences that inspire.',
            ),

            _buildContentCard(
              context,
              icon: Icons.mail,
              title: 'Contact Us',
              contentWidget: Column(
                children: [
                  _contactRow(
                    context,
                    label: 'support@dsmobiles.com',
                    icon: Icons.email,
                    onTap: _launchEmail,
                  ),
                  const SizedBox(height: 12),
                  _contactRow(
                    context,
                    label: 'www.dsmobiles.com',
                    icon: Icons.language,
                    onTap: _launchWebsite,
                  ),
                ],
              ),
            ),

            const SizedBox(height: 20),

            Center(
              child: Text('Version $_appVersion',
                  style: theme.textTheme.bodySmall?.copyWith(color: textColor)),
            ),
            const SizedBox(height: 4),
            Center(
              child: Text('© ${DateTime.now().year} DreamSD Group',
                  style: theme.textTheme.labelSmall
                      ?.copyWith(color: theme.colorScheme.onSurface.withOpacity(0.5))),
            ),
          ],
        ),
      ),
    );
  }

  /// Frosted-glass panel with glow border/shadow.
  Widget _glassSection(BuildContext context, {required Widget child}) {
    final glow = Theme.of(context).colorScheme.primary.withOpacity(0.4);
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 12),
      child: ClipRRect(
        borderRadius: BorderRadius.circular(18),
        child: BackdropFilter(
          filter: ImageFilter.blur(sigmaX: 14, sigmaY: 14),
          child: Container(
            width: double.infinity,
            padding: const EdgeInsets.all(20),
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.1),
              borderRadius: BorderRadius.circular(18),
              border: Border.all(color: glow, width: 1),
              boxShadow: [BoxShadow(color: glow, blurRadius: 10, offset: const Offset(0, 5))],
            ),
            child: child,
          ),
        ),
      ),
    );
  }

  /// Convenience method for content sections.
  Widget _buildContentCard(
    BuildContext context, {
    required IconData icon,
    required String title,
    String? content,
    Widget? contentWidget,
  }) =>
      _glassSection(
        context,
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Icon(icon, size: 32, color: Theme.of(context).colorScheme.primary),
            const SizedBox(height: 16),
            Text(title,
                style: Theme.of(context)
                    .textTheme
                    .titleMedium
                    ?.copyWith(fontWeight: FontWeight.bold, color: Theme.of(context).textTheme.titleMedium?.color)),
            const SizedBox(height: 10),
            if (content != null)
              Text(content,
                  style: Theme.of(context).textTheme.bodyMedium?.copyWith(height: 1.5, color: Theme.of(context).textTheme.bodyMedium?.color)),
            if (contentWidget != null) contentWidget,
          ],
        ),
      );

  /// Helper for clickable contact links.
  Widget _contactRow(BuildContext context, {required String label, required IconData icon, required VoidCallback onTap}) {
    final theme = Theme.of(context);
    final textColor = theme.textTheme.bodyLarge?.color ?? Colors.white;
    return InkWell(
      onTap: onTap,
      onLongPress: () => _copyToClipboard(label, 'Copied'),
      child: Row(
        children: [
          Icon(icon, color: theme.colorScheme.primary),
          const SizedBox(width: 12),
          Expanded(child: Text(label, style: TextStyle(color: textColor))),
          const Icon(Icons.copy, color: Colors.grey),
        ],
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/search/search_screen.dart ===

// Updated lib/features/search/search_screen.dart

import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../../core/navigation_helper.dart';
import '../../localization/l10n/app_localizations.dart';

class SearchScreen extends StatefulWidget {
  const SearchScreen({super.key});

  @override
  State<SearchScreen> createState() => _SearchScreenState();
}

class _SearchScreenState extends State<SearchScreen> {
  final TextEditingController _searchController = TextEditingController();
  final GlobalKey<AnimatedListState> _listKey = GlobalKey<AnimatedListState>();

  List<String> _searchResults = [];
  List<String> _recentSearches = [];
  bool _isSearching = false;

  @override
  void initState() {
    super.initState();
    _loadRecentSearches();
  }

  Future<void> _loadRecentSearches() async {
    final prefs = await SharedPreferences.getInstance();
    final history = prefs.getStringList('recent_searches') ?? [];
    setState(() => _recentSearches = history);
  }

  Future<void> _saveSearchQuery(String query) async {
    final prefs = await SharedPreferences.getInstance();
    final history = prefs.getStringList('recent_searches') ?? [];
    if (history.contains(query)) history.remove(query);
    history.insert(0, query);
    if (history.length > 10) history.removeLast();
    await prefs.setStringList('recent_searches', history);
  }

  void _onSearch(String query) async {
    if (query.trim().isEmpty) return;

    setState(() => _isSearching = true);
    await Future.delayed(const Duration(milliseconds: 600));

    setState(() {
      _searchResults.clear();
      _isSearching = false;
    });

    final newResults = List.generate(
      5,
      (index) => 'Result for "$query" - Article ${index + 1}',
    );

    for (var result in newResults) {
      _searchResults.add(result);
      _listKey.currentState?.insertItem(_searchResults.length - 1, duration: const Duration(milliseconds: 400));
    }

    await _saveSearchQuery(query);
    await _loadRecentSearches();
  }

  void _clearSearch() {
    for (var i = _searchResults.length - 1; i >= 0; i--) {
      _listKey.currentState?.removeItem(
        i,
        (context, animation) => _buildAnimatedItem(_searchResults[i], animation),
        duration: const Duration(milliseconds: 400),
      );
    }
    _searchResults.clear();
    _searchController.clear();
  }

  Widget _buildAnimatedItem(String item, Animation<double> animation) {
    return SizeTransition(
      sizeFactor: animation,
      child: ListTile(
        leading: const Icon(Icons.article_outlined),
        title: Text(item),
        onTap: () {
          // TODO: Navigate to article detail
        },
      ),
    );
  }

  Widget _buildRecentTile(String query) {
    return ListTile(
      leading: const Icon(Icons.history),
      title: Text(query),
      onTap: () {
        _searchController.text = query;
        _onSearch(query);
      },
    );
  }

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final theme = Theme.of(context);

    return Scaffold(
      appBar: AppBar(
        title: Text(loc.searchHint),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => NavigationHelper.goHome(context),
        ),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            TextField(
              controller: _searchController,
              textInputAction: TextInputAction.search,
              onSubmitted: _onSearch,
              decoration: InputDecoration(
                hintText: loc.searchHint,
                prefixIcon: const Icon(Icons.search),
                suffixIcon: _searchController.text.isNotEmpty
                    ? IconButton(
                        icon: const Icon(Icons.clear),
                        onPressed: _clearSearch,
                      )
                    : null,
                border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),
              ),
            ),
            const SizedBox(height: 20),
            Expanded(
              child: _isSearching
                  ? const Center(child: CircularProgressIndicator())
                  : _searchResults.isNotEmpty
                      ? AnimatedList(
                          key: _listKey,
                          initialItemCount: _searchResults.length,
                          itemBuilder: (context, index, animation) {
                            final item = _searchResults[index];
                            return _buildAnimatedItem(item, animation);
                          },
                        )
                      : ListView(
                          children: [
                            Text(
                              'Recent Searches',
                              style: theme.textTheme.titleMedium,
                            ),
                            const SizedBox(height: 8),
                            ..._recentSearches.map(_buildRecentTile),
                          ],
                        ),
            ),
          ],
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/common/gradient_app_bar.dart ===

// lib/widgets/gradient_app_bar.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '/core/theme_provider.dart';

class GradientAppBar extends StatelessWidget implements PreferredSizeWidget {
  final String title;
  final List<Widget>? actions;
  final bool centerTitle;
  final bool automaticallyImplyLeading;

  const GradientAppBar({
    super.key,
    required this.title,
    this.actions,
    this.centerTitle = true,
    this.automaticallyImplyLeading = true, required IconButton leading,
  });

  @override
  Widget build(BuildContext context) {
    final mode = context.watch<ThemeProvider>().appThemeMode;

    List<Color> appBarColors;
    switch (mode) {
      case AppThemeMode.bangladesh:
        appBarColors = [const Color(0xFF00796B), const Color(0xFF004D40)];
        break;
      case AppThemeMode.dark:
        appBarColors = [Colors.grey.shade900, Colors.black87];
        break;
      default:
        appBarColors = [Colors.blue.shade400, Colors.blue.shade800];
    }

    return AppBar(
      automaticallyImplyLeading: automaticallyImplyLeading,
      centerTitle: centerTitle,
      elevation: 0,
      backgroundColor: Colors.transparent,
      flexibleSpace: ClipRect(
        child: BackdropFilter(
          filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20),
          child: Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: appBarColors,
              ),
            ),
          ),
        ),
      ),
      title: ShaderMask(
        shaderCallback: (bounds) => LinearGradient(colors: appBarColors).createShader(bounds),
        child: Text(
          title,
          style: const TextStyle(
            color: Colors.white,
            fontWeight: FontWeight.bold,
            fontSize: 24,
          ),
        ),
      ),
      actions: actions,
    );
  }

  @override
  Size get preferredSize => const Size.fromHeight(kToolbarHeight);
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/common/webview_screen.dart ===

// lib/features/webview/web_view_screen.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:flutter_inappwebview/flutter_inappwebview.dart';
import 'package:share_plus/share_plus.dart';
import 'package:shared_preferences/shared_preferences.dart';

enum _TranslateEngine { google, bing, deepl }

extension on _TranslateEngine {
  String get label {
    switch (this) {
      case _TranslateEngine.google: return 'Google Translate';
      case _TranslateEngine.bing:   return 'Bing Translator';
      case _TranslateEngine.deepl:  return 'DeepL';
    }
  }
}

class WebViewScreen extends StatefulWidget {
  const WebViewScreen({
    super.key,
    required this.url,
    this.title = 'Web View',
  });

  final String url;
  final String title;

  @override
  State<WebViewScreen> createState() => _WebViewScreenState();
}

class _WebViewScreenState extends State<WebViewScreen> {
  InAppWebViewController? _ctrl;
  late PullToRefreshController _ptrCtrl;
  double _progress = 0, _opacity = 0.4;
  bool _alwaysTranslate = false;
  bool _mobileView     = false;
  bool _ampView        = false;
  static const _translatePref = 'always_translate';
  final _defaultEngine = _TranslateEngine.google;

  @override
  void initState() {
    super.initState();
    _ptrCtrl = PullToRefreshController(onRefresh: () => _ctrl?.reload());
    _loadPrefs();
  }

  Future<void> _loadPrefs() async {
    final p = await SharedPreferences.getInstance();
    setState(() {
      _alwaysTranslate = p.getBool(_translatePref) ?? false;
    });
  }

  Future<void> _setAlwaysTranslate(bool v) async {
    final p = await SharedPreferences.getInstance();
    await p.setBool(_translatePref, v);
    setState(() => _alwaysTranslate = v);
  }

  Future<void> _shareUrl() async {
    final u = await _ctrl?.getUrl();
    if (u != null) Share.share(u.toString());
  }

  Future<void> _bookmarkUrl() async {
    final u = await _ctrl?.getUrl();
    if (u != null) {
      final p = await SharedPreferences.getInstance();
      await p.setString('saved_webview_url', u.toString());
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('URL saved successfully!')),
      );
    }
  }

  Future<void> _translate(_TranslateEngine eng) async {
    final u = await _ctrl?.getUrl();
    if (u == null) return;
    final e = Uri.encodeComponent(u.toString());
    late final String t;
    switch (eng) {
      case _TranslateEngine.google:
        t = 'https://translate.google.com/translate?hl=bn&sl=auto&tl=bn&u=$e';
        break;
      case _TranslateEngine.bing:
        t = 'https://www.bing.com/translator?from=auto&to=bn&text=$e';
        break;
      case _TranslateEngine.deepl:
        t = 'https://www.deepl.com/translator#auto/bn/$e';
        break;
    }
    await _ctrl?.loadUrl(urlRequest: URLRequest(url: WebUri(t)));
  }

  Future<void> _toggleMobileView() async {
    final u = await _ctrl?.getUrl();
    if (u == null) return;
    final target = !_mobileView
      ? 'http://googleweblight.com/i?u=${Uri.encodeComponent(u.toString())}'
      : widget.url;
    await _ctrl?.loadUrl(urlRequest: URLRequest(url: WebUri(target)));
    setState(() => _mobileView = !_mobileView);
  }

  Future<void> _toggleAmpView() async {
    final u = await _ctrl?.getUrl();
    if (u == null) return;
    // simple heuristic: append /amp or ?amp=1
    final orig = u.toString();
    final ampUrl = orig.endsWith('/')
      ? '$orig/amp'
      : orig.contains('?')
        ? '$orig&amp=1'
        : '$orig/amp';
    await _ctrl?.loadUrl(urlRequest: URLRequest(url: WebUri(ampUrl)));
    setState(() => _ampView = !_ampView);
  }

  Color _glass(bool hdr) =>
      Theme.of(context).brightness == Brightness.dark
          ? Colors.black.withOpacity(hdr ? 0.4 : 0.3)
          : (hdr ? Colors.blue : Colors.lightBlue).withOpacity(0.2);
  Color _font() =>
      Theme.of(context).brightness == Brightness.dark ? Colors.white : Colors.black;

  bool _isTranslateDomain(String host) =>
      host.contains('translate.google.com') ||
      host.contains('bing.com/translator')  ||
      host.contains('deepl.com/translator');

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title, style: TextStyle(color: _font(), fontWeight: FontWeight.bold)),
        centerTitle: true,
        backgroundColor: Colors.transparent,
        elevation: 0,
        flexibleSpace: ClipRect(
          child: BackdropFilter(
            filter: ImageFilter.blur(sigmaX: 30, sigmaY: 30),
            child: Container(color: _glass(true).withOpacity(_opacity)),
          ),
        ),
        bottom: PreferredSize(
          preferredSize: const Size.fromHeight(3),
          child: _progress < 1.0
              ? LinearProgressIndicator(value: _progress)
              : const SizedBox(height: 3),
        ),
        actionsIconTheme: IconThemeData(color: _font()),
        actions: [
          // Translate menu
          PopupMenuButton<dynamic>(
            icon: const Icon(Icons.translate),
            tooltip: 'Translate',
            onSelected: (v) {
              if (v is _TranslateEngine)      _translate(v);
              else if (v == 'toggleAlways')  _setAlwaysTranslate(!_alwaysTranslate);
            },
            itemBuilder: (_) => [
              ..._TranslateEngine.values.map((e) => PopupMenuItem(
                    value: e,
                    child: Text(e.label),
                  )),
              const PopupMenuDivider(),
              PopupMenuItem(
                value: 'toggleAlways',
                child: Row(
                  children: [
                    Icon(
                      _alwaysTranslate
                        ? Icons.check_box
                        : Icons.check_box_outline_blank,
                      color: _font(),
                    ),
                    const SizedBox(width: 8),
                    const Text('Always translate to Bengali'),
                  ],
                ),
              ),
            ],
          ),

          // Mobile-friendly toggle
          IconButton(
            icon: Icon(_mobileView
              ? Icons.desktop_windows
              : Icons.phone_android),
            tooltip: _mobileView
              ? 'Desktop View'
              : 'Mobile-friendly',
            onPressed: _toggleMobileView,
          ),

          // AMP toggle
          IconButton(
            icon: Icon(_ampView
              ? Icons.flash_off
              : Icons.bolt),
            tooltip: _ampView
              ? 'Original view'
              : 'Try AMP',
            onPressed: _toggleAmpView,
          ),

          IconButton(icon: const Icon(Icons.share), onPressed: _shareUrl),
          IconButton(icon: const Icon(Icons.bookmark_add), onPressed: _bookmarkUrl),
        ],
      ),

      body: InAppWebView(
        initialUrlRequest: URLRequest(url: WebUri(widget.url)),
        pullToRefreshController: _ptrCtrl,
        initialSettings: InAppWebViewSettings(
          javaScriptEnabled: true,
          domStorageEnabled: true,
          mixedContentMode: MixedContentMode.MIXED_CONTENT_ALWAYS_ALLOW,

          // --- Mobile WebView improvements ---
          userAgent: "Mozilla/5.0 (Linux; Android 11; Mobile) "
              "AppleWebKit/537.36 (KHTML, like Gecko) "
              "Chrome/115.0.0.0 Mobile Safari/537.36",
          supportZoom: true,
          builtInZoomControls: true,
          displayZoomControls: false,
          useWideViewPort: true,
          loadWithOverviewMode: true,
        ),
        onWebViewCreated: (c) => _ctrl = c,
        onLoadStop: (c, uri) async {
          _ptrCtrl.endRefreshing();

          // inject viewport meta-tag
          await c.evaluateJavascript(source: """
            if (document.querySelector('meta[name=viewport]')===null) {
              var m = document.createElement('meta');
              m.name='viewport'; 
              m.content='width=device-width, initial-scale=1';
              document.head.appendChild(m);
            }
          """);

          // auto-translate if set
          if (_alwaysTranslate && uri != null && !_isTranslateDomain(uri.host)) {
            _translate(_defaultEngine);
          }
        },
        onProgressChanged: (c, p) => setState(() => _progress = p / 100),
      ),

      bottomNavigationBar: BottomAppBar(
        color: _glass(false),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceAround,
          children: [
            IconButton(
              icon: const Icon(Icons.home),
              onPressed: () => _ctrl?.loadUrl(
                  urlRequest: URLRequest(url: WebUri(widget.url))),
            ),
            IconButton(
              icon: const Icon(Icons.arrow_back),
              onPressed: () async {
                if (await _ctrl?.canGoBack() ?? false) _ctrl?.goBack();
              },
            ),
            IconButton(
              icon: const Icon(Icons.arrow_forward),
              onPressed: () async {
                if (await _ctrl?.canGoForward() ?? false) _ctrl?.goForward();
              },
            ),
            IconButton(
              icon: const Icon(Icons.refresh),
              onPressed: () => _ctrl?.reload(),
            ),
          ],
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/common/appBar.dart ===

import 'package:flutter/material.dart';

class AppBarTitle extends StatelessWidget {
  final String title;

  const AppBarTitle(this.title, {super.key});

  @override
  Widget build(BuildContext context) {
    return Text(
      title,
      textAlign: TextAlign.center,
      style: const TextStyle(
        color: Colors.white,
        fontSize: 24,
        fontWeight: FontWeight.w900, // Super Bold
        letterSpacing: 1.2,
        shadows: [
          Shadow(
            offset: Offset(0, 2),
            blurRadius: 6,
            color: Colors.black45,
          ),
          Shadow(
            blurRadius: 12,
            color: Colors.white24,
          ),
        ],
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/magazine/magazine_screen.dart ===

// lib/features/magazine/magazine_screen.dart

import 'dart:convert';
import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';
import 'package:fluttertoast/fluttertoast.dart';

import '/core/app_paths.dart';
import '../../localization/l10n/app_localizations.dart';
import '../../widgets/app_drawer.dart';
import '../../core/theme_provider.dart';
import '../../core/utils/favorites_manager.dart';
import 'widgets/animated_background.dart';
import 'widgets/magazine_card.dart';
import '../../features/common/appBar.dart'; // AppBarTitle import

class MagazineScreen extends StatefulWidget {
  const MagazineScreen({super.key});

  @override
  State<MagazineScreen> createState() => _MagazineScreenState();
}

class _MagazineScreenState extends State<MagazineScreen>
    with SingleTickerProviderStateMixin {
  final List<dynamic> magazines = [];
  bool _isLoading = true;
  late final TabController _tabController;
  final ScrollController _scrollController = ScrollController();
  DateTime? _lastBackPressed;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 9, vsync: this)
      ..addListener(() => setState(() {}));
    _loadMagazines();
  }

  Future<void> _loadMagazines() async {
    setState(() => _isLoading = true);
    try {
      final raw = await rootBundle.loadString('assets/data.json');
      final data = json.decode(raw);
      setState(() {
        magazines
          ..clear()
          ..addAll(data['magazines'] ?? []);
        _isLoading = false;
      });
    } catch (e) {
      setState(() => _isLoading = false);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Load failed: $e')),
      );
    }
  }

  Future<void> _toggleFavorite(dynamic m) async {
    await FavoritesManager.instance.toggleMagazine(m);
    setState(() {});
  }

  Future<bool> _onWillPop() async {
    final now = DateTime.now();
    if (context.canPop()) {
      context.pop();
      return false;
    }
    if (_lastBackPressed == null ||
        now.difference(_lastBackPressed!) > const Duration(seconds: 2)) {
      _lastBackPressed = now;
      Fluttertoast.showToast(
        msg: "Press back again to exit",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.BOTTOM,
      );
      return false;
    }
    return true;
  }

  List<dynamic> getFilteredMagazines() {
    final loc = AppLocalizations.of(context)!;
    final categories = _categories(context);
    final categoryKeywords = {
      loc.catFashion: ['fashion', 'style', 'aesthetics'],
      loc.catScience: ['science', 'discovery', 'research'],
      loc.catFinance: ['finance', 'economics', 'business'],
      loc.catAffairs: ['global', 'politics', 'world', 'international', 'defense'],
      loc.catTech: ['technology', 'innovation', 'tech'],
      loc.catArts: ['arts', 'culture', 'humanities', 'literature'],
      loc.catLifestyle: ['lifestyle', 'luxury', 'travel'],
      loc.catSports: ['sports', 'athletics', 'performance'],
    };

    final sel = categories[_tabController.index];
    if (sel == loc.favorites) {
      final favIds = FavoritesManager.instance.favoriteMagazines
          .map((m) => m['id'].toString())
          .toSet();
      return magazines
          .where((m) => favIds.contains(m['id'].toString()))
          .toList();
    } else {
      final keys = categoryKeywords[sel] ?? [];
      return magazines.where((m) {
        final tags = List<String>.from(m['tags'] ?? []);
        return tags.any((t) =>
            keys.any((kw) => t.toLowerCase().contains(kw.toLowerCase())));
      }).toList();
    }
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final mode = context.watch<ThemeProvider>().appThemeMode;

    // pick the correct background image & overlay
    final bgAsset = mode == AppThemeMode.light
        ? 'assets/theme/Magazines_light.png'
        : mode == AppThemeMode.bangladesh
            ? 'assets/theme/Magazines_desh.png'
            : 'assets/theme/Magazines_dark.png';

    final overlayColor = mode == AppThemeMode.light
        ? Colors.white.withOpacity(0.2)
        : Colors.black.withOpacity(0.3);

    return WillPopScope(
      onWillPop: _onWillPop,
      child: Scaffold(
        extendBodyBehindAppBar: true,
        backgroundColor: Colors.transparent,
        drawer: const AppDrawer(),
        body: Stack(
          fit: StackFit.expand,
          children: [
            // 1) Full-screen theme image
            Image.asset(bgAsset, fit: BoxFit.cover),

            // 2) Clear overlay
            Positioned.fill(child: Container(color: overlayColor)),

            // 3) Your existing AnimatedBackground + CustomScrollView
            AnimatedBackground(
              duration: const Duration(seconds: 30),
              child: CustomScrollView(
                slivers: [
                  SliverAppBar(
                    pinned: true,
                    backgroundColor: Colors.transparent,
                    elevation: 0,
                    centerTitle: true,
                    title: AppBarTitle(loc.magazines),
                    flexibleSpace: ClipRect(
                      child: BackdropFilter(
                        filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20),
                        child: const SizedBox.expand(),
                      ),
                    ),
                  ),
                  SliverToBoxAdapter(
                    child: SizedBox(
                      height: 56,
                      child: _buildCategoryChips(context),
                    ),
                  ),
                  SliverFillRemaining(
                    child: _isLoading
                        ? const Center(child: CircularProgressIndicator())
                        : getFilteredMagazines().isEmpty
                            ? Center(child: Text(loc.noMagazines))
                            : RefreshIndicator(
                                onRefresh: _loadMagazines,
                                child: ListView.builder(
                                  controller: _scrollController,
                                  padding: const EdgeInsets.all(16),
                                  itemCount: getFilteredMagazines().length,
                                  itemBuilder: (_, idx) {
                                    final m = getFilteredMagazines()[idx];
                                    final id = m['id'].toString();
                                    return Padding(
                                      padding:
                                          const EdgeInsets.only(bottom: 16),
                                      child: MagazineCard(
                                        magazine: m,
                                        isFavorite: FavoritesManager
                                            .instance
                                            .isFavoriteMagazine(id),
                                        onFavoriteToggle: () =>
                                            _toggleFavorite(m),
                                      ),
                                    );
                                  },
                                ),
                              ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildCategoryChips(BuildContext context) {
    final cats = _categories(context);
    return ListView.builder(
      scrollDirection: Axis.horizontal,
      padding: const EdgeInsets.symmetric(horizontal: 8),
      itemCount: cats.length,
      itemBuilder: (_, i) {
        return Padding(
          padding: const EdgeInsets.symmetric(horizontal: 4),
          child: ChoiceChip(
            label: Text(cats[i]),
            selected: i == _tabController.index,
            onSelected: (_) => _tabController.animateTo(i),
          ),
        );
      },
    );
  }

  List<String> _categories(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    return [
      loc.favorites,
      loc.catFashion,
      loc.catScience,
      loc.catFinance,
      loc.catAffairs,
      loc.catTech,
      loc.catArts,
      loc.catLifestyle,
      loc.catSports,
    ];
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/magazine/widgets/magazine_card.dart ===

// lib/features/magazine/widgets/magazine_card.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';
import '../../../core/theme_provider.dart';

class MagazineCard extends StatelessWidget {
  const MagazineCard({
    super.key,
    required this.magazine,
    required this.isFavorite,
    required this.onFavoriteToggle,
  });

  final Map<String, dynamic> magazine;
  final bool isFavorite;
  final VoidCallback onFavoriteToggle;

  void _openMagazine(BuildContext context) {
    final String url = magazine['contact']?['website'] ?? '';
    final String title = magazine['name'] ?? 'Magazine';

    final Uri? parsed = Uri.tryParse(url);
    if (parsed == null || !(parsed.scheme == 'http' || parsed.scheme == 'https')) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Invalid or missing website URL')),
      );
      return;
    }

    context.pushNamed('webview', extra: {'url': url, 'title': title});
  }

  String _getDescription() {
    final desc = (magazine['description'] ?? '').toString().trim();
    if (desc.isNotEmpty) return desc;
    final country = magazine['country'] ?? 'Unknown';
    final language = magazine['language'] ?? 'Unknown';
    return '$country • $language';
  }

  String _getLogoUrl() {
    final String? website = magazine['contact']?['website'] as String?;
    if (website != null && website.isNotEmpty) {
      try {
        return 'https://logo.clearbit.com/${Uri.parse(website).host}';
      } catch (_) {}
    }
    return '';
  }

  @override
  Widget build(BuildContext context) {
    final theme     = Theme.of(context);
    final mode      = context.watch<ThemeProvider>().appThemeMode;
    final glowColor = theme.colorScheme.primary.withOpacity(mode == AppThemeMode.dark ? 0.1 : 0.4);

    final String logoUrl     = _getLogoUrl();
    final String name        = magazine['name'] ?? 'Unknown Magazine';
    final String description = _getDescription();
    final String fallbackTxt = (name.length >= 2 ? name.substring(0, 2).toUpperCase() : 'MG');

    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 10),
      child: ClipRRect(
        borderRadius: BorderRadius.circular(18),
        child: BackdropFilter(
          filter: ImageFilter.blur(sigmaX: 12, sigmaY: 12),
          child: Container(
            width: double.infinity,
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.1),
              borderRadius: BorderRadius.circular(18),
              border: Border.all(color: glowColor, width: 1),
              boxShadow: [
                BoxShadow(color: glowColor, blurRadius: 8, offset: const Offset(0, 4)),
              ],
            ),
            child: InkWell(
              borderRadius: BorderRadius.circular(18),
              onTap: () => _openMagazine(context),
              child: Padding(
                padding: const EdgeInsets.all(14),
                child: Row(
                  children: [
                    ClipRRect(
                      borderRadius: BorderRadius.circular(10),
                      child: logoUrl.isNotEmpty
                          ? CachedNetworkImage(
                              imageUrl: logoUrl,
                              width: 55,
                              height: 55,
                              fit: BoxFit.cover,
                              placeholder: (_, __) => const SizedBox(
                                width: 20,
                                height: 20,
                                child: CircularProgressIndicator(strokeWidth: 2),
                              ),
                              errorWidget: (_, __, ___) => _fallbackAvatar(fallbackTxt),
                            )
                          : _fallbackAvatar(fallbackTxt),
                    ),
                    const SizedBox(width: 14),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            name,
                            maxLines: 1,
                            overflow: TextOverflow.ellipsis,
                            style: theme.textTheme.titleMedium?.copyWith(
                              fontWeight: FontWeight.bold,
                              color: theme.textTheme.titleMedium?.color,
                            ),
                          ),
                          const SizedBox(height: 6),
                          Text(
                            description,
                            maxLines: 2,
                            overflow: TextOverflow.ellipsis,
                            style: theme.textTheme.bodyMedium?.copyWith(
                              fontWeight: FontWeight.w600,
                              color: theme.textTheme.bodyMedium?.color?.withOpacity(0.9),
                            ),
                          ),
                        ],
                      ),
                    ),
                    IconButton(
                      icon: Icon(
                        isFavorite ? Icons.favorite : Icons.favorite_border,
                        color: isFavorite ? Colors.redAccent : theme.iconTheme.color,
                      ),
                      onPressed: onFavoriteToggle,
                    ),
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _fallbackAvatar(String text) {
    return Container(
      width: 55,
      height: 55,
      color: Colors.grey[300],
      alignment: Alignment.center,
      child: Text(
        text,
        style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/magazine/widgets/webview_screen.dart ===

// lib/features/common/webview_screen.dart

import 'dart:io';
import 'package:flutter/material.dart';
import 'package:webview_flutter/webview_flutter.dart';
import '../../news/widgets/animated_background.dart';

class WebViewScreen extends StatefulWidget {
  const WebViewScreen({
    required this.url,
    required this.title,
    super.key,
  });

  final String url;
  final String title;

  @override
  State<WebViewScreen> createState() => _WebViewScreenState();
}

class _WebViewScreenState extends State<WebViewScreen> {
  late final WebViewController _controller;
  bool _isLoading = true;
  int _progress = 0;

  @override
  void initState() {
    super.initState();

    // Initialize the WebView controller
    _controller = WebViewController()
      ..setJavaScriptMode(JavaScriptMode.unrestricted)
      ..setBackgroundColor(Colors.transparent)
      ..setNavigationDelegate(
        NavigationDelegate(
          onNavigationRequest: (NavigationRequest request) {
            final uri = Uri.tryParse(request.url);
            // Enforce HTTPS
            if (uri == null || uri.scheme != 'https') {
              return NavigationDecision.prevent;
            }
            return NavigationDecision.navigate;
          },
          onProgress: (progress) => setState(() {
            _progress = progress;
          }),
          onPageStarted: (_) => setState(() => _isLoading = true),
          onPageFinished: (_) async {
            setState(() => _isLoading = false);
            // Inject viewport meta and custom CSS for magazine layout
            const css = '''
              body { margin: 0; padding: 16px; font-family: -apple-system, BlinkMacSystemFont, sans-serif; line-height: 1.6; }
              img { max-width: 100% !important; height: auto !important; display: block; margin: 8px auto; }
              header, footer, nav, .sidebar, .ads { display: none !important; }
              article { max-width: 600px; margin: auto; }
            ''';
            final script = '''
              (function() {
                if (!document.querySelector('meta[name="viewport"]')) {
                  var meta = document.createElement('meta');
                  meta.name = 'viewport';
                  meta.content = 'width=device-width, initial-scale=1.0';
                  document.head.appendChild(meta);
                }
                var style = document.createElement('style');
                style.textContent = ${css.replaceAll("'", "\\'")};
                document.head.appendChild(style);
              })();
            ''';
            await _controller.runJavaScript(script);
          },
          onWebResourceError: (error) => ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Failed to load: \${error.description}')),
          ),
        ),
      )
      ..loadRequest(Uri.parse(widget.url));
  }

  Future<void> _refresh() async {
    await _controller.reload();
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: AppBar(
        elevation: 0,
        backgroundColor: theme.colorScheme.primary.withOpacity(0.95),
        centerTitle: true,
        title: Text(
          widget.title,
          style: theme.textTheme.titleLarge?.copyWith(
            color: Colors.white,
            fontWeight: FontWeight.w800,
          ),
          overflow: TextOverflow.ellipsis,
        ),
        bottom: PreferredSize(
          preferredSize: const Size.fromHeight(4.0),
          child: _isLoading
              ? LinearProgressIndicator(
                  value: _progress / 100.0,
                  backgroundColor: Colors.white24,
                  valueColor: const AlwaysStoppedAnimation<Color>(Colors.white),
                )
              : const SizedBox.shrink(),
        ),
      ),
      body: AnimatedBackground(
        child: RefreshIndicator(
          onRefresh: _refresh,
          child: ClipRRect(
            borderRadius: const BorderRadius.vertical(top: Radius.circular(24)),
            child: WebViewWidget(controller: _controller),
          ),
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/magazine/widgets/animated_background.dart ===

// lib/features/news/widgets/animated_background.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../../core/theme_provider.dart';

/// A full-screen glassmorphic overlay that blurs the content behind it
/// and applies a semi-transparent tint based on the active theme.
class AnimatedBackground extends StatelessWidget {
  /// Optional future hook (unused) for animation duration
  final Duration duration;
  /// The content rendered on top of the glass effect
  final Widget? child;
  /// Tint opacity for the glass overlay
  final double overlayOpacity;

  const AnimatedBackground({
    super.key,
    this.duration = const Duration(seconds: 20),
    this.child,
    this.overlayOpacity = 0.3,
  });

  @override
  Widget build(BuildContext context) {
    final mode = context.watch<ThemeProvider>().appThemeMode;

    return Stack(
      fit: StackFit.expand,
      children: [
        // 1) Blur everything behind
        Positioned.fill(
          child: BackdropFilter(
            filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20),
            child: Container(color: Colors.transparent),
          ),
        ),
        // 2) Semi-transparent tint overlay
        Container(color: _glassTint(mode)),
        // 3) Your child widget
        if (child != null) child!,
      ],
    );
  }

  /// Chooses a tint color per theme
  Color _glassTint(AppThemeMode mode) {
    switch (mode) {
      case AppThemeMode.dark:
        return Colors.black.withOpacity(overlayOpacity);
      case AppThemeMode.bangladesh:
        return const Color(0xFF004D40).withOpacity(overlayOpacity);
      case AppThemeMode.light:
      default:
        return Colors.white.withOpacity(overlayOpacity);
    }
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/profile/signup_screen.dart ===

// lib/features/auth/signup_screen.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';
import '../../../core/theme_provider.dart';
import '../../../features/profile/auth_service.dart';
import '../../../localization/l10n/app_localizations.dart';

class SignupScreen extends StatefulWidget {
  const SignupScreen({super.key});

  @override
  State<SignupScreen> createState() => _SignupScreenState();
}

class _SignupScreenState extends State<SignupScreen> {
  final _nameCtl = TextEditingController();
  final _emailCtl = TextEditingController();
  final _passCtl = TextEditingController();
  String? _error;
  bool _loading = false;

  @override
  void dispose() {
    _nameCtl.dispose();
    _emailCtl.dispose();
    _passCtl.dispose();
    super.dispose();
  }

  Future<void> _signup() async {
    setState(() => _loading = true);
    final msg = await AuthService().signUp(
      _nameCtl.text.trim(),
      _emailCtl.text.trim(),
      _passCtl.text.trim(),
    );
    setState(() => _loading = false);
    if (msg != null) {
      setState(() => _error = msg);
    } else {
      context.go('/home');
    }
  }

  Future<void> _signupWithGoogle() async {
    setState(() => _loading = true);
    final result = await AuthService().signInWithGoogle();
    setState(() => _loading = false);
    if (result != null) {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(result)));
    } else {
      context.go('/home');
    }
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final mode = context.watch<ThemeProvider>().appThemeMode;
    final textColor = Theme.of(context).textTheme.bodyLarge?.color ?? Colors.white;

    return Scaffold(
      extendBodyBehindAppBar: true,
      backgroundColor: Colors.transparent,
      body: Stack(
        fit: StackFit.expand,
        children: [
          _buildBackground(mode),
          Container(color: _glassTint(mode)),
          SafeArea(
            child: SingleChildScrollView(
              padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 80),
              child: ClipRRect(
                borderRadius: BorderRadius.circular(24),
                child: BackdropFilter(
                  filter: ImageFilter.blur(sigmaX: 16, sigmaY: 16),
                  child: Container(
                    padding: const EdgeInsets.all(24),
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(24),
                      border: Border.all(color: Colors.white30, width: 1),
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.stretch,
                      children: [
                        Text(
                          loc.signup,
                          textAlign: TextAlign.center,
                          style: TextStyle(
                            fontSize: 28,
                            fontWeight: FontWeight.bold,
                            color: textColor,
                          ),
                        ),
                        const SizedBox(height: 24),

                        if (_error != null) ...[
                          Text(
                            _mapError(loc, _error!),
                            style: const TextStyle(color: Colors.redAccent),
                            textAlign: TextAlign.center,
                          ),
                          const SizedBox(height: 16),
                        ],

                        _glassField(loc.fullName, controller: _nameCtl, textColor: textColor),
                        const SizedBox(height: 12),
                        _glassField(loc.email, controller: _emailCtl, textColor: textColor),
                        const SizedBox(height: 12),
                        _glassField(
                          loc.password,
                          controller: _passCtl,
                          obscure: true,
                          textColor: textColor,
                        ),
                        const SizedBox(height: 24),

                        ElevatedButton(
                          onPressed: _loading ? null : _signup,
                          style: ElevatedButton.styleFrom(
                            minimumSize: const Size.fromHeight(50),
                            backgroundColor: Colors.white.withOpacity(0.2),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                          ),
                          child: _loading
                              ? const CircularProgressIndicator(color: Colors.white)
                              : Text(
                                  loc.signup,
                                  style: TextStyle(
                                      color: textColor, fontWeight: FontWeight.bold),
                                ),
                        ),
                        const SizedBox(height: 12),

                        ElevatedButton.icon(
                          icon: Image.asset('assets/google_logo.png', height: 24),
                          label: Text(
                            loc.continueWithGoogle,
                            style: TextStyle(color: textColor),
                          ),
                          onPressed: _loading ? null : _signupWithGoogle,
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.white.withOpacity(0.2),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                            minimumSize: const Size.fromHeight(50),
                          ),
                        ),
                        const SizedBox(height: 12),

                        TextButton(
                          onPressed: () => context.go('/login'),
                          child: Text(
                            loc.alreadyHaveAccount,
                            style: TextStyle(color: textColor),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  String _mapError(AppLocalizations loc, String msg) {
    switch (msg) {
      case 'Invalid email or password.':
        return loc.invalidCredentials;
      case 'No account found. Please sign up first.':
        return loc.noAccountFound;
      case 'Account already exists. Please log in.':
        return loc.accountExists;
      default:
        return msg;
    }
  }

  Widget _buildBackground(AppThemeMode mode) {
    switch (mode) {
      case AppThemeMode.dark:
        return Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [Color(0xFF1C1F22), Color(0xFF121417)],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
          ),
        );
      case AppThemeMode.light:
        return Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [Color(0xFFB0B0B0), Color(0xFFD0D0D0)],
              begin: Alignment.topCenter,
              end: Alignment.bottomCenter,
            ),
            boxShadow: [
              BoxShadow(color: Colors.white70, offset: Offset(-4, -4), blurRadius: 6),
              BoxShadow(color: Colors.black26, offset: Offset(4, 4), blurRadius: 6),
            ],
          ),
        );
      case AppThemeMode.bangladesh:
      default:
        return Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [Color(0xFF8FA49D), Color(0xFF6E7B75)],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
            boxShadow: [
              BoxShadow(color: Colors.black38, offset: Offset(2, 2), blurRadius: 8),
            ],
          ),
        );
    }
  }

  Color _glassTint(AppThemeMode mode) {
    switch (mode) {
      case AppThemeMode.dark:
        return const Color(0xFF1C1F26).withOpacity(0.1);
      case AppThemeMode.light:
        return Colors.white.withOpacity(0.1);
      case AppThemeMode.bangladesh:
      default:
        return const Color(0xFF6E7B75).withOpacity(0.15);
    }
  }

  Widget _glassField(
    String label, {
    required TextEditingController controller,
    bool obscure = false,
    required Color textColor,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.2),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.white.withOpacity(0.5)),
      ),
      child: TextField(
        controller: controller,
        obscureText: obscure,
        style: TextStyle(color: textColor),
        decoration: InputDecoration(
          labelText: label,
          labelStyle: TextStyle(color: textColor.withOpacity(0.7)),
          border: InputBorder.none,
          contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 14),
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/profile/profile_screen.dart ===

// lib/features/profile/profile_screen.dart

import 'dart:io';
import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:provider/provider.dart';

import '../../core/theme_provider.dart';
import '../../localization/l10n/app_localizations.dart';
import '/features/common/gradient_app_bar.dart';
import '../news/widgets/animated_background.dart';
import 'auth_service.dart';
import 'edit_profile_screen.dart';
import '../../widgets/app_drawer.dart';

class ProfileScreen extends StatefulWidget {
  const ProfileScreen({super.key});
  @override
  State<ProfileScreen> createState() => _ProfileScreenState();
}

class _ProfileScreenState extends State<ProfileScreen>
    with SingleTickerProviderStateMixin {
  Map<String, dynamic>? _profile;
  late final AnimationController _fadeController;
  late final Animation<double> _fadeAnimation;

  @override
  void initState() {
    super.initState();
    _loadProfile();
    _fadeController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 800),
    );
    _fadeAnimation = CurvedAnimation(
      parent: _fadeController,
      curve: Curves.easeIn,
    );
  }

  @override
  void dispose() {
    _fadeController.dispose();
    super.dispose();
  }

  Future<void> _loadProfile() async {
    final data = await AuthService().getProfile();
    if (!mounted) return;
    setState(() => _profile = data);
    _fadeController.forward();
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final theme = Theme.of(context);

    // If not logged in, redirect to login
    if (FirebaseAuth.instance.currentUser == null) {
      Future.microtask(() => context.go('/login'));
      return const SizedBox.shrink();
    }

    return Scaffold(
      extendBodyBehindAppBar: true,
      drawer: const AppDrawer(),
      backgroundColor: Colors.transparent,
      appBar: GradientAppBar(
        title: loc.profile,
        leading: IconButton(
          icon: const Icon(Icons.menu),
          onPressed: () => Scaffold.of(context).openDrawer(),
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.arrow_back),
            tooltip: loc.home,
            onPressed: () => context.go('/home'),
          ),
          IconButton(
            icon: const Icon(Icons.edit_outlined),
            tooltip: loc.editProfile,
            onPressed: () => Navigator.of(context).push(
              MaterialPageRoute(builder: (_) => const EditProfileScreen()),
            ),
          ),
        ],
      ),
      body: AnimatedBackground(
        duration: const Duration(seconds: 30),
        child: SafeArea(
          child: _profile == null
              ? const Center(child: CircularProgressIndicator())
              : FadeTransition(
                  opacity: _fadeAnimation,
                  child: ListView(
                    padding: const EdgeInsets.all(24),
                    children: [
                      const SizedBox(height: 24),
                      _buildGlassSection(
                        child: Column(
                          children: [
                            const SizedBox(height: 24),
                            Text(
                              (_profile?['name'] ?? loc.name).toString(),
                              style: theme.textTheme.headlineSmall?.copyWith(
                                fontWeight: FontWeight.bold,
                                color: theme.textTheme.headlineSmall?.color,
                                shadows: const [
                                  Shadow(color: Colors.black26, blurRadius: 4),
                                ],
                              ),
                            ),
                            const SizedBox(height: 24),
                          ],
                        ),
                      ),
                      const SizedBox(height: 24),
                      _buildGlassSection(
                        child: ExpansionTile(
                          tilePadding: const EdgeInsets.symmetric(
                              horizontal: 16, vertical: 8),
                          title: Text(
                            loc.details,
                            style: theme.textTheme.titleMedium?.copyWith(
                              fontWeight: FontWeight.bold,
                              color: Colors.white,
                            ),
                          ),
                          iconColor: Colors.white,
                          collapsedIconColor: Colors.white70,
                          childrenPadding: const EdgeInsets.symmetric(
                              horizontal: 16, vertical: 8),
                          children: _buildProfileDetails(context),
                        ),
                      ),
                    ],
                  ),
                ),
        ),
      ),
      floatingActionButton: FloatingActionButton.extended(
        onPressed: () async {
          await FirebaseAuth.instance.signOut();
          if (context.mounted) context.go('/login');
        },
        label: Text(loc.logout),
        icon: const Icon(Icons.logout),
        backgroundColor: theme.colorScheme.primary.withOpacity(0.15),
      ),
    );
  }

  List<Widget> _buildProfileDetails(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final email = (_profile?['email'] ?? '').toString();
    final phone = (_profile?['phone'] ?? '').toString();
    final role = (_profile?['role'] ?? '').toString();
    final dept = (_profile?['department'] ?? '').toString();

    return [
      if (email.isNotEmpty) _buildDetailRow(loc.email, email),
      if (phone.isNotEmpty) _buildDetailRow(loc.phone, phone),
      if (role.isNotEmpty) _buildDetailRow(loc.role, role),
      if (dept.isNotEmpty) _buildDetailRow(loc.department, dept),
    ];
  }

  Widget _buildDetailRow(String title, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: Row(
        children: [
          const Icon(Icons.circle, size: 8, color: Colors.white54),
          const SizedBox(width: 8),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(title,
                    style: const TextStyle(
                        color: Colors.white, fontWeight: FontWeight.bold)),
                const SizedBox(height: 2),
                Text(value, style: const TextStyle(color: Colors.white70)),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildGlassSection({required Widget child}) {
    final glow = Theme.of(context).colorScheme.primary.withOpacity(0.3);
    return ClipRRect(
      borderRadius: BorderRadius.circular(20),
      child: BackdropFilter(
        filter: ImageFilter.blur(sigmaX: 12, sigmaY: 12),
        child: Container(
          width: double.infinity,
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Colors.white.withOpacity(0.08),
            borderRadius: BorderRadius.circular(20),
            border: Border.all(color: glow, width: 1),
            boxShadow: [
              BoxShadow(color: glow, blurRadius: 10, offset: const Offset(0, 4)),
            ],
          ),
          child: child,
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/profile/auth_service.dart ===


import 'package:firebase_auth/firebase_auth.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:google_sign_in/google_sign_in.dart';

class AuthService {
  static final AuthService _instance = AuthService._internal();
  factory AuthService() => _instance;
  AuthService._internal();

  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  User? get currentUser => _auth.currentUser;

  bool get isLoggedIn => _auth.currentUser != null;

  Future<String?> signUp(String name, String email, String password) async {
    try {
      final userCredential = await _auth.createUserWithEmailAndPassword(
        email: email.trim(),
        password: password,
      );
      final uid = userCredential.user!.uid;

      await _firestore.collection('users').doc(uid).set({
        'name': name,
        'email': email,
        'phone': '',
        'role': '',
        'department': '',
        'image': '',
      });

      await _cacheProfile(name: name, email: email);
      return null;
    } on FirebaseAuthException catch (e) {
      return e.message;
    }
  }

  Future<String?> login(String email, String password) async {
    try {
      final userCredential = await _auth.signInWithEmailAndPassword(
        email: email.trim(),
        password: password,
      );

      final uid = userCredential.user!.uid;
      final doc = await _firestore.collection('users').doc(uid).get();
      if (doc.exists) {
        await _cacheProfileMap(doc.data()!);
      }
      return null;
    } on FirebaseAuthException catch (e) {
      return e.message;
    }
  }

  Future<String?> signInWithGoogle() async {
    try {
      final googleUser = await GoogleSignIn().signIn();
      if (googleUser == null) return 'Google sign-in cancelled.';

      final googleAuth = await googleUser.authentication;
      final credential = GoogleAuthProvider.credential(
        accessToken: googleAuth.accessToken,
        idToken: googleAuth.idToken,
      );

      final userCredential = await _auth.signInWithCredential(credential);
      final user = userCredential.user!;

      final doc = await _firestore.collection('users').doc(user.uid).get();
      if (!doc.exists) {
        await _firestore.collection('users').doc(user.uid).set({
          'name': user.displayName ?? 'User',
          'email': user.email ?? '',
          'phone': '',
          'role': '',
          'department': '',
          'image': user.photoURL ?? '',
        });
      }

      await _cacheProfile(
        name: user.displayName ?? 'User',
        email: user.email ?? '',
        imagePath: user.photoURL ?? '',
      );

      return null;
    } catch (e) {
      return 'Google Sign-in error: ${e.toString()}';
    }
  }

  Future<void> logout() async {
    await _auth.signOut();
    await GoogleSignIn().signOut();
    final prefs = await SharedPreferences.getInstance();
    await prefs.clear();
  }

  Future<Map<String, String>> getProfile() async {
    final prefs = await SharedPreferences.getInstance();
    return {
      'name': prefs.getString('user_name') ?? '',
      'email': prefs.getString('user_email') ?? '',
      'phone': prefs.getString('user_phone') ?? '',
      'role': prefs.getString('user_role') ?? '',
      'department': prefs.getString('user_department') ?? '',
      'image': prefs.getString('user_image') ?? '',
    };
  }

  Future<void> updateProfile({
    required String name,
    required String email,
    String phone = '',
    String role = '',
    String department = '',
    String imagePath = '',
  }) async {
    final uid = _auth.currentUser?.uid;
    if (uid != null) {
      await _firestore.collection('users').doc(uid).update({
        'name': name,
        'email': email,
        'phone': phone,
        'role': role,
        'department': department,
        'image': imagePath,
      });
    }

    await _cacheProfile(
      name: name,
      email: email,
      phone: phone,
      role: role,
      department: department,
      imagePath: imagePath,
    );
  }

  Future<void> _cacheProfile({
    required String name,
    required String email,
    String phone = '',
    String role = '',
    String department = '',
    String imagePath = '',
  }) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('user_name', name);
    await prefs.setString('user_email', email);
    await prefs.setString('user_phone', phone);
    await prefs.setString('user_role', role);
    await prefs.setString('user_department', department);
    await prefs.setString('user_image', imagePath);
    await prefs.setBool('isLoggedIn', true);
  }

  Future<void> _cacheProfileMap(Map<String, dynamic> data) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('user_name', data['name'] ?? '');
    await prefs.setString('user_email', data['email'] ?? '');
    await prefs.setString('user_phone', data['phone'] ?? '');
    await prefs.setString('user_role', data['role'] ?? '');
    await prefs.setString('user_department', data['department'] ?? '');
    await prefs.setString('user_image', data['image'] ?? '');
    await prefs.setBool('isLoggedIn', true);
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/profile/login_screen.dart ===

// lib/features/auth/login_screen.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';

import '../../../core/theme_provider.dart';
import '../../../features/profile/auth_service.dart';
import '../../../localization/l10n/app_localizations.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final TextEditingController _emailCtl = TextEditingController();
  final TextEditingController _passCtl = TextEditingController();
  String? _error;
  bool _loading = false;

  @override
  void dispose() {
    _emailCtl.dispose();
    _passCtl.dispose();
    super.dispose();
  }

  Future<void> _login() async {
    setState(() => _loading = true);
    final msg = await AuthService().login(
      _emailCtl.text.trim(),
      _passCtl.text.trim(),
    );
    setState(() => _loading = false);
    if (msg != null) {
      setState(() => _error = msg);
    } else {
      if (!mounted) return;
      context.go('/home');
    }
  }

  Future<void> _loginWithGoogle() async {
    setState(() => _loading = true);
    final result = await AuthService().signInWithGoogle();
    setState(() => _loading = false);
    if (!mounted) return;
    if (result != null) {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(result)));
    } else {
      context.go('/home');
    }
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final mode = context.watch<ThemeProvider>().appThemeMode;
    final textColor = Theme.of(context).textTheme.bodyLarge?.color ?? Colors.white;

    return Scaffold(
      extendBodyBehindAppBar: true,
      backgroundColor: Colors.transparent,
      body: Stack(
        fit: StackFit.expand,
        children: [
          _buildBackground(mode),
          Container(color: _glassTint(mode)),
          SafeArea(
            child: SingleChildScrollView(
              padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 80),
              child: ClipRRect(
                borderRadius: BorderRadius.circular(24),
                child: BackdropFilter(
                  filter: ImageFilter.blur(sigmaX: 16, sigmaY: 16),
                  child: Container(
                    padding: const EdgeInsets.all(24),
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(24),
                      border: Border.all(color: Colors.white30, width: 1),
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.stretch,
                      children: [
                        Text(
                          loc.login,
                          textAlign: TextAlign.center,
                          style: TextStyle(
                              fontSize: 28,
                              fontWeight: FontWeight.bold,
                              color: textColor),
                        ),
                        const SizedBox(height: 24),

                        if (_error != null) ...[
                          Text(
                            _mapError(loc, _error!),
                            style: const TextStyle(color: Colors.redAccent),
                            textAlign: TextAlign.center,
                          ),
                          const SizedBox(height: 16),
                        ],

                        _glassField(
                          loc.email,
                          controller: _emailCtl,
                          textColor: textColor,
                        ),
                        const SizedBox(height: 12),
                        _glassField(
                          loc.password,
                          controller: _passCtl,
                          obscure: true,
                          textColor: textColor,
                        ),
                        const SizedBox(height: 24),

                        ElevatedButton(
                          onPressed: _loading ? null : _login,
                          style: ElevatedButton.styleFrom(
                            minimumSize: const Size.fromHeight(50),
                            backgroundColor: Colors.white.withOpacity(0.2),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                          ),
                          child: _loading
                              ? const CircularProgressIndicator(color: Colors.white)
                              : Text(
                                  loc.login,
                                  style: TextStyle(
                                    color: textColor,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                        ),
                        const SizedBox(height: 12),

                        ElevatedButton.icon(
                          icon: Image.asset('assets/google_logo.png', height: 24),
                          label: Text(
                            loc.continueWithGoogle,
                            style: TextStyle(color: textColor),
                          ),
                          onPressed: _loading ? null : _loginWithGoogle,
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.white.withOpacity(0.2),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                            minimumSize: const Size.fromHeight(50),
                          ),
                        ),
                        const SizedBox(height: 12),

                        TextButton(
                          onPressed: () => context.go('/signup'),
                          child: Text(
                            loc.createAccount,
                            style: TextStyle(color: textColor),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  String _mapError(AppLocalizations loc, String msg) {
    switch (msg) {
      case 'Invalid email or password.':
        return loc.invalidCredentials;
      case 'No account found. Please sign up first.':
        return loc.noAccountFound;
      case 'Account already exists. Please log in.':
        return loc.accountExists;
      default:
        return msg;
    }
  }

  Widget _buildBackground(AppThemeMode mode) {
    switch (mode) {
      case AppThemeMode.dark:
        return Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [Color(0xFF1C1F22), Color(0xFF121417)],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
          ),
        );
      case AppThemeMode.light:
        return Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [Color(0xFFB0B0B0), Color(0xFFD0D0D0)],
              begin: Alignment.topCenter,
              end: Alignment.bottomCenter,
            ),
            boxShadow: [
              BoxShadow(color: Colors.white70, offset: Offset(-4, -4), blurRadius: 6),
              BoxShadow(color: Colors.black26, offset: Offset(4, 4), blurRadius: 6),
            ],
          ),
        );
      case AppThemeMode.bangladesh:
      default:
        return Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [Color(0xFF8FA49D), Color(0xFF6E7B75)],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
            boxShadow: [
              BoxShadow(color: Colors.black38, offset: Offset(2, 2), blurRadius: 8),
            ],
          ),
        );
    }
  }

  Color _glassTint(AppThemeMode mode) {
    switch (mode) {
      case AppThemeMode.dark:
        return const Color(0xFF1C1F26).withOpacity(0.1);
      case AppThemeMode.light:
        return Colors.white.withOpacity(0.1);
      case AppThemeMode.bangladesh:
      default:
        return const Color(0xFF6E7B75).withOpacity(0.15);
    }
  }

  Widget _glassField(
    String label, {
    required TextEditingController controller,
    bool obscure = false,
    required Color textColor,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.2),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.white.withOpacity(0.5)),
      ),
      child: TextField(
        controller: controller,
        obscureText: obscure,
        style: TextStyle(color: textColor),
        decoration: InputDecoration(
          labelText: label,
          labelStyle: TextStyle(color: textColor.withOpacity(0.7)),
          border: InputBorder.none,
          contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 14),
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/profile/forgot_password_screen.dart ===

import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../../../../localization/l10n/app_localizations.dart';

class ForgotPasswordScreen extends StatefulWidget {
  const ForgotPasswordScreen({super.key});

  @override
  State<ForgotPasswordScreen> createState() => _ForgotPasswordScreenState();
}

class _ForgotPasswordScreenState extends State<ForgotPasswordScreen> {
  final TextEditingController emailController = TextEditingController();
  String? message;

  Future<void> _resetPassword() async {
    final loc = AppLocalizations.of(context)!;
    try {
      await FirebaseAuth.instance
          .sendPasswordResetEmail(email: emailController.text.trim());
      setState(() => message = loc.resetEmailSent);
    } on FirebaseAuthException catch (e) {
      setState(() => message = e.message);
    }
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;

    return Scaffold(
      appBar: AppBar(
        title: Text(loc.forgotPassword),
        centerTitle: true,
      ),
      body: Padding(
        padding: const EdgeInsets.all(24),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Text(loc.enterEmailReset),
            const SizedBox(height: 12),
            TextField(
              controller: emailController,
              keyboardType: TextInputType.emailAddress,
              decoration: InputDecoration(
                labelText: loc.email,
                border: const OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: _resetPassword,
              child: Text(loc.sendResetLink),
            ),
            if (message != null) ...[
              const SizedBox(height: 20),
              Text(
                message!,
                style: TextStyle(
                  color: message!.contains('sent') ? Colors.green : Colors.red,
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/profile/edit_profile_screen.dart ===

// lib/features/profile/edit_profile_screen.dart
import 'dart:io';
import 'dart:ui';

import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:provider/provider.dart';
import 'package:go_router/go_router.dart';

import '../../core/theme_provider.dart';
import '../../localization/l10n/app_localizations.dart';
import 'auth_service.dart';

class EditProfileScreen extends StatefulWidget {
  const EditProfileScreen({super.key});

  @override
  State<EditProfileScreen> createState() => _EditProfileScreenState();
}

class _EditProfileScreenState extends State<EditProfileScreen> {
  final _formKey = GlobalKey<FormState>();
  final _nameController       = TextEditingController();
  final _emailController      = TextEditingController();
  final _phoneController      = TextEditingController();
  final _roleController       = TextEditingController();
  final _departmentController = TextEditingController();

  String? _imagePath;
  bool _isSaving = false;

  @override
  void initState() {
    super.initState();
    _loadProfile();
  }

  Future<void> _loadProfile() async {
    final profile = await AuthService().getProfile();
    if (mounted) {
      setState(() {
        _nameController.text       = profile['name']       ?? '';
        _emailController.text      = profile['email']      ?? '';
        _phoneController.text      = profile['phone']      ?? '';
        _roleController.text       = profile['role']       ?? '';
        _departmentController.text = profile['department'] ?? '';
        _imagePath                 = profile['image'];
      });
    }
  }

  Future<void> _pickImage() async {
    final picked = await ImagePicker().pickImage(source: ImageSource.gallery);
    if (picked != null) setState(() => _imagePath = picked.path);
  }

  Future<void> _saveProfile() async {
    if (!_formKey.currentState!.validate()) return;
    setState(() => _isSaving = true);
    await AuthService().updateProfile(
      name:        _nameController.text.trim(),
      email:       _emailController.text.trim(),
      phone:       _phoneController.text.trim(),
      role:        _roleController.text.trim(),
      department:  _departmentController.text.trim(),
      imagePath:   _imagePath ?? '',
    );
    if (mounted) context.pop(true);
  }

  @override
  Widget build(BuildContext context) {
    final loc        = AppLocalizations.of(context)!;
    final themeProv  = context.watch<ThemeProvider>();
    final theme      = Theme.of(context);
    final scheme     = theme.colorScheme;
    final isDarkMode = theme.brightness == Brightness.dark;

    return Scaffold(
      extendBodyBehindAppBar: true,
      backgroundColor: Colors.transparent,
      appBar: AppBar(
        title: Text(loc.editProfile),
        centerTitle: true,
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => context.pop(),
        ),
        flexibleSpace: ClipRect(
          child: BackdropFilter(
            filter: ImageFilter.blur(sigmaX: 16, sigmaY: 16),
            child: Container(color: Colors.transparent),
          ),
        ),
      ),
      body: Stack(
        fit: StackFit.expand,
        children: [
          // ─── themed background ────────────────────────────────────────
          _buildBackground(themeProv.appThemeMode, scheme, isDarkMode),
          // ─── form ──────────────────────────────────────────────────────
          SafeArea(
            child: SingleChildScrollView(
              padding: const EdgeInsets.fromLTRB(16, 100, 16, 16),
              child: Form(
                key: _formKey,
                child: Column(
                  children: [
                    // avatar picker
                    GestureDetector(
                      onTap: _pickImage,
                      child: ClipOval(
                        child: Container(
                          color: scheme.surface.withOpacity(0.2),
                          padding: const EdgeInsets.all(4),
                          child: CircleAvatar(
                            radius: 50,
                            backgroundImage: _imagePath != null
                                ? FileImage(File(_imagePath!))
                                : const AssetImage('assets/default_avatar.png')
                                    as ImageProvider,
                            child: _imagePath == null
                                ? Icon(Icons.camera_alt,
                                    size: 32,
                                    color: isDarkMode
                                        ? Colors.white70
                                        : Colors.black54)
                                : null,
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(height: 32),
                    // fields
                    _themedField(context,
                        controller: _nameController,
                        label: loc.name,
                        validator: (v) =>
                            v!.isEmpty ? loc.enterName : null),
                    _themedField(context,
                        controller: _emailController,
                        label: loc.email,
                        validator: (v) =>
                            v!.isEmpty ? loc.enterEmail : null),
                    _themedField(context,
                        controller: _phoneController, label: loc.phone),
                    _themedField(context,
                        controller: _roleController, label: loc.role),
                    _themedField(context,
                        controller: _departmentController,
                        label: loc.department),
                    const SizedBox(height: 32),
                    // save button
                    ElevatedButton(
                      style: ElevatedButton.styleFrom(
                        minimumSize: const Size.fromHeight(50),
                        backgroundColor:
                            scheme.primary.withOpacity(isDarkMode ? 0.85 : 0.90),
                        foregroundColor:
                            scheme.onPrimary, // auto-contrasts in all themes
                      ),
                      onPressed: _isSaving ? null : _saveProfile,
                      child: _isSaving
                          ? const SizedBox(
                              height: 24,
                              width: 24,
                              child: CircularProgressIndicator(strokeWidth: 3))
                          : Text(loc.save,
                              style:
                                  const TextStyle(fontWeight: FontWeight.bold)),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  // ────────────────────────────────────────────────────────────────────
  // Background that adapts to the selected AppThemeMode
  // (re-uses existing gradients but driven by ColorScheme values)
  // ────────────────────────────────────────────────────────────────────
  Widget _buildBackground(
    AppThemeMode mode,
    ColorScheme scheme,
    bool isDark,
  ) {
    switch (mode) {
      case AppThemeMode.dark:
        return Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: [
                scheme.background,
                scheme.surface,
              ],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
          ),
          child: DecoratedBox(
            position: DecorationPosition.foreground,
            decoration: BoxDecoration(
              gradient: RadialGradient(
                center: const Alignment(-0.5, -0.5),
                radius: 1.5,
                colors: [
                  Colors.white.withOpacity(0.05),
                  Colors.transparent,
                ],
              ),
            ),
          ),
        );

      case AppThemeMode.light:
        return Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: [
                scheme.background.withOpacity(0.8),
                scheme.surface,
              ],
              begin: Alignment.topCenter,
              end: Alignment.bottomCenter,
            ),
            boxShadow: [
              BoxShadow(
                  color: Colors.white70.withOpacity(0.6),
                  offset: const Offset(-4, -4),
                  blurRadius: 6),
              BoxShadow(
                  color: Colors.black26.withOpacity(0.3),
                  offset: const Offset(4, 4),
                  blurRadius: 6),
            ],
          ),
        );

      case AppThemeMode.bangladesh:
      default:
        return Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: [
                scheme.primary.withOpacity(0.35),
                scheme.secondary.withOpacity(0.35),
              ],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
            boxShadow: [
              BoxShadow(
                  color: Colors.black38.withOpacity(0.4),
                  offset: const Offset(2, 2),
                  blurRadius: 8),
            ],
          ),
          child: DecoratedBox(
            position: DecorationPosition.foreground,
            decoration: BoxDecoration(
              gradient: RadialGradient(
                center: const Alignment(0.6, -0.6),
                radius: 1.4,
                colors: [
                  Colors.white.withOpacity(0.15),
                  Colors.transparent,
                ],
                stops: const [0.0, 0.7],
              ),
            ),
          ),
        );
    }
  }

  // ────────────────────────────────────────────────────────────────────
  // Text field styled from the active Theme & InputDecorationTheme
  // ────────────────────────────────────────────────────────────────────
  Widget _themedField(
    BuildContext context, {
    required TextEditingController controller,
    required String label,
    String? Function(String?)? validator,
  }) {
    final theme    = Theme.of(context);
    final scheme   = theme.colorScheme;
    final isDark   = theme.brightness == Brightness.dark;

    return Container(
      margin: const EdgeInsets.symmetric(vertical: 8),
      decoration: BoxDecoration(
        color: isDark
            ? scheme.surface.withOpacity(0.5)
            : scheme.surface.withOpacity(0.9),
        borderRadius: BorderRadius.circular(18),
        border: Border.all(
          color: isDark
              ? Colors.white24
              : Colors.black26,
        ),
      ),
      child: TextFormField(
        controller: controller,
        validator: validator,
        style: TextStyle(color: scheme.onSurface),
        decoration: InputDecoration(
          labelText: label,
          contentPadding:
              const EdgeInsets.symmetric(horizontal: 20, vertical: 18),
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/profile/animated_background.dart ===

// lib/features/profile/animated_background.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../../core/theme_provider.dart'; // Fixed relative path

class AnimatedBackground extends StatelessWidget {
  const AnimatedBackground({super.key});

  @override
  Widget build(BuildContext context) {
    final mode = Provider.of<ThemeProvider>(context).appThemeMode;

    return Stack(
      fit: StackFit.expand,
      children: [
        _buildMetallicBase(mode),
        if (mode == AppThemeMode.dark || mode == AppThemeMode.bangladesh)
          Positioned.fill(child: _buildGlossOverlay(mode)),
        Container(color: _glassTint(mode)),
      ],
    );
  }

  Widget _buildMetallicBase(AppThemeMode mode) {
    switch (mode) {
      case AppThemeMode.dark:
        return Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [Color(0xFF1C1F22), Color(0xFF121417)],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
          ),
        );
      case AppThemeMode.light:
        return Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [Color(0xFFB0B0B0), Color(0xFFD0D0D0)],
              begin: Alignment.topCenter,
              end: Alignment.bottomCenter,
            ),
            boxShadow: [
              BoxShadow(color: Colors.white70, offset: Offset(-4, -4), blurRadius: 6),
              BoxShadow(color: Colors.black26, offset: Offset(4, 4), blurRadius: 6),
            ],
          ),
        );
      case AppThemeMode.bangladesh:
      default:
        return Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [Color(0xFF8FA49D), Color(0xFF6E7B75)],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
            boxShadow: [
              BoxShadow(color: Colors.black38, offset: Offset(2, 2), blurRadius: 8),
            ],
          ),
        );
    }
  }

  Widget _buildGlossOverlay(AppThemeMode mode) {
    final center = mode == AppThemeMode.dark
        ? const Alignment(-0.5, -0.5)
        : const Alignment(0.6, -0.6);
    final radius = mode == AppThemeMode.dark ? 1.5 : 1.4;
    final opacity = mode == AppThemeMode.dark ? 0.05 : 0.15;

    return DecoratedBox(
      position: DecorationPosition.foreground,
      decoration: BoxDecoration(
        gradient: RadialGradient(
          center: center,
          radius: radius,
          colors: [
            Colors.white.withOpacity(opacity),
            Colors.transparent,
          ],
          stops: const [0.0, 0.7],
        ),
      ),
    );
  }

  Color _glassTint(AppThemeMode mode) {
    switch (mode) {
      case AppThemeMode.dark:
        return const Color(0xFF1C1F26).withOpacity(0.1);
      case AppThemeMode.light:
        return Colors.white.withOpacity(0.1);
      case AppThemeMode.bangladesh:
      default:
        return const Color(0xFF6E7B75).withOpacity(0.15);
    }
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/news/newspaper_screen.dart ===

// lib/features/news/newspaper_screen.dart

import 'dart:convert';
import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';
import 'package:fluttertoast/fluttertoast.dart';

import '../../core/theme_provider.dart';
import '/core/app_paths.dart';
import '../../localization/l10n/app_localizations.dart';
import '../../widgets/app_drawer.dart';
import '../../core/utils/favorites_manager.dart';
import 'widgets/news_card.dart';
import '../../features/common/appBar.dart'; // AppBarTitle import

class NewspaperScreen extends StatefulWidget {
  const NewspaperScreen({super.key});

  @override
  State<NewspaperScreen> createState() => _NewspaperScreenState();
}

class _NewspaperScreenState extends State<NewspaperScreen> with SingleTickerProviderStateMixin {
  final List<dynamic> _papers = [];
  bool _isLoading = true;
  final ScrollController _scrollController = ScrollController();
  String _langFilter = 'All';
  late TabController _tabController;
  final FavoritesManager favoritesManager = FavoritesManager.instance;

  DateTime? _lastBackPressed;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 9, vsync: this)
      ..addListener(() {
        setState(() {
          _langFilter = 'All';
        });
        _scrollController.jumpTo(0);
      });
    favoritesManager.loadFavorites();
    _loadPapers();
  }

  Future<void> _loadPapers() async {
    setState(() => _isLoading = true);
    try {
      final raw = await rootBundle.loadString('assets/data.json');
      final jsonData = jsonDecode(raw) as Map<String, dynamic>;
      setState(() {
        _papers
          ..clear()
          ..addAll(jsonData['newspapers'] as List<dynamic>);
        _isLoading = false;
      });
    } catch (e) {
      setState(() => _isLoading = false);
      final loc = AppLocalizations.of(context)!;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(loc.loadError.replaceFirst('{message}', '$e'))),
      );
    }
  }

  List<String> get _categories {
    final loc = AppLocalizations.of(context)!;
    return [
      loc.favorites,
      loc.national,
      loc.international,
      loc.businessFinance,
      loc.digitalTech,
      loc.sportsNews,
      loc.entertainmentArts,
      loc.worldPolitics,
      loc.blog,
    ];
  }

  List<dynamic> get _filteredPapers {
    final loc = AppLocalizations.of(context)!;
    final selCategory = _categories[_tabController.index];
    final map = {
      loc.businessFinance: 'business',
      loc.digitalTech: 'tech',
      loc.sportsNews: 'sports',
      loc.entertainmentArts: 'entertainment',
      loc.worldPolitics: 'defense',
      loc.blog: 'blog',
      loc.national: 'national',
      loc.international: 'international',
    };

    if (selCategory == loc.favorites) {
      final favIds = favoritesManager.favoriteNewspapers
          .map((n) => n['id'].toString())
          .toSet();
      return _papers.where((p) => favIds.contains(p['id'].toString())).toList();
    }
    return _papers.where((p) {
      final region = (p['region'] ?? '').toString().toLowerCase();
      final key = map[selCategory];
      if (selCategory == loc.national || selCategory == loc.international) {
        if (region != key) return false;
        if (_langFilter == 'All') return true;
        final lang = (p['language'] ?? '').toString().toLowerCase();
        return (_langFilter == loc.bangla && lang == 'bn') ||
               (_langFilter == loc.english && lang == 'en');
      }
      return key != null && region == key;
    }).toList();
  }

  Future<bool> _onWillPop() async {
    final now = DateTime.now();
    if (context.canPop()) {
      context.pop();
      return false;
    }
    if (_lastBackPressed == null ||
        now.difference(_lastBackPressed!) > const Duration(seconds: 2)) {
      _lastBackPressed = now;
      Fluttertoast.showToast(
        msg: "Press back again to exit",
        toastLength: Toast.LENGTH_SHORT,
        gravity: ToastGravity.BOTTOM,
      );
      return false;
    }
    return true;
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final mode = context.watch<ThemeProvider>().appThemeMode;

    // choose background by theme
    final bgAsset = mode == AppThemeMode.light
      ? 'assets/theme/News_light.png'
      : mode == AppThemeMode.bangladesh
        ? 'assets/theme/News_desh.png'
        : 'assets/theme/News_dark.png';

    final overlayColor = mode == AppThemeMode.light
      ? Colors.white.withOpacity(0.2)
      : Colors.black.withOpacity(0.3);

    return WillPopScope(
      onWillPop: _onWillPop,
      child: Scaffold(
        extendBodyBehindAppBar: true,
        backgroundColor: Colors.transparent,
        drawer: const AppDrawer(),
        body: Stack(
          fit: StackFit.expand,
          children: [
            // full-screen background image
            Image.asset(bgAsset, fit: BoxFit.cover),

            // clear semi-transparent overlay
            Positioned.fill(child: Container(color: overlayColor)),

            // your existing scrollable content
            CustomScrollView(
              slivers: [
                SliverAppBar(
                  pinned: true,
                  backgroundColor: Colors.transparent,
                  elevation: 0,
                  centerTitle: true,
                  flexibleSpace: ClipRect(
                    child: BackdropFilter(
                      filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20),
                      child: const SizedBox.expand(),
                    ),
                  ),
                  title: AppBarTitle(loc.newspapers),
                ),
                SliverToBoxAdapter(
                  child: SizedBox(
                    height: 56,
                    child: _buildCategoryChips(context),
                  ),
                ),
                if ([_categories[1], _categories[2]]
                    .contains(_categories[_tabController.index]))
                  SliverToBoxAdapter(
                    child: Padding(
                      padding: const EdgeInsets.symmetric(vertical: 8),
                      child: _buildLanguageFilter(context),
                    ),
                  ),
                SliverFillRemaining(
                  child: _isLoading
                      ? const Center(child: CircularProgressIndicator())
                      : _filteredPapers.isEmpty
                          ? Center(child: Text(loc.noPapersFound))
                          : RefreshIndicator(
                              onRefresh: _loadPapers,
                              child: ListView.builder(
                                controller: _scrollController,
                                padding: const EdgeInsets.all(16),
                                itemCount: _filteredPapers.length,
                                itemBuilder: (_, idx) {
                                  final paper = _filteredPapers[idx];
                                  final id = paper['id'].toString();
                                  return NewsCard(
                                    news: paper,
                                    isFavorite: favoritesManager.isFavoriteNewspaper(id),
                                    onFavoriteToggle: () => setState(() {
                                      favoritesManager.toggleNewspaper(paper);
                                    }),
                                    searchQuery: '',
                                  );
                                },
                              ),
                            ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildCategoryChips(BuildContext context) {
    return ListView.builder(
      scrollDirection: Axis.horizontal,
      padding: const EdgeInsets.symmetric(horizontal: 12),
      itemCount: _categories.length,
      itemBuilder: (_, i) {
        return Padding(
          padding: const EdgeInsets.symmetric(horizontal: 4),
          child: ChoiceChip(
            label: Text(_categories[i]),
            selected: _tabController.index == i,
            onSelected: (_) => _tabController.animateTo(i),
          ),
        );
      },
    );
  }

  Widget _buildLanguageFilter(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [loc.allLanguages, loc.bangla, loc.english].map((lang) {
        return Padding(
          padding: const EdgeInsets.symmetric(horizontal: 6),
          child: ChoiceChip(
            label: Text(lang),
            selected: _langFilter == lang,
            onSelected: (_) => setState(() => _langFilter = lang),
          ),
        );
      }).toList(),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/news/widgets/news_card.dart ===

// lib/features/news/widgets/news_card.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';
import '../../../core/theme_provider.dart';

class NewsCard extends StatefulWidget {
  final Map<String, dynamic> news;
  final bool isFavorite;
  final VoidCallback onFavoriteToggle;

  const NewsCard({
    super.key,
    required this.news,
    required this.isFavorite,
    required this.onFavoriteToggle, required String searchQuery,
  });

  @override
  State<NewsCard> createState() => _NewsCardState();
}

class _NewsCardState extends State<NewsCard> with SingleTickerProviderStateMixin {
  bool _isPressed = false;

  void _open(BuildContext context) {
    final maybeWebsite = widget.news['contact']?['website'];
    final maybeUrl = widget.news['url'] ?? widget.news['link'];
    final url = (maybeWebsite is String && maybeWebsite.isNotEmpty)
        ? maybeWebsite
        : (maybeUrl is String ? maybeUrl : '');

    final title = widget.news['name'] ?? 'News';

    if (url.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('No URL available')),
      );
      return;
    }

    context.push('/webview', extra: {'url': url, 'title': title});
  }

  String _getDescription() {
    final desc = widget.news['description'] ?? '';
    if (desc.toString().trim().isNotEmpty) return desc;
    final country = widget.news['country'] ?? '';
    final lang = widget.news['language'] ?? '';
    return '$country • $lang';
  }

  String _getImageUrl() {
    final website = (widget.news['contact']?['website'] ?? widget.news['url'] ?? '') as String;
    if (website.isNotEmpty) {
      try {
        final uri = Uri.parse(website);
        return 'https://logo.clearbit.com/${uri.host}';
      } catch (_) {}
    }
    return '';
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final mode = context.watch<ThemeProvider>().appThemeMode;

    final glowColor = theme.colorScheme.primary.withOpacity(mode == AppThemeMode.dark ? 0.08 : 0.25);
    final logoUrl = _getImageUrl();
    final fallbackTxt = (widget.news['name']?.substring(0, 2).toUpperCase() ?? 'NP');
    final name = widget.news['name'] ?? 'Untitled';
    final description = _getDescription();

    return GestureDetector(
      onTapDown: (_) => setState(() => _isPressed = true),
      onTapUp: (_) => setState(() => _isPressed = false),
      onTapCancel: () => setState(() => _isPressed = false),
      onTap: () => _open(context),
      child: AnimatedScale(
        scale: _isPressed ? 0.97 : 1.0,
        duration: const Duration(milliseconds: 150),
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 10),
          child: ClipRRect(
            borderRadius: BorderRadius.circular(18),
            child: BackdropFilter(
              filter: ImageFilter.blur(sigmaX: 12, sigmaY: 12),
              child: Container(
                width: double.infinity,
                decoration: BoxDecoration(
                  color: Colors.white.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(18),
                  border: Border.all(color: glowColor, width: 1.5),
                  boxShadow: [
                    BoxShadow(
                      color: glowColor,
                      blurRadius: _isPressed ? 16 : 8,
                      offset: const Offset(0, 4),
                      spreadRadius: 1,
                    ),
                  ],
                ),
                child: Padding(
                  padding: const EdgeInsets.all(14),
                  child: Row(
                    children: [
                      ClipRRect(
                        borderRadius: BorderRadius.circular(10),
                        child: logoUrl.isNotEmpty
                            ? CachedNetworkImage(
                                imageUrl: logoUrl,
                                width: 55,
                                height: 55,
                                fit: BoxFit.cover,
                                placeholder: (_, __) => const SizedBox(
                                  width: 20, height: 20,
                                  child: CircularProgressIndicator(strokeWidth: 2),
                                ),
                                errorWidget: (_, __, ___) => _fallbackAvatar(fallbackTxt),
                              )
                            : _fallbackAvatar(fallbackTxt),
                      ),
                      const SizedBox(width: 14),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              name,
                              maxLines: 1,
                              overflow: TextOverflow.ellipsis,
                              style: theme.textTheme.titleMedium?.copyWith(
                                fontWeight: FontWeight.bold,
                                color: theme.textTheme.titleMedium?.color,
                              ),
                            ),
                            const SizedBox(height: 6),
                            Text(
                              description,
                              maxLines: 2,
                              overflow: TextOverflow.ellipsis,
                              style: theme.textTheme.bodyMedium?.copyWith(
                                fontWeight: FontWeight.w600,
                                color: theme.textTheme.bodyMedium?.color?.withOpacity(0.9),
                              ),
                            ),
                          ],
                        ),
                      ),
                      IconButton(
                        icon: Icon(
                          widget.isFavorite ? Icons.favorite : Icons.favorite_border,
                          color: widget.isFavorite ? Colors.red : theme.iconTheme.color,
                        ),
                        onPressed: widget.onFavoriteToggle,
                      ),
                    ],
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }

  /// fallback avatar if no logo
  Widget _fallbackAvatar(String text) {
    return Container(
      width: 55,
      height: 55,
      color: Colors.grey.shade300,
      alignment: Alignment.center,
      child: Text(
        text,
        style: const TextStyle(
          fontSize: 18,
          fontWeight: FontWeight.bold,
          color: Colors.black87,
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/news/widgets/animated_background.dart ===

// lib/features/news/widgets/animated_background.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../../core/theme_provider.dart';

/// A full-screen glassmorphic overlay that blurs the content behind it
/// and applies a semi-transparent tint based on the active theme.
class AnimatedBackground extends StatelessWidget {
  /// Optional future hook (unused) for animation duration
  final Duration duration;
  /// The content rendered on top of the glass effect
  final Widget? child;
  /// Tint opacity for the glass overlay
  final double overlayOpacity;

  const AnimatedBackground({
    super.key,
    this.duration = const Duration(seconds: 20),
    this.child,
    this.overlayOpacity = 0.3,
  });

  @override
  Widget build(BuildContext context) {
    final mode = context.watch<ThemeProvider>().appThemeMode;

    return Stack(
      fit: StackFit.expand,
      children: [
        // 1) Blur everything behind
        Positioned.fill(
          child: BackdropFilter(
            filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20),
            child: Container(color: Colors.transparent),
          ),
        ),
        // 2) Semi-transparent tint overlay
        Container(color: _glassTint(mode)),
        // 3) Your child widget
        if (child != null) child!,
      ],
    );
  }

  /// Chooses a tint color per theme
  Color _glassTint(AppThemeMode mode) {
    switch (mode) {
      case AppThemeMode.dark:
        return Colors.black.withOpacity(overlayOpacity);
      case AppThemeMode.bangladesh:
        return const Color(0xFF004D40).withOpacity(overlayOpacity);
      case AppThemeMode.light:
      default:
        return Colors.white.withOpacity(overlayOpacity);
    }
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/movies/movie_widget.dart ===

import 'package:flutter/material.dart';

/// A simple movie widget that shows a cover image and some text.
class MovieWidget extends StatelessWidget {
  /// Path to the cover image asset.
  final String coverAsset;

  const MovieWidget({
    Key? key,
    required this.coverAsset,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        // Cover image
        ClipRRect(
          borderRadius: BorderRadius.circular(16),
          child: Image.asset(
            coverAsset,
            width: double.infinity,
            height: 180,
            fit: BoxFit.cover,
          ),
        ),
        const SizedBox(height: 12),

        // Example title / subtitle—keep or replace as you like
        Text(
          'Top Picks for You',
          style: Theme.of(context).textTheme.titleLarge,
        ),
        const SizedBox(height: 8),
        Text(
          'Discover the latest releases and classics handpicked for you.',
          style: Theme.of(context).textTheme.bodyMedium,
          textAlign: TextAlign.center,
        ),
      ],
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/movies/movie_list_horizontal.dart ===

// lib/widgets/movie_list_horizontal.dart

import 'package:flutter/material.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:provider/provider.dart';
import '../../core/theme_provider.dart' show AppThemeMode;
import 'movie_service.dart';
import 'movie.dart';
import 'movie_detail_screen.dart';
import '/core/language_provider.dart'; // Import for language compatibility

class MovieListHorizontal extends StatefulWidget {
  final String category;
  final AppThemeMode theme;
  final String language;

  MovieListHorizontal({required this.category, required this.theme, required this.language});

  @override
  _MovieListHorizontalState createState() => _MovieListHorizontalState();
}

class _MovieListHorizontalState extends State<MovieListHorizontal> {
  late Future<List<Movie>> futureMovies;

  @override
  void initState() {
    super.initState();
    futureMovies = MovieService.fetchMovies(widget.category, widget.language); // language is used here
  }

  @override
  Widget build(BuildContext context) {
    final languageProvider = Provider.of<LanguageProvider>(context);
    final currentLanguage = languageProvider.locale.languageCode; // Access the current language

    return FutureBuilder<List<Movie>>(
      future: futureMovies,
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return Center(child: CircularProgressIndicator());
        } else if (snapshot.hasError) {
          return Center(child: Text('Error loading movies'));
        } else {
          final movies = snapshot.data!;
          return ListView.builder(
            scrollDirection: Axis.horizontal,
            itemCount: movies.length,
            itemBuilder: (context, index) {
              final movie = movies[index];
              return GestureDetector(
                onTap: () {
                  Navigator.push(context, MaterialPageRoute(
                    builder: (_) => MovieDetailScreen(movie: movie, language: currentLanguage),
                  ));
                },
                child: Container(
                  width: 140,
                  margin: EdgeInsets.all(8),
                  child: Column(
                    children: [
                      Expanded(
                        child: CachedNetworkImage(
                          imageUrl: 'https://image.tmdb.org/t/p/w500${movie.posterPath}',
                          placeholder: (context, url) => Center(child: CircularProgressIndicator()),
                          errorWidget: (context, url, error) => Icon(Icons.error),
                          fit: BoxFit.cover,
                        ),
                      ),
                      SizedBox(height: 5),
                      Text(
                        movie.title,
                        maxLines: 2,
                        overflow: TextOverflow.ellipsis,
                        style: TextStyle(fontSize: 12),
                      ),
                      SizedBox(height: 2),
                      Row(
                        children: [
                          Icon(Icons.star, size: 14, color: Colors.amber),
                          SizedBox(width: 2),
                          Text(movie.voteAverage.toString(), style: TextStyle(fontSize: 12)),
                        ],
                      ),
                    ],
                  ),
                ),
              );
            },
          );
        }
      },
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/movies/movie_detail_screen.dart ===

import 'package:flutter/material.dart';
import 'movie.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter_rating_bar/flutter_rating_bar.dart';

class MovieDetailScreen extends StatelessWidget {
  final Movie movie;

  MovieDetailScreen({required this.movie, required String language});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(movie.title),
      ),
      body: CustomScrollView(
        slivers: [
          SliverAppBar(
            expandedHeight: 300,
            pinned: true,
            flexibleSpace: FlexibleSpaceBar(
              title: Text(movie.title),
              background: CachedNetworkImage(
                imageUrl: 'https://image.tmdb.org/t/p/w500${movie.backdropPath ?? movie.posterPath}',
                fit: BoxFit.cover,
              ),
            ),
          ),
          SliverToBoxAdapter(
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  RatingBarIndicator(
                    rating: movie.voteAverage / 2,
                    itemCount: 5,
                    itemSize: 25,
                    itemBuilder: (context, _) => Icon(Icons.star, color: Colors.amber),
                  ),
                  SizedBox(height: 10),
                  Text('Release Date: ${movie.releaseDate}', style: TextStyle(fontSize: 16)),
                  SizedBox(height: 10),
                  Text('Genres: ${movie.genreIds.join(', ')}', style: TextStyle(fontSize: 16)),
                  SizedBox(height: 10),
                  Text(movie.overview, style: TextStyle(fontSize: 16)),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/movies/movie.dart ===

// lib/models/movie.dart

class Movie {
  final int id;
  final String title;
  final String overview;
  final String posterPath;
  final String backdropPath;
  final double voteAverage;
  final String releaseDate;
  final List<int> genreIds;
  final String originalLanguage;
  final double popularity;

  Movie({
    required this.id,
    required this.title,
    required this.overview,
    required this.posterPath,
    required this.backdropPath,
    required this.voteAverage,
    required this.releaseDate,
    required this.genreIds,
    required this.originalLanguage,
    required this.popularity,
  });

  // Factory method to convert JSON data from API response to a Movie object
  factory Movie.fromJson(Map<String, dynamic> json) {
    return Movie(
      id: json['id'],
      title: json['title'] ?? '',
      overview: json['overview'] ?? '',
      posterPath: json['poster_path'] ?? '',
      backdropPath: json['backdrop_path'] ?? '',
      voteAverage: (json['vote_average'] as num).toDouble(),
      releaseDate: json['release_date'] ?? '',
      genreIds: List<int>.from(json['genre_ids'] ?? []),
      originalLanguage: json['original_language'] ?? '',
      popularity: (json['popularity'] as num).toDouble(),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/movies/movie_service.dart ===

import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'movie.dart';

class MovieService {
  static Future<List<Movie>> fetchMovies(String category, String language) async {
    final apiKey = dotenv.env['TMDB_API_KEY'];
    final url = 'https://api.themoviedb.org/3/movie/$category?api_key=$apiKey&language=$language';
    final response = await http.get(Uri.parse(url));

    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      final List results = data['results'];
      return results.map((json) => Movie.fromJson(json)).toList();
    } else {
      throw Exception('Failed to load movies');
    }
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/login/login_screen.dart ===

import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import '../../../features/profile/auth_service.dart';
import '../../../localization/l10n/app_localizations.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final TextEditingController _emailCtl = TextEditingController();
  final TextEditingController _passCtl = TextEditingController();
  String? _error;

  @override
  void dispose() {
    _emailCtl.dispose();
    _passCtl.dispose();
    super.dispose();
  }

  void _login() async {
    final msg = await AuthService().login(
      _emailCtl.text.trim(),
      _passCtl.text.trim(),
    );

    if (msg != null) {
      setState(() => _error = msg);
    } else {
      if (!mounted) return;
      context.go('/home');
    }
  }

  void _loginWithGoogle() async {
    final result = await AuthService().signInWithGoogle();
    if (!mounted) return;
    if (result != null) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(result)),
      );
    } else {
      context.go('/home');
    }
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;

    return Scaffold(
      appBar: AppBar(
        title: Text(loc.login),
        automaticallyImplyLeading: false,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => context.go('/home'),
        ),
      ),
      body: Padding(
        padding: const EdgeInsets.all(24),
        child: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              if (_error != null) ...[
                Text(
                  _localizedError(loc, _error!),
                  style: const TextStyle(color: Colors.red),
                ),
                const SizedBox(height: 16),
              ],
              TextField(
                controller: _emailCtl,
                decoration: InputDecoration(labelText: loc.email),
                keyboardType: TextInputType.emailAddress,
              ),
              const SizedBox(height: 12),
              TextField(
                controller: _passCtl,
                decoration: InputDecoration(labelText: loc.password),
                obscureText: true,
              ),
              const SizedBox(height: 24),
              ElevatedButton(
                onPressed: _login,
                style: ElevatedButton.styleFrom(minimumSize: const Size.fromHeight(50)),
                child: Text(loc.login),
              ),
              const SizedBox(height: 12),
              ElevatedButton.icon(
                icon: Image.asset('assets/google_logo.png', height: 24),
                label: const Text('Continue with Google'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.white,
                  foregroundColor: Colors.black87,
                  minimumSize: const Size.fromHeight(50),
                ),
                onPressed: _loginWithGoogle,
              ),
              const SizedBox(height: 12),
              Center(
                child: TextButton(
                  onPressed: () => context.go('/signup'),
                  child: Text(loc.createAccount),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  String _localizedError(AppLocalizations loc, String msg) {
    switch (msg) {
      case 'Invalid email or password.':
        return loc.invalidCredentials;
      case 'No account found. Please sign up first.':
        return loc.noAccountFound;
      case 'Account already exists. Please log in.':
        return loc.accountExists;
      default:
        return msg;
    }
  }
}

// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/onboarding/onboarding_screen.dart ===

// path: lib/features/onboarding/onboarding_screen.dart

import 'package:flutter/material.dart';
import 'package:lottie/lottie.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:go_router/go_router.dart';
import '../../localization/l10n/app_localizations.dart';

class OnboardingScreen extends StatefulWidget {
  const OnboardingScreen({Key? key}) : super(key: key);

  @override
  State<OnboardingScreen> createState() => _OnboardingScreenState();
}

class _OnboardingScreenState extends State<OnboardingScreen> {
  final PageController _controller = PageController();
  int _currentIndex = 0;

  final List<_OnboardingPage> _pages = [
    _OnboardingPage(
      titleBuilder: (loc) => loc.bdNewsHub,
      descriptionBuilder: (loc) => loc.latest,
      animationAsset: 'assets/lottie/news.json',
    ),
    _OnboardingPage(
      titleBuilder: (loc) => loc.fastReliable ?? 'Fast & Reliable',
      descriptionBuilder: (loc) => loc.digitalTech,
      animationAsset: 'assets/lottie/rocket.json',
    ),
    _OnboardingPage(
      titleBuilder: (loc) => loc.personalizedExperience ?? 'Personalized Experience',
      descriptionBuilder: (loc) => loc.settings,
      animationAsset: 'assets/lottie/settings.json',
    ),
  ];

  Future<void> _completeOnboarding() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('onboardingCompleted', true);
    context.go('/login');
  }

  void _nextPage() {
    if (_currentIndex < _pages.length - 1) {
      _controller.nextPage(duration: const Duration(milliseconds: 400), curve: Curves.ease);
    } else {
      _completeOnboarding();
    }
  }

  void _skipToLast() {
    _controller.animateToPage(
      _pages.length - 1,
      duration: const Duration(milliseconds: 400),
      curve: Curves.ease,
    );
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final theme = Theme.of(context);

    return Scaffold(
      body: SafeArea(
        child: Stack(
          children: [
            PageView.builder(
              controller: _controller,
              itemCount: _pages.length,
              onPageChanged: (index) => setState(() => _currentIndex = index),
              itemBuilder: (context, index) {
                final page = _pages[index];
                return Padding(
                  padding: const EdgeInsets.all(24.0),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    children: [
                      // App icon at top
                      Image.asset(
                        'assets/app-icon.png',
                        width: 96,
                        height: 96,
                      ),
                      const SizedBox(height: 24),
                      Expanded(
                        child: Lottie.asset(
                          page.animationAsset,
                          repeat: true,
                          fit: BoxFit.contain,
                        ),
                      ),
                      const SizedBox(height: 24),
                      Text(
                        page.titleBuilder(loc),
                        textAlign: TextAlign.center,
                        style: theme.textTheme.headlineSmall?.copyWith(
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      const SizedBox(height: 16),
                      Text(
                        page.descriptionBuilder(loc),
                        textAlign: TextAlign.center,
                        style: theme.textTheme.bodyLarge,
                      ),
                      const SizedBox(height: 32),
                    ],
                  ),
                );
              },
            ),
            // Skip button
            if (_currentIndex < _pages.length - 1)
              Positioned(
                right: 16,
                top: 16,
                child: TextButton(
                  onPressed: _skipToLast,
                  child: Text(
                    loc.close,
                    style: theme.textTheme.bodyMedium,
                  ),
                ),
              ),
            // Page indicators + Next
            Positioned(
              bottom: 24,
              left: 24,
              right: 24,
              child: Column(
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: List.generate(
                      _pages.length,
                      (idx) {
                        final selected = idx == _currentIndex;
                        return AnimatedContainer(
                          duration: const Duration(milliseconds: 300),
                          margin: const EdgeInsets.symmetric(horizontal: 4),
                          width: selected ? 24 : 8,
                          height: 8,
                          decoration: BoxDecoration(
                            color: selected
                                ? theme.colorScheme.primary
                                : theme.disabledColor,
                            borderRadius: BorderRadius.circular(6),
                          ),
                        );
                      },
                    ),
                  ),
                  const SizedBox(height: 16),
                  ElevatedButton(
                    onPressed: _nextPage,
                    style: ElevatedButton.styleFrom(
                      minimumSize: const Size.fromHeight(48),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    child: Text(
                      _currentIndex == _pages.length - 1
                          ? loc.getStarted
                          : loc.next,
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}

/// A model for each onboarding page, with localized getters.
class _OnboardingPage {
  final String Function(AppLocalizations) titleBuilder;
  final String Function(AppLocalizations) descriptionBuilder;
  final String animationAsset;

  const _OnboardingPage({
    required this.titleBuilder,
    required this.descriptionBuilder,
    required this.animationAsset,
  });
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/help/help_screen.dart ===

import 'package:flutter/material.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:go_router/go_router.dart';

class HelpScreen extends StatelessWidget {
  const HelpScreen({super.key});

  Future<void> _launchEmail() async {
    final Uri emailUri = Uri(
      scheme: 'mailto',
      path: 'support@dsmobiles.com',
      queryParameters: {'subject': 'Help & Support Inquiry'},
    );
    if (await canLaunchUrl(emailUri)) {
      await launchUrl(emailUri);
    }
  }

  Future<void> _launchWebsite() async {
    final Uri websiteUri = Uri.parse('https://www.dsmobiles.com');
    if (await canLaunchUrl(websiteUri)) {
      await launchUrl(websiteUri, mode: LaunchMode.externalApplication);
    }
  }

  Future<void> _launchRateUs() async {
    final Uri rateUri = Uri.parse('https://play.google.com/store/apps/details?id=com.example.app');
    if (await canLaunchUrl(rateUri)) {
      await launchUrl(rateUri, mode: LaunchMode.externalApplication);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Help & Support'),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => context.go('/home'),
        ),
      ),
      body: ListView(
        padding: const EdgeInsets.all(16),
        children: [
          const ListTile(
            leading: Icon(Icons.question_answer),
            title: Text('How to use BDNewspaper?'),
            subtitle: Text('Navigate news categories from the homepage.'),
          ),
          const ListTile(
            leading: Icon(Icons.lock),
            title: Text('Is my data secure?'),
            subtitle: Text('Yes, we respect your privacy and do not store personal data.'),
          ),
          const ListTile(
            leading: Icon(Icons.update),
            title: Text('How to get latest updates?'),
            subtitle: Text('Updates are pushed automatically via Play Store.'),
          ),
          const Divider(height: 32),
          ElevatedButton.icon(
            onPressed: _launchEmail,
            icon: const Icon(Icons.email_outlined),
            label: const Text('Email Support'),
            style: ElevatedButton.styleFrom(minimumSize: const Size.fromHeight(50)),
          ),
          const SizedBox(height: 16),
          OutlinedButton.icon(
            onPressed: _launchWebsite,
            icon: const Icon(Icons.language),
            label: const Text('Visit Website'),
            style: OutlinedButton.styleFrom(minimumSize: const Size.fromHeight(50)),
          ),
          const SizedBox(height: 16),
          OutlinedButton.icon(
            onPressed: _launchRateUs,
            icon: const Icon(Icons.star_rate_outlined),
            label: const Text('Rate Us'),
            style: OutlinedButton.styleFrom(minimumSize: const Size.fromHeight(50)),
          ),
        ],
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/extras/extras_screen.dart ===

// lib/features/extras/extras_screen.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import '../../core/theme_provider.dart';
import '../../features/common/appBar.dart';

class ExtrasScreen extends StatefulWidget {
  const ExtrasScreen({Key? key}) : super(key: key);

  @override
  State<ExtrasScreen> createState() => _ExtrasScreenState();
}

class _ExtrasScreenState extends State<ExtrasScreen> {
  @override
  Widget build(BuildContext context) {
    final mode = context.watch<ThemeProvider>().appThemeMode;

    // theme‐aware background
    late String bgAsset;
    switch (mode) {
      case AppThemeMode.dark:
        bgAsset = 'assets/theme/Ex_dark.png';
        break;
      case AppThemeMode.bangladesh:
        bgAsset = 'assets/theme/Ex_desh.png';
        break;
      case AppThemeMode.light:
      default:
        bgAsset = 'assets/theme/Ex_light.png';
    }

    return Scaffold(
      extendBodyBehindAppBar: true,
      backgroundColor: Colors.transparent,

      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        centerTitle: true,
        title: const AppBarTitle('Extras'),
        flexibleSpace: ClipRect(
          child: BackdropFilter(
            filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20),
            child: Container(color: Colors.transparent),
          ),
        ),
      ),

      body: Stack(
        fit: StackFit.expand,
        children: [
          // 1) Full-screen theme image
          Image.asset(bgAsset, fit: BoxFit.cover),

          // 2) Simple tint overlay
          Positioned.fill(
            child: Container(
              color: mode == AppThemeMode.light
                  ? Colors.white.withOpacity(0.15)
                  : Colors.black.withOpacity(0.25),
            ),
          ),

          // 3) Three edge-to-edge cover cards
          SafeArea(
            child: SingleChildScrollView(
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 24),
              child: Column(
                children: [
                  // CineSnap cover
                  _buildCoverCard('assets/widgets/CineSnap.png'),
                  const SizedBox(height: 24),

                  // CricShakti cover
                  _buildCoverCard('assets/widgets/CricShakti.png'),
                  const SizedBox(height: 24),

                  // SdBeats cover
                  _buildCoverCard('assets/widgets/SdBeats.png'),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  /// A glass‐morphic card that wraps an image. Width = parent width, height = image's aspect ratio.
  Widget _buildCoverCard(String assetPath) {
    return ClipRRect(
      borderRadius: BorderRadius.circular(24),
      child: BackdropFilter(
        filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20),
        child: Container(
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(24),
            border: Border.all(color: Colors.white.withOpacity(0.5), width: 1.5),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.2),
                blurRadius: 10,
                offset: const Offset(0, 6),
              ),
            ],
          ),
          // Image takes full width, preserves its own aspect ratio
          child: Image.asset(
            assetPath,
            width: double.infinity,
            fit: BoxFit.fitWidth,
          ),
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/firebase_options.dart ===

// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'AIzaSyDHaDNvv-pLn4NYcpS139J2Bv6r2VQDA-g',
    appId: '1:92831175770:web:c9f2352eb095beec93f463',
    messagingSenderId: '92831175770',
    projectId: 'droid-e9db9',
    authDomain: 'droid-e9db9.firebaseapp.com',
    storageBucket: 'droid-e9db9.firebasestorage.app',
    measurementId: 'G-LKZEDMNFX6',
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyCeSxbjb0TIYG0kWuLMm-j7TdbZ0nXt8go',
    appId: '1:92831175770:android:40fc17be01d7222293f463',
    messagingSenderId: '92831175770',
    projectId: 'droid-e9db9',
    storageBucket: 'droid-e9db9.firebasestorage.app',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIzaSyA0Vsaayr2jDfB_FEyHQ7PCJ30A51WUsc8',
    appId: '1:92831175770:ios:b69407f94ea150b993f463',
    messagingSenderId: '92831175770',
    projectId: 'droid-e9db9',
    storageBucket: 'droid-e9db9.firebasestorage.app',
    iosBundleId: 'com.example.droid',
  );

  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: 'AIzaSyA0Vsaayr2jDfB_FEyHQ7PCJ30A51WUsc8',
    appId: '1:92831175770:ios:b69407f94ea150b993f463',
    messagingSenderId: '92831175770',
    projectId: 'droid-e9db9',
    storageBucket: 'droid-e9db9.firebasestorage.app',
    iosBundleId: 'com.example.droid',
  );
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/main.dart ===

import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:firebase_core/firebase_core.dart';

import 'core/app_paths.dart';
import 'core/routes.dart';
import 'core/theme.dart';
import 'core/theme_provider.dart';
import 'core/language_provider.dart';
import 'localization/l10n/app_localizations.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  MyApp({Key? key}) : super(key: key);

  // Start at the Dart splash screen
  final GoRouter _router = AppRouter.createRouter(
    initialLocation: AppPaths.splash,
  );

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => ThemeProvider()),
        ChangeNotifierProvider(create: (_) => LanguageProvider()),
      ],
      child: Consumer2<ThemeProvider, LanguageProvider>(
        builder: (context, themeProv, langProv, _) {
          return MaterialApp.router(
            title: 'BDNewsHub',
            debugShowCheckedModeBanner: false,
            theme: AppTheme.buildLightTheme(),
            darkTheme: AppTheme.buildDarkTheme(),
            themeMode: themeProv.themeMode,
            routerConfig: _router,
            locale: langProv.locale,
            supportedLocales: const [
              Locale('en'),
              Locale('bn'),
            ],
            localizationsDelegates: const [
              AppLocalizations.delegate,
              GlobalMaterialLocalizations.delegate,
              GlobalWidgetsLocalizations.delegate,
              GlobalCupertinoLocalizations.delegate,
            ],
          );
        },
      ),
    );
  }
}

// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/main_navigation_screen.dart ===

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import 'features/home/home_screen.dart';
import 'features/news/newspaper_screen.dart';
import 'features/magazine/magazine_screen.dart';
import 'features/settings/settings_screen.dart';
import 'features/extras/extras_screen.dart';
import 'localization/l10n/app_localizations.dart';
import 'core/theme_provider.dart';

class MainNavigationScreen extends StatefulWidget {
  final int selectedTab;
  const MainNavigationScreen({Key? key, this.selectedTab = 0}) : super(key: key);

  @override
  State<MainNavigationScreen> createState() => _MainNavigationScreenState();
}

class _MainNavigationScreenState extends State<MainNavigationScreen> {
  late int _currentIndex;
  late final List<Widget> _tabs;

  // Base icon names (without theme suffix)
  final List<String> _iconNames = [
    'home',
    'newspapers',
    'magazines',
    'settings',
    'Extras',
  ];

  @override
  void initState() {
    super.initState();
    _currentIndex = widget.selectedTab;
    _tabs = const [
      HomeScreen(),
      NewspaperScreen(),
      MagazineScreen(),
      SettingsScreen(),
      ExtrasScreen(),
    ];
  }

  void _onItemTapped(int index) {
    setState(() => _currentIndex = index);
  }

  @override
  Widget build(BuildContext context) {
    final themeProv = context.watch<ThemeProvider>();
    final mode = themeProv.appThemeMode;
    final loc = AppLocalizations.of(context)!;
    final cs = Theme.of(context).colorScheme;

    // Labels for each tab
    final labels = [
      loc.home,
      loc.newspapers,
      loc.magazines,
      loc.settings,
      'Extras',
    ];

    // Gradients based on theme colors
    final Gradient activeGradient = LinearGradient(
      begin: Alignment.topLeft,
      end: Alignment.bottomRight,
      colors: [cs.primary, cs.secondary],
    );
    final Gradient inactiveGradient = const LinearGradient(
      begin: Alignment.topLeft,
      end: Alignment.bottomRight,
      colors: [Colors.white24, Colors.white10],
    );

    // Theme suffix
    String themeSuffix;
    switch (mode) {
      case AppThemeMode.dark:
        themeSuffix = 'dark';
        break;
      case AppThemeMode.bangladesh:
        themeSuffix = 'desh';
        break;
      default:
        themeSuffix = 'light';
    }

    return Scaffold(
      body: IndexedStack(
        index: _currentIndex,
        children: _tabs,
      ),
      bottomNavigationBar: ClipRRect(
        borderRadius: const BorderRadius.only(
          topLeft: Radius.circular(24),
          topRight: Radius.circular(24),
        ),
        child: BackdropFilter(
          filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20),
          child: Container(
            padding: const EdgeInsets.symmetric(vertical: 8),
            decoration: BoxDecoration(
              color: mode == AppThemeMode.dark
                  ? Colors.black.withOpacity(0.6)
                  : Colors.white.withOpacity(0.6),
              border: Border.all(color: Colors.white24, width: 1),
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: List.generate(_tabs.length, (i) {
                final selected = i == _currentIndex;
                final String assetPath =
                    'assets/icons/${_iconNames[i]}_$themeSuffix.png';
                return GestureDetector(
                  onTap: () => _onItemTapped(i),
                  child: _buildNavIcon(
                    assetPath: assetPath,
                    label: labels[i],
                    selected: selected,
                    activeGradient: activeGradient,
                    inactiveGradient: inactiveGradient,
                  ),
                );
              }),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildNavIcon({
    required String assetPath,
    required String label,
    required bool selected,
    required Gradient activeGradient,
    required Gradient inactiveGradient,
  }) {
    // Circle sizes
    final double size = selected ? 60 : 60;
    // Icon should fill the circle entirely
    final double iconSize = size;
    // Shadow color matching primary
    final Color shadowColor =
        selected ? activeGradient.colors.first.withOpacity(0.4) : Colors.black26;

    // Label font weight always bold for a bolder screen
    final FontWeight labelWeight = FontWeight.bold;
    final double labelSize = 14;

    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        AnimatedContainer(
          duration: const Duration(milliseconds: 300),
          width: size,
          height: size,
          decoration: BoxDecoration(
            shape: BoxShape.circle,
            gradient: selected ? activeGradient : inactiveGradient,
            boxShadow: selected
                ? [
                    BoxShadow(
                      color: shadowColor,
                      blurRadius: 14,
                      offset: const Offset(0, 6),
                    ),
                  ]
                : null,
          ),
          child: Center(
            child: Image.asset(
              assetPath,
              width: iconSize,
              height: iconSize,
              fit: BoxFit.contain,
            ),
          ),
        ),
        const SizedBox(height: 4),
        Text(
          label,
          style: TextStyle(
            fontSize: labelSize,
            fontWeight: labelWeight,
            color: selected ? Colors.white : Colors.white70,
          ),
        ),
      ],
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/data/repositories/news_repository.dart ===

// path: lib/data/repositories/news_repository.dart

import 'dart:async';
import 'package:flutter/foundation.dart';
import '../services/news_service.dart';
import '../models/news_article.dart';

class NewsRepository {
  factory NewsRepository() => _instance;
  NewsRepository._internal();
  static final NewsRepository _instance = NewsRepository._internal();

  final NewsService _newsService = NewsService();

  /// 🧠 Smart Cache Memory
  final Map<String, _CacheEntry> _cache = {};

  /// ⚡ Auto cache expiration time (e.g., 5 minutes)
  static const Duration _cacheDuration = Duration(minutes: 5);

  /// ✅ Fetch Latest News
  Future<List<NewsArticle>> fetchLatestNews() async {
    return _getCachedOrFetch('latest', _newsService.fetchLatestNews);
  }

  /// ✅ Fetch National News
  Future<List<NewsArticle>> fetchNationalNews() async {
    return _getCachedOrFetch('national', _newsService.fetchNationalNews);
  }

  /// ✅ Fetch Trending News
  Future<List<NewsArticle>> fetchTrendingNews() async {
    return _getCachedOrFetch('trending', _newsService.fetchTrendingNews);
  }

  /// ✅ Fetch Tech News
  Future<List<NewsArticle>> fetchTechNews() async {
    return _getCachedOrFetch('tech', _newsService.fetchTechNews);
  }

  /// ✅ Fetch Sports News
  Future<List<NewsArticle>> fetchSportsNews() async {
    return _getCachedOrFetch('sports', _newsService.fetchSportsNews);
  }

  /// ✅ Fetch Entertainment News
  Future<List<NewsArticle>> fetchEntertainmentNews() async {
    return _getCachedOrFetch('entertainment', _newsService.fetchEntertainmentNews);
  }

  /// ✅ Fetch Health News
  Future<List<NewsArticle>> fetchHealthNews() async {
    return _getCachedOrFetch('health', _newsService.fetchHealthNews);
  }

  /// 🔥 Smart method: Use Cache if fresh, otherwise Fetch
  Future<List<NewsArticle>> _getCachedOrFetch(
    String key,
    Future<List<NewsArticle>> Function() fetchFunction,
  ) async {
    final now = DateTime.now();
    final cached = _cache[key];

    if (cached != null && now.difference(cached.timestamp) < _cacheDuration) {
      if (kDebugMode) {
        print('Cache hit: $key');
      }
      return cached.articles;
    }

    if (kDebugMode) {
      print('Cache miss or expired: $key. Fetching new data.');
    }

    final fetchedArticles = await fetchFunction();

    _cache[key] = _CacheEntry(
      articles: fetchedArticles,
      timestamp: now,
    );

    return fetchedArticles;
  }
}

/// 📦 Simple private cache object
class _CacheEntry {
  final List<NewsArticle> articles;
  final DateTime timestamp;

  _CacheEntry({required this.articles, required this.timestamp});
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/data/models/news_article.dart ===

// path: lib/data/models/news_article.dart

import 'package:webfeed_revised/webfeed_revised.dart';

class NewsArticle {
  NewsArticle({
    required this.title,
    this.description = '',
    required this.url,
    required this.source,
    this.imageUrl,
    this.language = 'en', // Default to English
    this.snippet = '',
    this.fullContent = '',
    required this.publishedAt,
    this.isLive = false,
    this.sourceOverride,
    this.sourceLogo,
  });

  final String title;
  final String description;
  final String url;
  final String source;
  final String? imageUrl;
  final String language;
  final String snippet;
  final String fullContent;
  final DateTime publishedAt;
  final bool isLive;

  String? sourceOverride;
  String? sourceLogo; 

  /// Create from RSS item
  factory NewsArticle.fromRssItem(RssItem item) {
    final mediaUrl = item.media?.thumbnails?.firstOrNull?.url ??
        item.media?.contents?.firstOrNull?.url ??
        _extractImageFromEnclosure(item) ??
        _extractImageFromHtml(item.content?.value ?? item.description ?? '');

    return NewsArticle(
      title: item.title ?? '',
      description: item.description ?? '',
      url: item.link ?? '',
      source: item.source?.value ?? '',
      imageUrl: mediaUrl,
      language: item.dc?.language ?? 'en',
      publishedAt: item.pubDate ?? DateTime.now(),
    );
  }

  /// Create from Firebase or other JSON Map
  factory NewsArticle.fromMap(Map<String, dynamic> map) {
    return NewsArticle(
      title: map['title'] ?? '',
      description: map['description'] ?? '',
      url: map['url'] ?? '',
      source: map['source'] ?? '',
      imageUrl: map['imageUrl'],
      language: map['language'] ?? 'en',
      snippet: map['snippet'] ?? '',
      fullContent: map['fullContent'] ?? '',
      publishedAt: DateTime.tryParse(map['publishedAt'] ?? '') ?? DateTime.now(),
      isLive: map['isLive'] ?? false,
      sourceOverride: map['sourceOverride'],
      sourceLogo: map['sourceLogo'],
    );
  }

  /// Convert to JSON Map
  Map<String, dynamic> toMap() {
    return {
      'title': title,
      'description': description,
      'url': url,
      'source': source,
      'imageUrl': imageUrl,
      'language': language,
      'snippet': snippet,
      'fullContent': fullContent,
      'publishedAt': publishedAt.toIso8601String(),
      'isLive': isLive,
      'sourceOverride': sourceOverride,
      'sourceLogo': sourceLogo,
    };
  }

  static String? _extractImageFromEnclosure(RssItem item) {
    final url = item.enclosure?.url ?? '';
    return (url.endsWith('.jpg') || url.endsWith('.png')) ? url : null;
  }

  static String? _extractImageFromHtml(String html) {
    final RegExp imgTag = RegExp(r'<img[^>]+src="([^">]+)"');
    final match = imgTag.firstMatch(html);
    return match?.group(1);
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/data/services/news_service.dart ===

import '../models/news_article.dart';

class NewsService {
  // Example base URL for API, adjust if needed
  static const String _baseUrl = "https://api.yournewsprovider.com";

  Future<List<NewsArticle>> fetchLatestNews() async {
    return _fetchNewsByCategory('latest');
  }

  Future<List<NewsArticle>> fetchNationalNews() async {
    return _fetchNewsByCategory('national');
  }

  Future<List<NewsArticle>> fetchTrendingNews() async {
    return _fetchNewsByCategory('trending');
  }

  Future<List<NewsArticle>> fetchTechNews() async {
    return _fetchNewsByCategory('technology');
  }

  Future<List<NewsArticle>> fetchSportsNews() async {
    return _fetchNewsByCategory('sports');
  }

  Future<List<NewsArticle>> fetchEntertainmentNews() async {
    return _fetchNewsByCategory('entertainment');
  }

  Future<List<NewsArticle>> fetchHealthNews() async {
    return _fetchNewsByCategory('health');
  }

  // 🔥 Private helper method
  Future<List<NewsArticle>> _fetchNewsByCategory(String category) async {
    try {
      // TODO: Replace this with actual HTTP call using package:http or Dio
      await Future.delayed(Duration(milliseconds: 500)); // Simulate network delay

      // For now returning dummy list
      return <NewsArticle>[
  NewsArticle(
    title: 'Sample $category News Title',
    description: 'This is a sample description for $category news.',
    url: 'https://example.com/sample-$category-news',
    source: 'BD News Hub', // 👈 FIX: Add source here
    imageUrl: 'https://via.placeholder.com/150',
    publishedAt: DateTime.now(),
  ),
];
;
    } catch (e) {
      print('Error fetching $category news: $e');
      return []; // Return empty list on error
    }
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/data/services/rss_service.dart ===

// path: lib/data/services/rss_service.dart

import 'dart:convert';
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:webfeed_revised/webfeed_revised.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import '../models/news_article.dart';

class RssService {
  static const Map<String, Map<String, List<Map<String, String>>>> _feeds = {
    'bn': {
      'latest': [
        { 'name': 'প্রথম আলো', 'url': 'https://www.prothomalo.com/feed' },
        { 'name': 'কালের কণ্ঠ', 'url': 'https://www.kalerkantho.com/rss.xml' },
        { 'name': 'বিডিনিউজ২৪ বাংলা', 'url': 'https://bangla.bdnews24.com/rss/bangla.xml' },
        { 'name': 'যুগান্তর', 'url': 'https://www.jugantor.com/rss.xml' },
        { 'name': 'ইত্তেফাক', 'url': 'https://www.ittefaq.com.bd/rss.xml' },
        { 'name': 'আনন্দবাজার পত্রিকা', 'url': 'https://www.anandabazar.com/rss/abp_home.xml' },
        { 'name': 'এই সময়', 'url': 'https://eisamay.com/rssfeedstopstories.cms' },
        { 'name': 'সংবাদ প্রতিদিন', 'url': 'https://www.sangbadpratidin.in/feed/' },
      ],
      'national': [
        { 'name': 'ইত্তেফাক - জাতীয়', 'url': 'https://www.ittefaq.com.bd/rss.xml' },
        { 'name': 'সমকাল জাতীয়', 'url': 'https://samakal.com/rss.xml' },
        { 'name': 'আনন্দবাজার পত্রিকা - দেশ', 'url': 'https://www.anandabazar.com/others/country-news/rssfeed/cid/40.xml' },
      ],
      'business': [
        { 'name': 'বিডিনিউজ২৪ অর্থনীতি', 'url': 'https://bangla.bdnews24.com/economy/rss.xml' },
        { 'name': 'ঢাকা টাইমস বিজনেস', 'url': 'https://www.dhakatimes24.com/business/rss.xml' },
        { 'name': 'সমকাল অর্থনীতি', 'url': 'https://samakal.com/economy/rss.xml' },
        { 'name': 'আনন্দবাজার পত্রিকা - ব্যবসা', 'url': 'https://www.anandabazar.com/business/rssfeed/cid/17.xml' },
      ],
      'sports': [
        { 'name': 'প্রথম আলো - খেলাধুলা', 'url': 'https://www.prothomalo.com/sports/feed' },
        { 'name': 'বিডিনিউজ২৪ স্পোর্টস', 'url': 'https://bangla.bdnews24.com/sport/rss.xml' },
        { 'name': 'এই সময় - খেলাধুলা', 'url': 'https://eisamay.com/rssfeedsports.cms' },
        { 'name': 'সংবাদ প্রতিদিন - খেলা', 'url': 'https://www.sangbadpratidin.in/category/sports/feed/' },
      ],
      'technology': [
        { 'name': 'বিডিনিউজ২৪ টেক', 'url': 'https://bangla.bdnews24.com/tech/rss.xml' },
        { 'name': 'টেকশহর', 'url': 'https://techshohor.com/feed' },
        { 'name': 'গেজেটবিডি', 'url': 'https://gazetebd.com/feed/' },
      ],
      'entertainment': [
        { 'name': 'প্রথম আলো - বিনোদন', 'url': 'https://www.prothomalo.com/entertainment/feed' },
        { 'name': 'বিডিনিউজ২৪ বিনোদন', 'url': 'https://bangla.bdnews24.com/entertainment/rss.xml' },
        { 'name': 'আনন্দবাজার পত্রিকা - বিনোদন', 'url': 'https://www.anandabazar.com/entertainment/rssfeed/cid/41.xml' },
        { 'name': 'এই সময় - বিনোদন', 'url': 'https://eisamay.com/rssfeedentertainment.cms' },
      ],
      'lifestyle': [
        { 'name': 'প্রিয় - লাইফস্টাইল', 'url': 'https://www.priyo.com/lifestyle/rss.xml' },
        { 'name': 'সংবাদ প্রতিদিন - জীবনযাপন', 'url': 'https://www.sangbadpratidin.in/category/lifestyle/feed/' },
      ],
      'blog': [
        { 'name': 'Roar বাংলা', 'url': 'https://roar.media/bangla/feed' },
      ],
    },

    'en': {
      'latest': [
        { 'name': 'CNN Top Stories', 'url': 'https://rss.cnn.com/rss/edition.rss' },
        { 'name': 'BBC World News', 'url': 'https://feeds.bbci.co.uk/news/rss.xml' },
        { 'name': 'Reuters Top News', 'url': 'https://feeds.reuters.com/reuters/topNews' },
        { 'name': 'The Guardian World', 'url': 'https://www.theguardian.com/world/rss' },
      ],
      'national': [
        { 'name': 'Dhaka Tribune', 'url': 'https://www.dhakatribune.com/feed' },
        { 'name': 'Daily Star National', 'url': 'https://www.thedailystar.net/frontpage/rss.xml' },
        { 'name': 'New York Times US', 'url': 'https://rss.nytimes.com/services/xml/rss/nyt/US.xml' },
      ],
      'business': [
        { 'name': 'Forbes', 'url': 'https://www.forbes.com/business/feed/' },
        { 'name': 'Financial Times', 'url': 'https://www.ft.com/?format=rss' },
        { 'name': 'Bloomberg Business', 'url': 'https://www.bloomberg.com/feed/podcast/etf-iq.xml' },
      ],
      'sports': [
        { 'name': 'ESPN Top Sports', 'url': 'https://www.espn.com/espn/rss/news' },
        { 'name': 'Sky Sports', 'url': 'https://www.skysports.com/rss/12040' },
        { 'name': 'BBC Sports', 'url': 'https://feeds.bbci.co.uk/sport/rss.xml?edition=uk' },
      ],
      'technology': [
        { 'name': 'TechCrunch', 'url': 'https://techcrunch.com/feed/' },
        { 'name': 'Ars Technica', 'url': 'https://feeds.arstechnica.com/arstechnica/index' },
        { 'name': 'The Verge Tech', 'url': 'https://www.theverge.com/rss/index.xml' },
      ],
      'entertainment': [
        { 'name': 'Billboard', 'url': 'https://www.billboard.com/feed/' },
        { 'name': 'Variety', 'url': 'https://variety.com/feed/' },
        { 'name': 'Hollywood Reporter', 'url': 'https://www.hollywoodreporter.com/t/rss' },
      ],
      'lifestyle': [
        { 'name': 'Lifehack', 'url': 'https://www.lifehack.org/feed' },
        { 'name': 'MindBodyGreen', 'url': 'https://www.mindbodygreen.com/rss' },
        { 'name': 'VeryWell Health', 'url': 'https://www.verywellhealth.com/rss' },
      ],
      'blog': [
        { 'name': 'Medium Technology', 'url': 'https://medium.com/feed/tag/technology' },
        { 'name': 'Dev.to', 'url': 'https://dev.to/feed' },
        { 'name': 'Hashnode Blogs', 'url': 'https://hashnode.com/feed' },
      ],
    },
  };

  static final FlutterLocalNotificationsPlugin _notificationsPlugin =
      FlutterLocalNotificationsPlugin();

  static Future<void> initializeNotifications() async {
    const AndroidInitializationSettings androidInit =
        AndroidInitializationSettings('@mipmap/ic_launcher');
    const InitializationSettings initSettings =
        InitializationSettings(android: androidInit);
    await _notificationsPlugin.initialize(initSettings);
  }

  static Map<String, List<Map<String, String>>>? getSafeFeeds(Locale locale) {
    final lang = locale.languageCode.split('-').first;
    return _feeds[lang];
  }

  static Future<List<NewsArticle>> fetchRssFeeds(
    List<Map<String, String>> sources, {
    BuildContext? context,
  }) async {
    final client = http.Client();
    try {
      final responses = await Future.wait(
        sources.map((source) => _fetch(
          client,
          source['url']!,
          sourceName: source['name'],
          context: context,
        )),
        eagerError: false,
      );

      final allArticles = responses.expand((list) => list).toList();
      allArticles.sort((a, b) => b.publishedAt.compareTo(a.publishedAt));

      final seenUrls = <String>{};
      return allArticles.where((a) => seenUrls.add(a.url)).toList();
    } finally {
      client.close();
    }
  }

  static Future<List<NewsArticle>> _fetch(
    http.Client client,
    String url, {
    String? sourceName,
    BuildContext? context,
    int retryCount = 2,
  }) async {
    try {
      final response = await client
          .get(Uri.parse(url), headers: {'User-Agent': 'Mozilla/5.0'})
          .timeout(const Duration(seconds: 15));

      if (response.statusCode != 200) {
        if (retryCount > 0) {
          await Future.delayed(const Duration(seconds: 2));
          return _fetch(client, url, sourceName: sourceName, context: context, retryCount: retryCount - 1);
        }
        return [];
      }

      final encoding = _extractEncoding(response.headers['content-type']);
      final body = encoding.decode(response.bodyBytes);
      final feed = RssFeed.parse(body);

      final items = feed.items
              ?.map((item) => NewsArticle.fromRssItem(item))
              .where((a) => a.title.isNotEmpty)
              .toList() ??
          [];

      if (context != null) {
        for (final a in items) {
          if (a.imageUrl != null && a.imageUrl!.isNotEmpty) {
            precacheImage(NetworkImage(a.imageUrl!), context);
          }
        }
      }

      if (sourceName != null) {
        for (final article in items) {
          article.sourceOverride = sourceName;
        }
      }

      return items;
    } catch (_) {
      if (retryCount > 0) {
        await Future.delayed(const Duration(seconds: 2));
        return _fetch(client, url, sourceName: sourceName, context: context, retryCount: retryCount - 1);
      }
      return [];
    }
  }

  static Encoding _extractEncoding(String? contentType) {
    final charset = contentType?.split('charset=').last ?? 'utf-8';
    return Encoding.getByName(charset) ?? utf8;
  }

  static Future<void> pollFeedsAndNotify(Locale locale) async {
    final prefs = await SharedPreferences.getInstance();
    final storedUrls = prefs.getStringList('seenArticles') ?? [];

    final feeds = getSafeFeeds(locale);
    if (feeds == null) return;

    final breakingNewsSources = feeds['breakingNews'] ?? feeds['latest'] ?? [];
    final newArticles = await fetchRssFeeds(breakingNewsSources);

    for (final article in newArticles) {
      if (!storedUrls.contains(article.url)) {
        await _showNotification(article.title);
        storedUrls.add(article.url);
      }
    }

    await prefs.setStringList('seenArticles', storedUrls);
  }

  static Future<void> _showNotification(String title) async {
    const AndroidNotificationDetails androidDetails = AndroidNotificationDetails(
      'rss_channel_id',
      'RSS Updates',
      channelDescription: 'Notifications for new RSS news articles',
      importance: Importance.max,
      priority: Priority.high,
      playSound: true,
    );
    const NotificationDetails platformDetails = NotificationDetails(android: androidDetails);
    await _notificationsPlugin.show(
      DateTime.now().millisecondsSinceEpoch ~/ 1000,
      '📰 New Article',
      title,
      platformDetails,
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/firebase_storage_service.dart ===

// lib/firebase_storage_service.dart

import 'dart:io';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:firebase_auth/firebase_auth.dart';

class FirebaseStorageService {
  final FirebaseStorage _storage = FirebaseStorage.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance;

  Future<String> uploadUserProfilePicture(File file) async {
    final user = _auth.currentUser;
    if (user == null) {
      throw Exception('No authenticated user');
    }
    final ref = _storage.ref('user_uploads/${user.uid}/profile_pic.jpg');
    await ref.putFile(file);
    return await ref.getDownloadURL();
  }

  Future<String> uploadPrivateFile(File file, String fileName) async {
    final user = _auth.currentUser;
    if (user == null) {
      throw Exception('No authenticated user');
    }
    final ref = _storage.ref('private/${user.uid}/$fileName');
    await ref.putFile(file);
    return await ref.getDownloadURL();
  }

  Future<String> getPublicFileUrl(String fileName) async {
    final ref = _storage.ref('public/$fileName');
    return await ref.getDownloadURL();
  }

  Future<void> deleteUserProfilePicture() async {
    final user = _auth.currentUser;
    if (user == null) {
      throw Exception('No authenticated user');
    }
    final ref = _storage.ref('user_uploads/${user.uid}/profile_pic.jpg');
    await ref.delete();
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/widgets/fade_transition_wrapper.dart ===

// lib/widgets/fade_transition_wrapper.dart

import 'dart:ui';
import 'package:flutter/material.dart';

/// A page route that “crystalizes” the transition:
/// 1) Blurs the old page behind a frosted overlay.
/// 2) Fades and gently scales in the new page.
class FadeTransitionWrapper extends PageRouteBuilder {
  FadeTransitionWrapper({required this.child})
      : super(
          transitionDuration: const Duration(milliseconds: 800),
          reverseTransitionDuration: const Duration(milliseconds: 500),
          pageBuilder: (
            BuildContext context,
            Animation<double> animation,
            Animation<double> secondaryAnimation,
          ) =>
              child,
          transitionsBuilder: (
            BuildContext context,
            Animation<double> animation,
            Animation<double> secondaryAnimation,
            Widget child,
          ) {
            // 1) Frosted blur overlay on the old page:
            final blur = Tween<double>(begin: 0, end: 8).animate(
              CurvedAnimation(parent: animation, curve: const Interval(0, 0.5)),
            );
            final frostOpacity = Tween<double>(begin: 0, end: 0.1).animate(
              CurvedAnimation(parent: animation, curve: const Interval(0, 0.5)),
            );

            // 2) Fade and scale the incoming page:
            final fade = CurvedAnimation(parent: animation, curve: Curves.easeInOut);
            final scale = Tween<double>(begin: 0.95, end: 1.0).animate(
              CurvedAnimation(parent: animation, curve: Curves.easeOutBack),
            );

            return Stack(
              fit: StackFit.expand,
              children: [
                // The old page is still in the background; we just blur+frost it.
                BackdropFilter(
                  filter: ImageFilter.blur(sigmaX: blur.value, sigmaY: blur.value),
                  child: Container(color: Colors.white.withOpacity(frostOpacity.value)),
                ),

                // Then bring in the new child with fade+scale:
                FadeTransition(
                  opacity: fade,
                  child: ScaleTransition(
                    scale: scale,
                    alignment: Alignment.center,
                    child: child,
                  ),
                ),
              ],
            );
          },
        );

  final Widget child;
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/widgets/news_list_widget.dart ===

import 'package:flutter/material.dart';
import 'package:cached_network_image/cached_network_image.dart';
import '../../data/models/news_article.dart';

class NewsListWidget extends StatelessWidget {
  final List<NewsArticle> articles;
  final void Function(NewsArticle) onTap;

  const NewsListWidget({Key? key, required this.articles, required this.onTap}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    if (articles.isEmpty) {
      return const Center(child: Text('No articles available.'));
    }

    return RefreshIndicator(
      onRefresh: () async {
        // Optionally: re-fetch articles
      },
      child: ListView.builder(
        itemCount: articles.length,
        physics: const AlwaysScrollableScrollPhysics(),
        itemBuilder: (context, index) {
          final article = articles[index];
          return Card(
            margin: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
            elevation: 4,
            child: ListTile(
              leading: ClipRRect(
                borderRadius: BorderRadius.circular(8),
                child: CachedNetworkImage(
                  imageUrl: article.imageUrl ?? '',
                  placeholder: (context, url) => const SizedBox(
                    width: 50,
                    height: 50,
                    child: Center(child: CircularProgressIndicator(strokeWidth: 2)),
                  ),
                  errorWidget: (context, url, error) => const Icon(Icons.broken_image),
                  width: 70,
                  height: 70,
                  fit: BoxFit.cover,
                ),
              ),
              title: Text(
                article.title,
                maxLines: 2,
                overflow: TextOverflow.ellipsis,
              ),
              subtitle: Text(
                article.source,
                maxLines: 1,
                style: const TextStyle(color: Colors.grey),
              ),
              onTap: () => onTap(article),
            ),
          );
        },
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/widgets/cricket/cricket_service.dart ===

// lib/services/cricket_service.dart
import 'dart:async';
import 'dart:convert';
import 'dart:io';

import 'package:flutter/foundation.dart';
import 'package:http/http.dart' as http;
import 'package:path_provider/path_provider.dart';
import 'match_data.dart';

class CricketService extends ChangeNotifier {
  CricketService._private();
  static final CricketService instance = CricketService._private();

  static const _apiKey = 'YOUR_API_KEY';
  static const _apiUrl = 'https://api.example.com/live-matches';
  static const _cacheFile = 'live_matches_cache.json';
  static const _cacheTTL = Duration(minutes: 5);

  List<MatchData> matches = [];
  bool loading = false;
  bool error = false;
  Timer? _autoTimer;
  DateTime? lastFetched;

  /// Fetch from cache or network
  Future<void> fetchMatches({bool force = false}) async {
    if (!force && lastFetched != null) {
      final age = DateTime.now().difference(lastFetched!);
      if (age < _cacheTTL && matches.isNotEmpty) return;
    }

    loading = true;
    error = false;
    notifyListeners();

    try {
      // 1️⃣ Try cache
      final dir = await getTemporaryDirectory();
      final file = File('${dir.path}/$_cacheFile');
      if (!force && await file.exists()) {
        final data = json.decode(await file.readAsString()) as Map<String, dynamic>;
        final fetched = DateTime.parse(data['timestamp'] as String);
        if (DateTime.now().difference(fetched) < _cacheTTL) {
          matches = (data['matches'] as List<dynamic>)
              .map((e) => MatchData.fromJson(e as Map<String, dynamic>))
              .toList();
          loading = false;
          lastFetched = fetched;
          notifyListeners();
          return;
        }
      }

      // 2️⃣ Fetch network
      final response = await http.get(
        Uri.parse('$_apiUrl?api_key=$_apiKey'),
      );
      if (response.statusCode != 200) throw Exception('Network error');

      final body = json.decode(response.body) as Map<String, dynamic>;
      final list = (body['data'] as List<dynamic>).cast<Map<String, dynamic>>();
      matches = list.map((e) => MatchData.fromJson(e)).toList();
      lastFetched = DateTime.now();

      // 3️⃣ Write cache
      final cache = {
        'timestamp': lastFetched!.toIso8601String(),
        'matches': matches.map((m) => m.toJson()).toList(),
      };
      await file.writeAsString(json.encode(cache));

      loading = false;
      notifyListeners();
    } catch (_) {
      loading = false;
      error = true;
      notifyListeners();
    }
  }

  /// Toggle automatic periodic refresh
  void toggleAutoRefresh(bool on) {
    _autoTimer?.cancel();
    if (on) {
      _autoTimer = Timer.periodic(const Duration(minutes: 1), (_) {
        fetchMatches(force: true);
      });
    }
  }

  @override
  void dispose() {
    _autoTimer?.cancel();
    super.dispose();
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/widgets/cricket/live_cricket_widget.dart ===

// lib/widgets/live_cricket_widget.dart
import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:provider/provider.dart';
import 'match_data.dart';
import 'cricket_service.dart';

class LiveCricketWidget extends StatefulWidget {
  /// If height ≤ 80, renders mini bar; otherwise full panel.
  final double height;
  const LiveCricketWidget({Key? key, this.height = 60}) : super(key: key);

  @override
  State<LiveCricketWidget> createState() => _LiveCricketWidgetState();
}

class _LiveCricketWidgetState extends State<LiveCricketWidget> {
  late CricketService _service;
  String _filter = 'All';
  bool _auto = false;
  bool get _isMini => widget.height <= 80;

  @override
  void initState() {
    super.initState();
    _service = CricketService.instance;
    _service.addListener(_onData);
    _service.fetchMatches();
  }

  void _onData() => setState(() {});

  @override
  void dispose() {
    _service.removeListener(_onData);
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return SizedBox(
      height: widget.height,
      child: ClipRRect(
        borderRadius: BorderRadius.circular(12),
        child: BackdropFilter(
          filter: ImageFilter.blur(sigmaX: 10, sigmaY: 10),
          child: Container(
            color: theme.colorScheme.surface.withOpacity(0.25),
            padding: const EdgeInsets.all(8),
            child: _isMini ? _buildMini(theme) : _buildFull(theme),
          ),
        ),
      ),
    );
  }

  Widget _buildMini(ThemeData theme) {
    if (_service.loading) return const Center(child: CircularProgressIndicator());
    if (_service.error || _service.matches.isEmpty) {
      return Center(
        child: IconButton(
          icon: const Icon(Icons.refresh, color: Colors.white),
          onPressed: () => _service.fetchMatches(force: true),
        ),
      );
    }
    // show first match summary
    final m = _service.matches.first;
    return Row(
      children: [
        Image.asset('assets/images/cricwidgets.png', height: 32),
        const SizedBox(width: 8),
        Expanded(
          child: Text(
            '${m.title} | ${m.score}',
            maxLines: 1,
            overflow: TextOverflow.ellipsis,
            style: theme.textTheme.bodyLarge!.copyWith(color: Colors.white),
          ),
        ),
        IconButton(
          icon: const Icon(Icons.refresh, color: Colors.white),
          onPressed: () => _service.fetchMatches(force: true),
        ),
      ],
    );
  }

  Widget _buildFull(ThemeData theme) {
    if (_service.loading) return const Center(child: CircularProgressIndicator());
    if (_service.error) {
      return Center(
        child: ElevatedButton.icon(
          icon: const Icon(Icons.refresh),
          label: const Text('Retry'),
          onPressed: () => _service.fetchMatches(force: true),
        ),
      );
    }
    final matches = _filter == 'All'
        ? _service.matches
        : _service.matches.where((m) => m.format == _filter).toList();

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        _buildHeader(theme),
        const SizedBox(height: 8),
        _buildFilters(theme),
        const SizedBox(height: 8),
        Expanded(
          child: RefreshIndicator(
            onRefresh: () => _service.fetchMatches(force: true),
            child: ListView.separated(
              itemCount: matches.length,
              separatorBuilder: (_, __) => const Divider(color: Colors.white30),
              itemBuilder: (_, i) => _buildMatchTile(matches[i], theme),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildHeader(ThemeData theme) {
    return Row(
      children: [
        Image.asset('assets/images/cricwidgets.png', height: 32),
        const SizedBox(width: 8),
        Text('Live Cricket', style: theme.textTheme.headlineSmall!.copyWith(color: Colors.white)),
        const Spacer(),
        Text(
          _service.lastFetched != null
              ? '${_service.lastFetched!.hour.toString().padLeft(2,'0')}:${_service.lastFetched!.minute.toString().padLeft(2,'0')}'
              : '',
          style: theme.textTheme.bodySmall!.copyWith(color: Colors.white70),
        ),
        IconButton(
          icon: const Icon(Icons.refresh, color: Colors.white),
          onPressed: () => _service.fetchMatches(force: true),
        ),
        IconButton(
          icon: Icon(_auto ? Icons.av_timer : Icons.timer_off, color: _auto ? Colors.lightGreenAccent : Colors.white),
          onPressed: () {
            setState(() => _auto = !_auto);
            _service.toggleAutoRefresh(_auto);
          },
        ),
      ],
    );
  }

  Widget _buildFilters(ThemeData theme) {
    final formats = ['All', 'ODI', 'T20', 'Test'];
    return SingleChildScrollView(
      scrollDirection: Axis.horizontal,
      child: Row(
        children: formats.map((f) {
          final sel = f == _filter;
          return Padding(
            padding: const EdgeInsets.only(right: 8),
            child: ChoiceChip(
              label: Text(f, style: TextStyle(color: sel ? Colors.white : Colors.white70)),
              selected: sel,
              selectedColor: theme.colorScheme.primaryContainer.withOpacity(0.7),
              backgroundColor: theme.colorScheme.surfaceVariant.withOpacity(0.3),
              onSelected: (_) => setState(() => _filter = f),
            ),
          );
        }).toList(),
      ),
    );
  }

  Widget _buildMatchTile(MatchData m, ThemeData theme) {
    return ListTile(
      contentPadding: const EdgeInsets.symmetric(horizontal: 0, vertical: 4),
      leading: const Icon(Icons.sports_cricket, color: Colors.amber),
      title: Text(m.title, style: TextStyle(color: Colors.white)),
      subtitle: Text('${m.score}\n@m.venue', style: TextStyle(color: Colors.white70)),
      isThreeLine: true,
      trailing: IconButton(
        icon: const Icon(Icons.open_in_new, color: Colors.white),
        onPressed: () => launchUrl(Uri.parse(m.moreUrl)),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/widgets/cricket/cricket_panel.dart ===


import 'package:flutter/material.dart';
import 'live_cricket_widget.dart';


class CricketPanel {
  static Widget mini() => const LiveCricketWidget(height: 60);
  static Widget full() => const LiveCricketWidget(height: 250);
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/widgets/cricket/match_data.dart ===

// lib/models/match_data.dart
class MatchData {
  final String title;
  final String score;
  final String venue;
  final String format;
  final DateTime startTime;
  final String moreUrl;

  MatchData({
    required this.title,
    required this.score,
    required this.venue,
    required this.format,
    required this.startTime,
    required this.moreUrl,
  });

  factory MatchData.fromJson(Map<String, dynamic> json) {
    return MatchData(
      title: json['title'] as String,
      score: json['score'] as String? ?? '',
      venue: json['venue'] as String? ?? '',
      format: json['format'] as String? ?? 'All',
      startTime: DateTime.parse(json['start_time'] as String),
      moreUrl: json['more_url'] as String? ?? '',
    );
  }

  Map<String, dynamic> toJson() => {
        'title': title,
        'score': score,
        'venue': venue,
        'format': format,
        'start_time': startTime.toIso8601String(),
        'more_url': moreUrl,
      };
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/widgets/app_drawer.dart ===

import 'dart:async';
import 'dart:io';
import 'dart:math';
import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';
import 'package:audioplayers/audioplayers.dart';

import '../core/theme_provider.dart';
import '../features/profile/auth_service.dart';
import '../localization/l10n/app_localizations.dart';

class AppDrawer extends StatefulWidget {
  const AppDrawer({Key? key}) : super(key: key);

  @override
  State<AppDrawer> createState() => _AppDrawerState();
}

class _AppDrawerState extends State<AppDrawer>
    with SingleTickerProviderStateMixin {
  Map<String, String>? _profile;
  bool _isLoadingProfile = true;
  late final AudioPlayer _audioPlayer;
  bool _isRoaring = false;

  late final AnimationController _controller;

  late Color startColor;
  late Color endColor;

  @override
  void initState() {
    super.initState();
    _loadProfile();
    _audioPlayer = AudioPlayer();

    _controller = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 12),
    )..repeat(); // Floating background animation
  }

  @override
  void dispose() {
    _audioPlayer.dispose();
    _controller.dispose();
    super.dispose();
  }

  Future<void> _loadProfile() async {
    final profile = await AuthService().getProfile();
    if (mounted) {
      setState(() {
        _profile = profile;
        _isLoadingProfile = false;
      });
    }
  }

  Future<void> _onTigerTap() async {
    if (_isRoaring) return;
    setState(() => _isRoaring = true);
    await _audioPlayer.play(AssetSource('sounds/tiger_roar.mp3'));
    Timer(const Duration(seconds: 1), () {
      if (mounted) setState(() => _isRoaring = false);
    });
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final themeProv = context.watch<ThemeProvider>();
    final mode = themeProv.appThemeMode;

    switch (mode) {
      case AppThemeMode.bangladesh:
        startColor = const Color(0xFF00796B);
        endColor = const Color(0xFF004D40);
        break;
      case AppThemeMode.dark:
        startColor = Colors.black87;
        endColor = Colors.grey.shade900;
        break;
      default:
        startColor = Colors.blue.shade800;
        endColor = Colors.blue.shade400;
    }

    return Drawer(
      backgroundColor: Colors.transparent,
      elevation: 0,
      child: ClipRRect(
        borderRadius: const BorderRadius.only(
          topRight: Radius.circular(28),
          bottomRight: Radius.circular(28),
        ),
        child: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topCenter,
              end: Alignment.bottomCenter,
              colors: [
                Colors.white.withOpacity(0.30),
                startColor.withOpacity(0.70),
                endColor.withOpacity(0.80),
                Colors.black.withOpacity(0.15),
              ],
            ),
            border: Border.all(color: Colors.white.withOpacity(0.20)),
          ),
          child: Column(
            children: [
              _buildHeader(),
              _buildDivider(),
              _buildBody(context, loc),
              _buildDivider(),
              _buildFooter(context, loc),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildHeader() {
    return Container(
      height: 220,
      width: double.infinity,
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topCenter,
          end: Alignment.bottomCenter,
          colors: [
            Colors.white.withOpacity(0.60),
            startColor,
            endColor,
            Colors.black.withOpacity(0.20),
          ],
        ),
      ),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          CircleAvatar(
            radius: 40,
            backgroundColor: Colors.white.withOpacity(0.85),
            backgroundImage: (_profile?['image'] ?? '').isNotEmpty
                ? (_profile!['image']!.startsWith('http')
                    ? NetworkImage(_profile!['image']!)
                    : FileImage(File(_profile!['image']!))) as ImageProvider
                : null,
            child: (_profile?['image'] ?? '').isEmpty
                ? const Icon(Icons.person, size: 40, color: Colors.grey)
                : null,
          ),
          const SizedBox(height: 14),
          Text(
            _isLoadingProfile
                ? 'Loading...'
                : (_profile?['name']?.isNotEmpty == true
                    ? _profile!['name']!
                    : 'Guest User'),
            style: const TextStyle(
              color: Colors.white,
              fontWeight: FontWeight.bold,
              fontSize: 18,
              shadows: [Shadow(blurRadius: 6, color: Colors.black26)],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildBody(BuildContext context, AppLocalizations loc) {
    final size = MediaQuery.of(context).size;

    return Expanded(
      child: Stack(
        fit: StackFit.expand,
        children: [
          AnimatedBuilder(
            animation: _controller,
            builder: (context, child) {
              final dx = 8 * sin(2 * pi * _controller.value);
              final dy =
                  12 * sin(2 * pi * _controller.value + pi / 2);
              return Align(
                alignment: Alignment.bottomCenter,
                child: Transform.translate(offset: Offset(dx, dy), child: child),
              );
            },
            child: SvgPicture.asset(
              'assets/theme/flag.svg',
              width: size.width * 0.75,
              fit: BoxFit.contain,
            ),
          ),
          Container(color: Colors.black.withOpacity(0.05)),
          ListView(
            padding: const EdgeInsets.symmetric(vertical: 8),
            children: [
              _menuItem(Icons.home, loc.home, '/home'),
              _menuItem(Icons.article, loc.newspapers, '/newspaper'),
              _menuItem(Icons.favorite, loc.favorites, '/favorites'),
              _menuItem(Icons.person, loc.profile, '/profile'),
              _menuItem(Icons.info_outline, loc.about, '/about'),
              _menuItem(Icons.support_agent, loc.supports, '/supports'),
              _menuItem(Icons.search, loc.search, '/search'),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildFooter(BuildContext context, AppLocalizations loc) {
    return Padding(
      padding: const EdgeInsets.all(16),
      child: ClipRRect(
        borderRadius: BorderRadius.circular(20),
        child: BackdropFilter(
          filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20),
          child: Container(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [
                  Colors.white.withOpacity(0.30),
                  startColor.withOpacity(0.70),
                  endColor.withOpacity(0.70),
                ],
                begin: Alignment.bottomLeft,
                end: Alignment.topRight,
              ),
              borderRadius: BorderRadius.circular(20),
              border: Border.all(color: Colors.white.withOpacity(0.30)),
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                ElevatedButton.icon(
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.white.withOpacity(0.30),
                    elevation: 0,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(10),
                    ),
                  ),
                  onPressed: () {
                    Navigator.pop(context);
                    context.go('/login');
                  },
                  icon: const Icon(Icons.logout, color: Colors.white),
                  label: Text(loc.logout,
                      style: const TextStyle(color: Colors.white)),
                ),
                GestureDetector(
                  onTap: _onTigerTap,
                  child: _isRoaring
                      ? Image.asset('assets/icons/tiger2.png', height: 48)
                      : SvgPicture.asset('assets/icons/tiger.svg',
                          height: 48, color: Colors.white),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _menuItem(IconData icon, String title, String route) {
    return ListTile(
      leading: Icon(icon, color: Colors.white),
      title: Text(
        title,
        style: const TextStyle(
            color: Colors.white, fontSize: 16, fontWeight: FontWeight.w600),
      ),
      onTap: () {
        Navigator.pop(context);
        context.push(route);
      },
    );
  }

  Widget _buildDivider() {
    return Container(
      margin: const EdgeInsets.symmetric(vertical: 8),
      height: 5,
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [
            Colors.white.withOpacity(0.50),
            Colors.transparent,
            Colors.white.withOpacity(0.50)
          ],
          begin: Alignment.centerLeft,
          end: Alignment.centerRight,
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/widgets/error_widget.dart ===

import 'package:flutter/material.dart';

class ErrorDisplay extends StatelessWidget {

  const ErrorDisplay({required this.message, required this.onRetry, super.key});
  final String message;
  final VoidCallback onRetry;

  @override
  Widget build(BuildContext context) {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(24.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            const Icon(Icons.error_outline, color: Colors.redAccent, size: 60),
            const SizedBox(height: 16),
            Text(
              message,
              textAlign: TextAlign.center,
              style: const TextStyle(fontSize: 18, fontWeight: FontWeight.w500),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: onRetry,
              child: const Text('Retry'),
            ),
          ],
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/widgets/favorite_button.dart ===

// lib/widgets/favorite_button.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import '../data/models/news_article.dart';
import '../core/utils/favorites_manager.dart';

class FavoriteButton extends StatefulWidget {
  const FavoriteButton({
    super.key,
    required this.article,
    this.onFavoriteChanged,
  });

  final NewsArticle article;
  final VoidCallback? onFavoriteChanged;

  @override
  State<FavoriteButton> createState() => _FavoriteButtonState();
}

class _FavoriteButtonState extends State<FavoriteButton>
    with SingleTickerProviderStateMixin {
  bool _isFavorite = false;
  late final AnimationController _animController;
  late final Animation<double> _scaleAnim;
  late final Animation<double> _flashAnim;

  @override
  void initState() {
    super.initState();
    _loadFavoriteStatus();

    _animController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 300),
    );

    _scaleAnim = TweenSequence<double>([
      TweenSequenceItem(tween: Tween(begin: 1.0, end: 1.3), weight: 50),
      TweenSequenceItem(tween: Tween(begin: 1.3, end: 1.0), weight: 50),
    ]).animate(
      CurvedAnimation(parent: _animController, curve: Curves.easeOutBack),
    );

    _flashAnim = Tween<double>(begin: 0.0, end: 0.3).animate(
      CurvedAnimation(parent: _animController, curve: const Interval(0, 0.5)),
    );
  }

  @override
  void dispose() {
    _animController.dispose();
    super.dispose();
  }

  Future<void> _loadFavoriteStatus() async {
    final articles = FavoritesManager.instance.favoriteArticles;
    final status =
        articles.any((a) => a.url == widget.article.url);
    setState(() => _isFavorite = status);
  }

  Future<void> _toggleFavorite() async {
    // Start the pop+flash
    _animController.forward(from: 0);
    if (_isFavorite) {
      await FavoritesManager.instance.removeFavorite(widget.article);
    } else {
      await FavoritesManager.instance.addFavorite(widget.article);
    }
    await _loadFavoriteStatus();
    widget.onFavoriteChanged?.call();
  }

  @override
  Widget build(BuildContext context) {
    final colorScheme = Theme.of(context).colorScheme;
    final heartColor = _isFavorite
        ? colorScheme.secondary
        : colorScheme.onSurface.withOpacity(0.6);

    return Semantics(
      label: _isFavorite ? 'Remove from favorites' : 'Add to favorites',
      button: true,
      child: GestureDetector(
        onTap: _toggleFavorite,
        child: AnimatedBuilder(
          animation: _animController,
          builder: (context, child) {
            return Stack(
              alignment: Alignment.center,
              children: [
                // Flashing frosted circle
                if (_flashAnim.value > 0)
                  BackdropFilter(
                    filter: ImageFilter.blur(
                      sigmaX: 12 * _flashAnim.value,
                      sigmaY: 12 * _flashAnim.value,
                    ),
                    child: Container(
                      width: 40 + 20 * _flashAnim.value,
                      height: 40 + 20 * _flashAnim.value,
                      decoration: BoxDecoration(
                        color:
                            Colors.white.withOpacity(_flashAnim.value * 0.2),
                        shape: BoxShape.circle,
                      ),
                    ),
                  ),
                // Scaled heart
                Transform.scale(
                  scale: _scaleAnim.value,
                  child: Icon(
                    _isFavorite ? Icons.favorite : Icons.favorite_border,
                    color: heartColor,
                    size: 28,
                  ),
                ),
              ],
            );
          },
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/widgets/loading_widget.dart ===

import 'package:flutter/material.dart';
import 'package:shimmer/shimmer.dart';

class LoadingWidget extends StatelessWidget {
  const LoadingWidget({
    super.key,
    this.height = 150,
    this.width = double.infinity,
    this.radius = 16,
  });

  final double height;
  final double width;
  final double radius;

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final isDark = theme.brightness == Brightness.dark;

    return Semantics(
      label: 'Loading content',
      child: Shimmer.fromColors(
        baseColor: isDark ? Colors.grey.shade800 : Colors.grey.shade300,
        highlightColor: isDark ? Colors.grey.shade600 : Colors.grey.shade100,
        child: Container(
          height: height,
          width: width,
          decoration: BoxDecoration(
            color: theme.cardColor,
            borderRadius: BorderRadius.circular(radius),
          ),
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/localization/l10n/app_localizations.dart ===



import 'package:flutter/material.dart';

class AppLocalizations {
  final Locale locale;
  AppLocalizations(this.locale);

  static AppLocalizations of(BuildContext context) =>
      Localizations.of<AppLocalizations>(context, AppLocalizations)!;

  static const LocalizationsDelegate<AppLocalizations> delegate = _AppLocalizationsDelegate();

  // General UI
  String get close => _t('বন্ধ করুন', 'Close');
  String get home => _t('হোম', 'Home');
  String get profile => _t('প্রোফাইল', 'Profile');
  String get editProfile => _t('প্রোফাইল সম্পাদনা', 'Edit Profile');
  String get settings => _t('সেটিংস', 'Settings');
  String get theme => _t('থিম', 'Theme');
  String get language => _t('ভাষা', 'Language');
  String get darkTheme => _t('ডার্ক', 'Dark');
  String get lightTheme => _t('সিস্টেম', 'Default');
  String get deshTheme => _t('দেশ', 'Desh');
  String get version => _t('সংস্করণ', 'Version');
  String get clearCache => _t('ক্লিয়ারক্যাশ', 'Clear Cache');
  String get clearCacheSuccess => _t('ক্লিয়ারক্যাশ সাফল্য', 'Clear Cache Success');
  String get versionPrefix => _t('সংস্করণ', 'Version');
  String get bdNewsHub => _t('বিডিনিউজ হাব 📰', 'BDNews Hub 📰');
   String get otherOptions => _t('অন্যান্য বিকল্প', 'Other Options');
  // Auth
  String get login => _t('লগইন', 'Login');
  String get logout => _t('লগআউট', 'Logout');
  String get signup => _t('সাইন আপ', 'Sign Up');
  String get password => _t('পাসওয়ার্ড', 'Password');
  String get email => _t('ইমেইল', 'Email');
  String get search => _t('অনুসন্ধান করুন ', 'Search');
  String get help => _t('সাহায্য', 'Help');
  String get appTitle => _t('বিডিনিউজ হাব', 'BDNews Hub');
  String get fullName => _t('পুরো নাম', 'Full Name');
  String get name => _t('নাম', 'Name');
  String get enterName => _t('নাম লিখুন','Enter Name');
  String get save => _t('সংরক্ষণ করুন', 'Save');
  String get enterEmail => _t('ইমেল লিখুন', 'Enter Email'); 
  String get forgotPassword => _t('পাসওয়ার্ড ভুলে গেছেন', 'Forgot Password');
  String get sendResetLink => _t('রিসেট লিঙ্ক পাঠান', 'Send Reset Link');
  String get enterEmailReset => _t('পাসওয়ার্ড রিসেট করতে আপনার ইমেল লিখুন:', 'Enter your email to reset your password:');
  String get alreadyHaveAccount => _t('ইতিমধ্যে একটি অ্যাকাউন্ট আছে?', 'Already have an account? Login');
  String get createAccount => _t('অ্যাকাউন্ট তৈরি করুন', 'Create account');
  String get invalidCredentials => _t('ভুল ইমেইল বা পাসওয়ার্ড।', 'Invalid email or password.');
  String get noAccountFound => _t('এই ইমেইলে কোন অ্যাকাউন্ট নেই।', 'No account found for this email.');
  String get accountExists => _t('এই ইমেইলে ইতিমধ্যে অ্যাকাউন্ট আছে।', 'An account already exists with this email.');
  String get resetEmailSent => _t('📧 পাসওয়ার্ড রিসেট ইমেইল পাঠানো হয়েছে!', '📧 Password reset email sent!');

  // Profile Fields
  String get phone => _t('ফোন', 'Phone');
  String get bio => _t('জীবন বৃত্তান্ত', 'Bio');
  String get address => _t('ঠিকানা', 'Address');
  String get website => _t('ওয়েবসাইট', 'Website');
  String get role => _t('ভূমিকা', 'Role');
  String get department => _t('বিভাগ', 'Department');
  String get changeImage => _t('ছবি পরিবর্তন করুন', 'Change Image');
  String get removeImage => _t('ছবি অপসারণ', 'Remove Image');
  String get noUserConnected => _t('কোনো ব্যবহারকারী সংযুক্ত নেই', 'No user connected yet');
  String get scrollController => _t('স্ক্রোল কন্ট্রোলার', 'Scroll Controller');
  // Editor Features
  String get saveChanges => _t('পরিবর্তনগুলি সংরক্ষণ করুন', 'Save Changes');
  String get profileSaved => _t('প্রোফাইল সংরক্ষিত', 'Profile saved');
  String get required => _t('আবশ্যক', 'Required');
  String get details => _t('বিস্তারিত', 'Details');
  String get lookup => _t('অনুসন্ধান', 'Lookup');
  // News Categories
  String get latest => _t('সর্বশেষ', 'latest');
  String get newspapers => _t('সংবাদপত্র', 'Newspapers');
  String get magazines => _t('ম্যাগাজিন', 'Magazines');
  String get favorites => _t('প্রিয়', 'Favorites');
  String get national => _t('জাতীয়', 'National');
  String get international => _t('আন্তর্জাতিক', 'International');
  String get businessFinance => _t('ব্যবসা ও অর্থনীতি', 'Business & Finance');
  String get digitalTech => _t('ডিজিটাল ও প্রযুক্তি', 'Digital & Technology');
  String get sportsNews => _t('খেলার খবর', 'Sports News');
  String get entertainmentArts => _t('বিনোদন ও শিল্প', 'Entertainment & Arts');
  String get worldPolitics => _t('বিশ্ব ও রাজনীতি', 'World & Politics');
  String get blog => _t('ব্লগ', 'Blog');
  String get business => _t('ব্যবসা', 'Business');
  String get sports => _t('খেলা', 'Sports');
  String get technology => _t('প্রযুক্তি', 'Technology');
  String get entertainment => _t('বিনোদন', 'Entertainment');
  String get lifestyle => _t('জীবনধারা', 'LifeStyle');

  // Premium Features
  String get bangladeshTheme => _t('দেশ 🇧🇩', 'Desh 🇧🇩');
  String get adFree => _t('বিজ্ঞাপনবিহীন অভিজ্ঞতা', 'Ad-Free Experience');
  String get adFreeHint => _t('পরিষ্কার পড়ার অভিজ্ঞতার জন্য বিজ্ঞাপন সরানো হয়।', 'Removes all ads for a clean reading experience.');
  String get offlineDownloads => _t('অফলাইন ডাউনলোড', 'Offline Downloads');
  String get offlineHint => _t('অফলাইনে দেখার জন্য কনটেন্ট সংরক্ষণ করুন।', 'Save content locally for offline viewing.');
  String get prioritySupport => _t('প্রাধান্য সহায়তা', 'Priority Support');
  String get prioritySupportHint => _t('সহায়তা টিম থেকে দ্রুত সহায়তা।', 'Get faster responses from our support team.');

  // Search and Empty States
  String get searchHint => _t('সন্ধান করুন...', 'Search...');
  String get searchPapers => _t('পত্রিকা খুঁজুন…', 'Search…');
  String get noMagazines => _t('কোন ম্যাগাজিন পাওয়া যায়নি', 'No magazines found');
  String get noPapersFound => _t('কোন সংবাদপত্র পাওয়া যায়নি', 'No papers found');
  String get allLanguages => _t('সব ভাষা', 'All Languages');

  // Categories for Magazines
  String get catFashion => _t('ফ্যাশন ও সৌন্দর্য', 'Fashion & Aesthetics');
  String get catScience => _t('বিজ্ঞান ও আবিষ্কার', 'Science & Discovery');
  String get catFinance => _t('অর্থনীতি ও অর্থ', 'Economics & Finance');
  String get catAffairs => _t('আন্তর্জাতিক সম্পর্ক', 'Global Affairs');
  String get catTech => _t('প্রযুক্তি', 'Emerging Technologies');
  String get catArts => _t('শিল্প ও মানবিকতা', 'Arts & Humanities');
  String get catLifestyle => _t('জীবনধারা ও বিলাসিতা', 'Lifestyle & Luxury');
  String get catSports => _t('খেলা ও পারফরম্যান্স', 'Sports & Performance');

  // Feedback
  String get feedback => _t('প্রতিক্রিয়া', 'Feedback');
  String get rateApp => _t('অ্যাপ রেট দিন', 'Rate this App');
  String get contactSupport => _t('সহায়তা যোগাযোগ', 'Contact Support');
  String get contactEmail => 'customerservice@dsmobiles.com';
  String get mailClientError => _t('মেইল ক্লায়েন্ট চালু করা যায়নি।', 'Could not launch mail client.');
  String get storeOpenError => _t('স্টোর খুলতে অক্ষম।', 'Unable to open store.');
  String get viewArticle => _t('নিবন্ধ দেখুন', 'View Article');
  String get loadError => _t('লোড করতে ব্যর্থ', 'Load failed');
  String get getStarted => _t('শুরু করুন', 'Get Started');
  String get next => _t('পরবর্তী', 'Next');
  String get fastReliable => _t('দ্রুত এবং নির্ভরযোগ্য', 'Fast & Reliable');
  String get personalizedExperience => _t('ব্যক্তিগত অভিজ্ঞতা', 'Personalized Experience');
  String get favoriteArticles=> _t('প্রিয় প্রবন্ধ', 'Favorite Articles');
  String get favoriteMagazines => _t('প্রিয় ম্যাগাজিন', 'Favorite Magazines');
  String get favoriteNewspapers => _t('প্রিয় সংবাদপত্র', 'Favorite Newspapers');
  String get noFavoritesYet => _t('কোনও প্রিয় নেই', 'No Favorites Yet');
  String get continueWithGoogle => _t('গুগলের সাথে চালিয়ে যান', 'Continue With Google');
  String get articles => _t('প্রবন্ধ', 'articles');
  String get noArticlesFound => _t('কোন নিবন্ধ পাওয়া যায়নি', 'No Articles Found');
  String get bangla => _t('বাংলা', 'Bengali');
  String get english => _t('ইংরেজি', 'English');
  String get supports => _t('সাপোর্ট', 'Supports');
  String get health => _t('স্বাস্থ্য', 'Health');
  String get opinion => _t('মতামত', 'Opinion');
  String get about => _t('সম্পর্কে', 'About');
  String get education => _t('শিক্ষা', 'Education');

  // Dynamic Translation Helper
  String _t(String bn, String en) => locale.languageCode == 'bn' ? bn : en;
}

class _AppLocalizationsDelegate extends LocalizationsDelegate<AppLocalizations> {
  const _AppLocalizationsDelegate();

  @override
  bool isSupported(Locale locale) => ['en', 'bn'].contains(locale.languageCode);

  @override
  Future<AppLocalizations> load(Locale locale) async => AppLocalizations(locale);

  @override
  bool shouldReload(covariant LocalizationsDelegate<AppLocalizations> old) => false;
}


