// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/l10n/app_localizations.dart ===

import 'package:flutter/material.dart';

class AppLocalizations {
  final Locale locale;
  AppLocalizations(this.locale);

  static AppLocalizations of(BuildContext context) =>
      Localizations.of<AppLocalizations>(context, AppLocalizations)!;

  static const LocalizationsDelegate<AppLocalizations> delegate = _AppLocalizationsDelegate();

  // General UI
  String get invalidEmail => _t('অবৈধ ইমেল', 'Invalid Email');
  String get close => _t('বন্ধ করুন', 'Close');
  String get home => _t('হোম', 'Home');
  String get profile => _t('প্রোফাইল', 'Profile');
  String get editProfile => _t('প্রোফাইল সম্পাদনা', 'Edit Profile');
  String get settings => _t('সেটিংস', 'Settings');
  String get theme => _t('থিম', 'Theme');
  String get language => _t('ভাষা', 'Language');
  String get darkTheme => _t('ডার্ক', 'Dark');
  String get lightTheme => _t('সিস্টেম', 'Default');
  String get deshTheme => _t('দেশ', 'Desh');
  String get version => _t('সংস্করণ', 'Version');
  String get clearCache => _t('ক্লিয়ারক্যাশ', 'Clear Cache');
  String get clearCacheSuccess => _t('ক্লিয়ারক্যাশ সাফল্য', 'Clear Cache Success');
  String get versionPrefix => _t('সংস্করণ', 'Version');
  String get bdNewsHub => _t('বিডিনিউজ হাব 📰', 'BDNews Hub 📰');
   String get otherOptions => _t('অন্যান্য বিকল্প', 'Other Options');
  // Auth
  String get login => _t('লগইন', 'Login');
  String get logout => _t('লগআউট', 'Logout');
  String get signup => _t('সাইন আপ', 'Sign Up');
  String get password => _t('পাসওয়ার্ড', 'Password');
  String get email => _t('ইমেইল', 'Email');
  String get search => _t('অনুসন্ধান করুন ', 'Search');
  String get help => _t('সাহায্য', 'Help');
  String get appTitle => _t('বিডিনিউজ হাব', 'BDNews Hub');
  String get fullName => _t('পুরো নাম', 'Full Name');
  String get name => _t('নাম', 'Name');
  String get enterName => _t('নাম লিখুন','Enter Name');
  String get save => _t('সংরক্ষণ করুন', 'Save');
  String get enterEmail => _t('ইমেল লিখুন', 'Enter Email'); 
  String get forgotPassword => _t('পাসওয়ার্ড ভুলে গেছেন', 'Forgot Password');
  String get sendResetLink => _t('রিসেট লিঙ্ক পাঠান', 'Send Reset Link');
  String get enterEmailReset => _t('পাসওয়ার্ড রিসেট করতে আপনার ইমেল লিখুন:', 'Enter your email to reset your password:');
  String get alreadyHaveAccount => _t('ইতিমধ্যে একটি অ্যাকাউন্ট আছে?', 'Already have an account? Login');
  String get createAccount => _t('অ্যাকাউন্ট তৈরি করুন', 'Create account');
  String get invalidCredentials => _t('ভুল ইমেইল বা পাসওয়ার্ড।', 'Invalid email or password.');
  String get noAccountFound => _t('এই ইমেইলে কোন অ্যাকাউন্ট নেই।', 'No account found for this email.');
  String get accountExists => _t('এই ইমেইলে ইতিমধ্যে অ্যাকাউন্ট আছে।', 'An account already exists with this email.');
  String get resetEmailSent => _t('📧 পাসওয়ার্ড রিসেট ইমেইল পাঠানো হয়েছে!', '📧 Password reset email sent!');

  // Profile Fields
  String get phone => _t('ফোন', 'Phone');
  String get bio => _t('জীবন বৃত্তান্ত', 'Bio');
  String get address => _t('ঠিকানা', 'Address');
  String get website => _t('ওয়েবসাইট', 'Website');
  String get role => _t('ভূমিকা', 'Role');
  String get department => _t('বিভাগ', 'Department');
  String get changeImage => _t('ছবি পরিবর্তন করুন', 'Change Image');
  String get removeImage => _t('ছবি অপসারণ', 'Remove Image');
  String get noUserConnected => _t('কোনো ব্যবহারকারী সংযুক্ত নেই', 'No user connected yet');
  String get scrollController => _t('স্ক্রোল কন্ট্রোলার', 'Scroll Controller');
  // Editor Features
  String get saveChanges => _t('পরিবর্তনগুলি সংরক্ষণ করুন', 'Save Changes');
  String get profileSaved => _t('প্রোফাইল সংরক্ষিত', 'Profile saved');
  String get required => _t('আবশ্যক', 'Required');
  String get details => _t('বিস্তারিত', 'Details');
  String get dailyQuiz => _t('দৈনিক কুইজ', 'Daily Quiz');
  String get notAnswered => _t('উত্তর দেওয়া হয়নি', 'Not Answered');
  String get lookup => _t('অনুসন্ধান', 'Lookup');
  String get tryAgain => _t('আবার চেষ্টা করুন', 'Try Again');
  String get quizSummary => _t('কুইজের সারাংশ', 'Quiz Summary');
 
  String get finish => _t('সমাপ্ত', 'Finish');
  String get correct => _t('সঠিক', 'Correct');
  String get yourAnswer => _t('আপনার উত্তর', 'Your Answer');
  String get highScore => _t('সর্বোচ্চ স্কোর', 'High Score');
  String get streak => _t('ধারা', 'Streak');
  String get recentSearches => _t('সাম্প্রতিক অনুসন্ধানগুলি', 'Recent Searches');
  // News Categories
  String get latest => _t('সর্বশেষ', 'latest');
  String get quiz => _t('কুইজ', 'Quiz');
  String get newspapers => _t('সংবাদপত্র', 'Newspapers');
  String get magazines => _t('ম্যাগাজিন', 'Magazines');
  String get favorites => _t('প্রিয়', 'Favorites');
  String get national => _t('জাতীয়', 'National');
  String get international => _t('আন্তর্জাতিক', 'International');
  String get businessFinance => _t('ব্যবসা ও অর্থনীতি', 'Business & Finance');
  String get digitalTech => _t('ডিজিটাল ও প্রযুক্তি', 'Digital & Technology');
  String get sportsNews => _t('খেলার খবর', 'Sports News');
  String get entertainmentArts => _t('বিনোদন ও শিল্প', 'Entertainment & Arts');
  String get worldPolitics => _t('বিশ্ব ও রাজনীতি', 'World & Politics');
  String get blog => _t('ব্লগ', 'Blog');
  String get business => _t('ব্যবসা', 'Business');
  String get sports => _t('খেলা', 'Sports');
  String get satire => _t('হাস্যরস', 'Satire');
  String get technology => _t('প্রযুক্তি', 'Technology');
  String get entertainment => _t('বিনোদন', 'Entertainment');
  String get lifestyle => _t('জীবনধারা', 'LifeStyle');
  String get translateTooltip      => _t('অনুবাদ করুন', 'Translate');
String get alwaysTranslateLabel  => _t('সবসময় বাংলায় অনুবাদ করুন', 'Always translate to Bengali');
String get increaseFontSize      => _t('লেখা বড় করুন', 'Increase font size');
String get toggleDarkMode        => _t('ডার্ক মোড চালু/বন্ধ', 'Toggle dark mode');
String get readerMode            => _t('রিডার মোড চালু/বন্ধ', 'Toggle reader mode');
String get mobileView            => _t('মোবাইল-বন্ধুসুলভ মোড', 'Mobile-friendly view');
String get desktopView           => _t('মূল ডেস্কটপ মোড', 'Original desktop view');
String get tryAmp                => _t('দ্রুত AMP সংস্করণ ব্যবহার করুন', 'Try AMP version');
String get originalView          => _t('মূল সংস্করণ দেখুন', 'Switch to original version');
String get sharePage             => _t('পৃষ্ঠা শেয়ার করুন', 'Share this page');
String get bookmarkPage          => _t('পৃষ্ঠা বুকমার্ক করুন', 'Bookmark this page');
String get bookmarkSuccess       => _t('সফলভাবে সংরক্ষণ করা হয়েছে!', 'URL saved successfully!');
  // Premium Features
  String get bangladeshTheme => _t('দেশ 🇧🇩', 'Desh 🇧🇩');
  String get adFree => _t('বিজ্ঞাপনবিহীন অভিজ্ঞতা', 'Ad-Free Experience');
  String get adFreeHint => _t('পরিষ্কার পড়ার অভিজ্ঞতার জন্য বিজ্ঞাপন সরানো হয়।', 'Removes all ads for a clean reading experience.');
  String get offlineDownloads => _t('অফলাইন ডাউনলোড', 'Offline Downloads');
  String get offlineHint => _t('অফলাইনে দেখার জন্য কনটেন্ট সংরক্ষণ করুন।', 'Save content locally for offline viewing.');
  String get prioritySupport => _t('প্রাধান্য সহায়তা', 'Priority Support');
  String get prioritySupportHint => _t('সহায়তা টিম থেকে দ্রুত সহায়তা।', 'Get faster responses from our support team.');

String get back => _t('পিছনে যান', 'Go back');
String get forward => _t('সামনে যান', 'Go forward');
String get refresh => _t('রিফ্রেশ করুন', 'Refresh');

  // Search and Empty States
  String get searchHint => _t('সন্ধান করুন...', 'Search...');
  String get searchPapers => _t('পত্রিকা খুঁজুন…', 'Search…');
  String get noMagazines => _t('কোন ম্যাগাজিন পাওয়া যায়নি', 'No magazines found');
  String get noPapersFound => _t('কোন সংবাদপত্র পাওয়া যায়নি', 'No papers found');
  String get allLanguages => _t('সব ভাষা', 'All Languages');

  // Categories for Magazines
  String get catFashion => _t('ফ্যাশন ও সৌন্দর্য', 'Fashion & Aesthetics');
  String get catScience => _t('বিজ্ঞান ও আবিষ্কার', 'Science & Discovery');
  String get catFinance => _t('অর্থনীতি ও অর্থ', 'Economics & Finance');
  String get catAffairs => _t('আন্তর্জাতিক সম্পর্ক', 'Global Affairs');
  String get catTech => _t('প্রযুক্তি', 'Emerging Technologies');
  String get catArts => _t('শিল্প ও মানবিকতা', 'Arts & Humanities');
  String get catLifestyle => _t('জীবনধারা ও বিলাসিতা', 'Lifestyle & Luxury');
  String get catSports => _t('খেলা ও পারফরম্যান্স', 'Sports & Performance');

  // Feedback
  String get feedback => _t('প্রতিক্রিয়া', 'Feedback');
  String get rateApp => _t('অ্যাপ রেট দিন', 'Rate this App');
  String get contactSupport => _t('সহায়তা যোগাযোগ', 'Contact Support');
  String get contactEmail => 'customerservice@dsmobiles.com';
  String get mailClientError => _t('মেইল ক্লায়েন্ট চালু করা যায়নি।', 'Could not launch mail client.');
  String get storeOpenError => _t('স্টোর খুলতে অক্ষম।', 'Unable to open store.');
  String get viewArticle => _t('নিবন্ধ দেখুন', 'View Article');
  String get loadError => _t('লোড করতে ব্যর্থ', 'Load failed');
  String get getStarted => _t('শুরু করুন', 'Get Started');
  String get next => _t('পরবর্তী', 'Next');
  String get fastReliable => _t('দ্রুত এবং নির্ভরযোগ্য', 'Fast & Reliable');
  String get personalizedExperience => _t('ব্যক্তিগত অভিজ্ঞতা', 'Personalized Experience');
  String get favoriteArticles=> _t('প্রিয় প্রবন্ধ', 'Favorite Articles');
  String get favoriteMagazines => _t('প্রিয় ম্যাগাজিন', 'Favorite Magazines');
  String get favoriteNewspapers => _t('প্রিয় সংবাদপত্র', 'Favorite Newspapers');
  String get noFavoritesYet => _t('কোনও প্রিয় নেই', 'No Favorites Yet');
  String get continueWithGoogle => _t('গুগলের সাথে চালিয়ে যান', 'Continue With Google');
  String get articles => _t('প্রবন্ধ', 'articles');
  String get noArticlesFound => _t('কোন নিবন্ধ পাওয়া যায়নি', 'No Articles Found');
  String get bangla => _t('বাংলা', 'Bengali');
  String get english => _t('ইংরেজি', 'English');
  String get supports => _t('সাপোর্ট', 'Supports');
  String get health => _t('স্বাস্থ্য', 'Health');
  String get opinion => _t('মতামত', 'Opinion');
  String get about => _t('সম্পর্কে', 'About');
  String get education => _t('শিক্ষা', 'Education');
  String get loading => _t('লোডিং', 'Loading');
  String get guest => _t('অতিথি', 'Guest');

  String get errorLoadingProfile => _t('ত্রুটিপ্রোফাইল লোড হচ্ছে', 'Error Loading Profile');
  // Dynamic Translation Helper
  String _t(String bn, String en) => locale.languageCode == 'bn' ? bn : en;
}
class _AppLocalizationsDelegate extends LocalizationsDelegate<AppLocalizations> {
  const _AppLocalizationsDelegate();

  @override
  bool isSupported(Locale locale) => ['en', 'bn'].contains(locale.languageCode);

  @override
  Future<AppLocalizations> load(Locale locale) async => AppLocalizations(locale);

  @override
  bool shouldReload(covariant LocalizationsDelegate<AppLocalizations> old) => false;
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/routes.dart ===

// lib/core/routes.dart

import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'app_paths.dart';

// Import all your screen widgets
import '../../features/onboarding/onboarding_screen.dart';
import '../../features/profile/login_screen.dart';
import '../../features/profile/signup_screen.dart';
import '../../features/profile/forgot_password_screen.dart';
import '../../features/profile/profile_screen.dart';
import '../../features/profile/edit_profile_screen.dart';
import '../../features/news/newspaper_screen.dart';
import '../../features/magazine/magazine_screen.dart';
import '../../features/favorites/favorites_screen.dart';
import '../../features/about/about_screen.dart';
import '../../features/help/help_screen.dart';
import '../../features/search/search_screen.dart';
import '../../features/news_detail/news_detail_screen.dart';
import '../../features/common/webview_screen.dart';
import '../../features/extras/extras_screen.dart';
import '../../main_navigation_screen.dart';
import '../../data/models/news_article.dart';

// Import movie detail
import '../../features/movies/movie_detail_screen.dart';
import '../../features/movies/movie.dart';

class AppRouter {
  AppRouter._(); // prevent instantiation; utility only

  static GoRouter createRouter({required String initialLocation}) {
    return GoRouter(
      initialLocation: initialLocation,
      errorBuilder: (context, state) => const ErrorScreen(),
      routes: [
        // Authentication
        _slideRoute(AppPaths.login, const LoginScreen()),
        _slideRoute(AppPaths.signup, const SignupScreen()),
        _slideRoute(AppPaths.forgotPassword, const ForgotPasswordScreen()),

        // Main tabs
        _fadeRoute(AppPaths.home, const MainNavigationScreen(selectedTab: 0)),
        _fadeRoute(AppPaths.newspaper, const MainNavigationScreen(selectedTab: 1)),
        _fadeRoute(AppPaths.magazines, const MainNavigationScreen(selectedTab: 2)),
        _fadeRoute(AppPaths.settings, const MainNavigationScreen(selectedTab: 3)),

        // Extras & utilities
        _fadeRoute(AppPaths.extras, const ExtrasScreen()),
        _fadeRoute(AppPaths.favorites, const FavoritesScreen()),
        _fadeRoute(AppPaths.about, const AboutScreen()),
        _fadeRoute(AppPaths.supports, const HelpScreen()),
        _fadeRoute(AppPaths.search, const SearchScreen()),

        // Profile
        _slideRoute(AppPaths.profile, const ProfileScreen()),

        // News detail
        GoRoute(
          path: AppPaths.newsDetail,
          pageBuilder: (context, state) => _scalePage(
            child: NewsDetailScreen(news: state.extra as NewsArticle),
            key: state.pageKey,
          ),
        ),

        // Webview
        GoRoute(
          path: AppPaths.webview,
          name: 'webview',
          pageBuilder: (context, state) {
            final args = state.extra;
            if (args is Map<String, dynamic> && args.containsKey('url')) {
              return _scalePage(
                child: WebViewScreen(
                  url: args['url'] as String,
                  title: args['title'] as String? ?? 'Web View',
                ),
                key: state.pageKey,
              );
            }
            return MaterialPage(key: state.pageKey, child: const ErrorScreen());
          },
        ),

        // Movie detail
        GoRoute(
          path: '/movies/:id',
          pageBuilder: (context, state) {
            final movie = state.extra as Movie;
            return CustomTransitionPage(
              key: state.pageKey,
              child: MovieDetailScreen(movie: movie),
              transitionsBuilder: (ctx, anim, sec, child) =>
                  FadeTransition(opacity: anim, child: child),
            );
          },
        ),
      ],
    );
  }

  static GoRoute _fadeRoute(String path, Widget child) => GoRoute(
        path: path,
        pageBuilder: (ctx, state) => CustomTransitionPage(
          key: state.pageKey,
          child: child,
          transitionsBuilder: (ctx, anim, sec, child) =>
              FadeTransition(opacity: anim, child: child),
        ),
      );

  static GoRoute _slideRoute(String path, Widget child) => GoRoute(
        path: path,
        pageBuilder: (ctx, state) => CustomTransitionPage(
          key: state.pageKey,
          child: child,
          transitionsBuilder: (ctx, anim, sec, child) => SlideTransition(
            position: Tween<Offset>(begin: const Offset(1, 0), end: Offset.zero)
                .animate(anim),
            child: child,
          ),
        ),
      );

  static CustomTransitionPage _scalePage({
    required Widget child,
    required LocalKey key,
  }) => CustomTransitionPage(
        key: key,
        child: child,
        transitionsBuilder: (ctx, anim, sec, child) =>
            ScaleTransition(scale: Tween<double>(begin: 0.9, end: 1.0).animate(anim), child: child),
      );
}

class ErrorScreen extends StatelessWidget {
  const ErrorScreen({super.key});
  @override
  Widget build(BuildContext context) => Scaffold(
        body: Center(
          child: Column(mainAxisSize: MainAxisSize.min, children: [
            Icon(Icons.error_outline, size: 80, color: Theme.of(context).colorScheme.error),
            const SizedBox(height: 16),
            Text('Oops! Something went wrong.', style: Theme.of(context).textTheme.titleLarge),
          ]),
        ),
      );
}

// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/app_paths.dart ===

/// Holds all route path constants for navigation
class AppPaths {
  static const String splash = '/splash';
  static const String onboarding = '/onboarding';
  static const String login = '/login';
  static const String signup = '/signup';
  static const String forgotPassword = '/forgot-password';
  static const String home = '/home';
  static const String newspaper = '/newspaper';
  static const String magazines = '/magazines';
  static const String settings = '/settings';
  static const String extras = '/extras';
  static const String favorites = '/favorites';
  static const String about = '/about';
  static const String supports = '/supports';
  static const String search = '/search';
  static const String profile = '/profile';
  static const String newsDetail = '/news-detail';
  static const String webview = '/webview';
  static const String movieDetail = '/movies/:id';
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/env_keys.dart ===

// lib/core/env_keys.dart
import 'package:flutter_dotenv/flutter_dotenv.dart';

class EnvService {
  static String get newsApiKey {
    final k = dotenv.env['NEWS_API_KEY'];
    if (k == null || k.isEmpty) throw StateError('NEWS_API_KEY not set in .env');
    return k;
  }

  static String get sportsApiKey {
    final k = dotenv.env['SPORTS_API_KEY'];
    if (k == null || k.isEmpty) throw StateError('SPORTS_API_KEY not set in .env');
    return k;
  }
   static String get weatherApiKey {
    final k = dotenv.env['WEATHER_API_KEY'];
    if (k == null || k.isEmpty) throw StateError('WEATHER_API_KEY not set in .env');
    return k;
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/utils.dart ===

// File: lib/utils/date_time_utils.dart

import 'package:intl/intl.dart';

class DateTimeUtils {
  /// Returns current date in format like: Monday, April 7, 2025
  static String getCurrentDate() {
    return DateFormat.yMMMMEEEEd().format(DateTime.now());
  }

  /// Returns current time in format like: 5:30 PM
  static String getCurrentTime() {
    return DateFormat.jm().format(DateTime.now());
  }

  /// Formats any DateTime object to a readable string.
  static String formatDateTime(DateTime dateTime, {String pattern = 'yMMMMEEEEd'}) {
    return DateFormat(pattern).format(dateTime);
  }

  /// Returns a human-readable "time ago" or "in time" format.
  static String timeAgo(
    DateTime dateTime, {
    String minute = 'minute',
    String hour = 'hour',
    String day = 'day',
    String week = 'week',
    String month = 'month',
    String year = 'year',
    String ago = 'ago',
    String inPrefix = 'In',
    String justNow = 'Just now',
    String fewSeconds = 'In a few seconds',
  }) {
    final Duration diff = DateTime.now().difference(dateTime);

    if (diff.inSeconds.abs() < 60) return diff.isNegative ? fewSeconds : justNow;
    if (diff.inMinutes.abs() < 60) {
      final int minutes = diff.inMinutes.abs();
      return diff.isNegative
          ? '$inPrefix $minutes $minute${minutes == 1 ? '' : 's'}'
          : '$minutes $minute${minutes == 1 ? '' : 's'} $ago';
    }
    if (diff.inHours.abs() < 24) {
      final int hours = diff.inHours.abs();
      return diff.isNegative
          ? '$inPrefix $hours $hour${hours == 1 ? '' : 's'}'
          : '$hours $hour${hours == 1 ? '' : 's'} $ago';
    }
    if (diff.inDays.abs() < 7) {
      final int days = diff.inDays.abs();
      return diff.isNegative
          ? '$inPrefix $days $day${days == 1 ? '' : 's'}'
          : '$days $day${days == 1 ? '' : 's'} $ago';
    }
    if (diff.inDays.abs() < 30) {
      final int weeks = (diff.inDays.abs() / 7).floor();
      return diff.isNegative
          ? '$inPrefix $weeks $week${weeks == 1 ? '' : 's'}'
          : '$weeks $week${weeks == 1 ? '' : 's'} $ago';
    }
    if (diff.inDays.abs() < 365) {
      final int months = (diff.inDays.abs() / 30).floor();
      return diff.isNegative
          ? '$inPrefix $months $month${months == 1 ? '' : 's'}'
          : '$months $month${months == 1 ? '' : 's'} $ago';
    }
    final int years = (diff.inDays.abs() / 365).floor();
    return diff.isNegative
        ? '$inPrefix $years $year${years == 1 ? '' : 's'}'
        : '$years $year${years == 1 ? '' : 's'} $ago';
  }
}

class StringUtils {
  /// Capitalizes the first letter of a string.
  static String capitalize(String text) {
    if (text.isEmpty) return text;
    return text[0].toUpperCase() + text.substring(1);
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/utils/network_manager.dart ===

// path: lib/core/utils/network_manager.dart

import 'package:connectivity_plus/connectivity_plus.dart';

enum NetworkSpeed { fast, slow, unknown }

class NetworkManager {
  static Future<NetworkSpeed> getConnectionSpeed() async {
    final result = await Connectivity().checkConnectivity();
    if (result == ConnectivityResult.none) return NetworkSpeed.unknown;

    // Simple, non-blocking heuristic: consider non-WiFi as "slow"
    if (result == ConnectivityResult.mobile) return NetworkSpeed.slow;
    if (result == ConnectivityResult.wifi) return NetworkSpeed.fast;

    return NetworkSpeed.unknown;
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/utils/favorites_manager.dart ===

// lib/core/utils/favorites_manager.dart

import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import '../../data/models/news_article.dart';

class FavoritesManager {
  static final FavoritesManager _instance = FavoritesManager._internal();
  FavoritesManager._internal();
  static FavoritesManager get instance => _instance;

  static const String favoritesKey = 'favorites';
  static const String magazineFavoritesKey = 'magazine_favorites';
  static const String newspaperFavoritesKey = 'newspaper_favorites';

  List<NewsArticle> _favoriteArticles = [];
  List<Map<String, dynamic>> _favoriteMagazines = [];
  List<Map<String, dynamic>> _favoriteNewspapers = [];

  List<NewsArticle> get favoriteArticles => _favoriteArticles;
  List<Map<String, dynamic>> get favoriteMagazines => _favoriteMagazines;
  List<Map<String, dynamic>> get favoriteNewspapers => _favoriteNewspapers;

  Future<void> loadFavorites() async {
    final prefs = await SharedPreferences.getInstance();
    final articleJson       = prefs.getStringList(favoritesKey) ?? [];
    final magazineJson      = prefs.getStringList(magazineFavoritesKey) ?? [];
    final newspaperJson     = prefs.getStringList(newspaperFavoritesKey) ?? [];

    _favoriteArticles = articleJson
        .map((str) => NewsArticle.fromMap(json.decode(str)))
        .toList();

    _favoriteMagazines = magazineJson
        .map((str) => Map<String, dynamic>.from(json.decode(str)))
        .toList();

    _favoriteNewspapers = newspaperJson
        .map((str) => Map<String, dynamic>.from(json.decode(str)))
        .toList();
  }

  // -------------------------
  // Articles

  Future<void> addFavorite(NewsArticle article) async {
    final prefs = await SharedPreferences.getInstance();
    _favoriteArticles.add(article);
    await prefs.setStringList(
      favoritesKey,
      _favoriteArticles.map((e) => json.encode(e.toMap())).toList(),
    );
  }

  Future<void> removeFavorite(NewsArticle article) async {
    final prefs = await SharedPreferences.getInstance();
    _favoriteArticles.removeWhere((e) => e.url == article.url);
    await prefs.setStringList(
      favoritesKey,
      _favoriteArticles.map((e) => json.encode(e.toMap())).toList(),
    );
  }

  /// Toggle article in favorites (add if missing, remove if already favorited)
  Future<void> toggleArticle(NewsArticle article) async {
    final prefs = await SharedPreferences.getInstance();
    final exists = _favoriteArticles.any((e) => e.url == article.url);
    if (exists) {
      _favoriteArticles.removeWhere((e) => e.url == article.url);
    } else {
      _favoriteArticles.add(article);
    }
    await prefs.setStringList(
      favoritesKey,
      _favoriteArticles.map((e) => json.encode(e.toMap())).toList(),
    );
  }

  /// Check synchronously if an article is favorited
  bool isFavoriteArticle(NewsArticle article) {
    return _favoriteArticles.any((e) => e.url == article.url);
  }

  // -------------------------
  // Magazines

  Future<void> toggleMagazine(Map<String, dynamic> magazine) async {
    final prefs = await SharedPreferences.getInstance();
    final id     = magazine['id'].toString();
    final isFav  = _favoriteMagazines.any((m) => m['id'].toString() == id);

    if (isFav) {
      _favoriteMagazines.removeWhere((m) => m['id'].toString() == id);
    } else {
      _favoriteMagazines.add(magazine);
    }

    await prefs.setStringList(
      magazineFavoritesKey,
      _favoriteMagazines.map((m) => json.encode(m)).toList(),
    );
  }

  bool isFavoriteMagazine(String id) {
    return _favoriteMagazines.any((m) => m['id'].toString() == id);
  }

  // -------------------------
  // Newspapers

  Future<void> toggleNewspaper(Map<String, dynamic> newspaper) async {
    final prefs = await SharedPreferences.getInstance();
    final id     = newspaper['id'].toString();
    final isFav  = _favoriteNewspapers.any((n) => n['id'].toString() == id);

    if (isFav) {
      _favoriteNewspapers.removeWhere((n) => n['id'].toString() == id);
    } else {
      _favoriteNewspapers.add(newspaper);
    }

    await prefs.setStringList(
      newspaperFavoritesKey,
      _favoriteNewspapers.map((n) => json.encode(n)).toList(),
    );
  }

  bool isFavoriteNewspaper(String id) {
    return _favoriteNewspapers.any((n) => n['id'].toString() == id);
  }

  toggleArticleMap(Map<String, dynamic> item) {}
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/utils/og_image_fetcher.dart ===

import 'package:html/dom.dart';
import 'package:http/http.dart' as http;
import 'package:html/parser.dart' as html_parser;

/// Fetches the best available image from a webpage (og:image or twitter:image).
Future<String?> fetchBestImageFromUrl(String url) async {
  try {
    final http.Response response = await http.get(Uri.parse(url));

    if (response.statusCode == 200) {
      final Document document = html_parser.parse(response.body);

      // Try Open Graph image first
      final Element? ogImageMeta = document.querySelector('meta[property="og:image"]');
      if (ogImageMeta != null && ogImageMeta.attributes['content'] != null) {
        return ogImageMeta.attributes['content'];
      }

      // Fallback: Try Twitter Card image
      final Element? twitterImageMeta = document.querySelector('meta[name="twitter:image"]');
      if (twitterImageMeta != null && twitterImageMeta.attributes['content'] != null) {
        return twitterImageMeta.attributes['content'];
      }
    }
    return null; // No image found
  } catch (e) {
    print('⚠️ Error fetching image: $e');
    return null;
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/utils/source_logos.dart ===

// path: lib/data/constants/source_logos.dart

class SourceLogos {
  static const Map<String, String> logos = {
    // ─── Bengali Newspapers ───
    'প্রথম আলো': 'assets/logos/prothomalo.png',
    'কালের কণ্ঠ': 'assets/logos/kalerkantho.png',
    'বিডিনিউজ২৪ বাংলা': 'assets/logos/bdnews24.png',
    'যুগান্তর': 'assets/logos/jugantor.png',
    'ইত্তেফাক': 'assets/logos/ittefaq.png',
    'আনন্দবাজার পত্রিকা': 'assets/logos/anandabazar.png',
    'এই সময়': 'assets/logos/eisamay.png',
    'সংবাদ প্রতিদিন': 'assets/logos/sangbadpratidin.png',
    'সমকাল': 'assets/logos/samakal.png',
    'বণিক বার্তা': 'assets/logos/bonikbarta.png',
    'ঢাকা টাইমস': 'assets/logos/dhakatimes.png',
    'গেজেটবিডি': 'assets/logos/gazetebd.png',
    'টেক শহর': 'assets/logos/techshohor.png',
    'প্রিয়.কম': 'assets/logos/priyo.png',
    'রোর বাংলা': 'assets/logos/roarbangla.png',

    // ─── English Newspapers ───
    'CNN Top Stories': 'assets/logos/cnn.png',
    'BBC World News': 'assets/logos/bbc.png',
    'Reuters Top News': 'assets/logos/reuters.png',
    'The Guardian World': 'assets/logos/guardian.png',
    'Dhaka Tribune': 'assets/logos/dhakatribune.png',
    'Daily Star National': 'assets/logos/dailystar.png',
    'New York Times US': 'assets/logos/nytimes.png',
    'Financial Times': 'assets/logos/ft.png',
    'Forbes': 'assets/logos/forbes.png',
    'Bloomberg Business': 'assets/logos/bloomberg.png',
    'Sky Sports': 'assets/logos/skysports.png',
    'ESPN Top Sports': 'assets/logos/espn.png',
    'BBC Sports': 'assets/logos/bbc_sports.png',

    // ─── Tech ───
    'TechCrunch': 'assets/logos/techcrunch.png',
    'Ars Technica': 'assets/logos/arstechnica.png',
    'The Verge Tech': 'assets/logos/theverge.png',

    // ─── Entertainment ───
    'Billboard': 'assets/logos/billboard.png',
    'Variety': 'assets/logos/variety.png',
    'Hollywood Reporter': 'assets/logos/hollywoodreporter.png',

    // ─── Lifestyle & Blog ───
    'Lifehack': 'assets/logos/lifehack.png',
    'MindBodyGreen': 'assets/logos/mindbodygreen.png',
    'VeryWell Health': 'assets/logos/verywellhealth.png',
    'Medium Technology': 'assets/logos/medium.png',
    'Dev.to': 'assets/logos/devto.png',
    'Hashnode Blogs': 'assets/logos/hashnode.png',

    // ─── Magazines / Bonus Sources ───
    'Roar বাংলা': 'assets/logos/roarbangla.png',
    'Amar Bangla BD': 'assets/logos/amarbanglabd.png',
    'TBS News': 'assets/logos/tbsnews.png',
    'BD24Live': 'assets/logos/bd24live.png',
  };
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/navigation_helper.dart ===

// lib/core/navigation_helper.dart

import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';

import '../features/movies/movie.dart';

class NavigationHelper {
  static void goHome(BuildContext context) {
    context.go('/home');
  }

  static void goNewspaper(BuildContext context) {
    context.go('/newspaper');
  }

  static void goMagazines(BuildContext context) {
    context.go('/magazines');
  }

  static void goSettings(BuildContext context) {
    context.go('/settings');
  }

  static void goFavorites(BuildContext context) {
    context.go('/favorites');
  }

  static void goAbout(BuildContext context) {
    context.go('/about');
  }

  static void goHelp(BuildContext context) {
    context.go('/supports');
  }

  static void goSearch(BuildContext context) {
    context.go('/search');
  }

  static void goProfile(BuildContext context) {
    context.go('/profile');
  }

  static void goEditProfile(BuildContext context) {
    context.go('/edit-profile');
  }

  static void goLogin(BuildContext context) {
    context.go('/login');
  }

  static void goSignup(BuildContext context) {
    context.go('/signup');
  }

  static void goForgotPassword(BuildContext context) {
    context.go('/forgot-password');
  }

  static void goWebView(
    BuildContext context, {
    required String url,
    String? title,
  }) {
    context.go('/webview', extra: {'url': url, 'title': title ?? 'Web View'});
  }

  static void goNewsDetail(BuildContext context, dynamic article) {
    context.go('/news-detail', extra: article);
  }

  /// Navigate to the movie detail page, carrying the Movie as extra.
  static void goMovieDetail(BuildContext context, Movie movie) {
    context.go('/movies/${movie.id}', extra: movie);
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/language_provider.dart ===

import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

class LanguageProvider extends ChangeNotifier {
  static const String _languageKey = 'languageCode';

  Locale _locale = const Locale('en');
  Locale get locale => _locale;

  LanguageProvider() {
    _loadLocale();
  }

  Future<void> _loadLocale() async {
    final prefs = await SharedPreferences.getInstance();
    final storedCode = prefs.getString(_languageKey);
    if (storedCode != null && storedCode != _locale.languageCode) {
      _locale = Locale(storedCode);
      notifyListeners();
    }
  }

  Future<void> setLocale(String code) async {
    if (code == _locale.languageCode) return;
    _locale = Locale(code);
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_languageKey, code);
    notifyListeners();
  }

  Future<void> resetLocale() async {
    _locale = const Locale('en');
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove(_languageKey);
    notifyListeners();
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/splash_service.dart ===

// lib/core/splash_service.dart
import 'package:shared_preferences/shared_preferences.dart';

class SplashService {
  final SharedPreferences prefs;

  SplashService({required this.prefs});

  static const String onboardingCompletedKey = 'onboardingCompleted';
  static const String isLoggedInKey = 'isLoggedIn';

  Future<String> resolveInitialRoute() async {
    final hasSeenOnboarding = prefs.getBool(onboardingCompletedKey) ?? false;
    final isLoggedIn = prefs.getBool(isLoggedInKey) ?? false;

    if (!hasSeenOnboarding) {
      return '/onboarding';
    } else if (!isLoggedIn) {
      return '/login';
    } else {
      return '/home';
    }
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/theme_provider.dart ===

import 'package:flutter/material.dart';

/// Defines the available theme modes for the app.
enum AppThemeMode {
  light,
  dark,
  bangladesh,
}

/// Provides theme state management and glassmorphic utilities.
class ThemeProvider with ChangeNotifier {
  AppThemeMode _currentTheme = AppThemeMode.light;

  /// Returns the current app theme mode.
  AppThemeMode get appThemeMode => _currentTheme;

  /// Returns the corresponding [ThemeMode] based on [AppThemeMode].
  ThemeMode get themeMode {
    switch (_currentTheme) {
      case AppThemeMode.dark:
      case AppThemeMode.bangladesh:
        return ThemeMode.dark;
      case AppThemeMode.light:
      default:
        return ThemeMode.light;
    }
  }

  /// Changes the app theme to the given [AppThemeMode].
  void toggleTheme(AppThemeMode mode) {
    if (_currentTheme != mode) {
      _currentTheme = mode;
      notifyListeners();
    }
  }

  /// Semi-transparent 'glass' overlay color for panels.
  Color get glassColor {
    switch (_currentTheme) {
      case AppThemeMode.dark:
        return Colors.black.withOpacity(0.3);
      case AppThemeMode.bangladesh:
        return const Color(0xFF00796B).withOpacity(0.3);
      case AppThemeMode.light:
      default:
        return Colors.white.withOpacity(0.3);
    }
  }

  /// Golden border color for glass panels when in dark mode.
  Color get borderColor {
    return _currentTheme == AppThemeMode.dark
        ? const Color(0xFFFFD700)
        : Colors.white.withOpacity(0.2);
  }

  /// A subtle frosted shadow for glass panels.
  List<BoxShadow> get glassShadows => [
        BoxShadow(
          color: Colors.black.withOpacity(0.15),
          blurRadius: 20,
          offset: const Offset(0, 4),
        ),
        BoxShadow(
          color: Colors.white.withOpacity(0.05),
          blurRadius: 2,
          offset: const Offset(0, -1),
        ),
      ];

  /// Floating/glow text style to boost visibility on glass.
  TextStyle floatingTextStyle({
    Color? color,
    double fontSize = 18,
    FontWeight fontWeight = FontWeight.bold,
  }) {
    final baseColor = 
        color ?? (_currentTheme == AppThemeMode.dark ? Colors.white : Colors.black);
    return TextStyle(
      color: baseColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      shadows: [
        Shadow(
          color: baseColor.withOpacity(0.25),
          blurRadius: 8,
          offset: const Offset(0, 2),
        ),
        Shadow(
          color: baseColor.withOpacity(0.15),
          blurRadius: 16,
          offset: const Offset(0, 4),
        ),
      ],
    );
  }

  /// Build a glassmorphic container decoration with golden border in dark mode.
  BoxDecoration glassDecoration({BorderRadius? borderRadius}) {
    return BoxDecoration(
      color: glassColor,
      borderRadius: borderRadius ?? BorderRadius.circular(16),
      border: Border.all(color: borderColor, width: 1.5),
      boxShadow: glassShadows,
      backgroundBlendMode: BlendMode.overlay,
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/constants.dart ===

import 'package:flutter/material.dart';

// Goku Siyan Mode Activated!
// Unleash the energy with these legendary constants for colors, sizes, and icons.

// AppColors: Our palette of super-powered hues.
class AppColors {
  // A dazzling light primary color, like the flash of a Kamehameha!
  static const Color primaryLight = Color(0xFF007BFF);
  // A deep, mysterious dark primary color, perfect for intense battles.
  static const Color primaryDark = Color(0xFF121212);
  // An accent color that sparks energy and power—unleash your inner spirit!
  static const Color accent = Color(0xFF00C853);
  // Error color that signals a fight must be won—fight through any challenge!
  static const Color error = Color(0xFFD32F2F);
  // A light background color to illuminate your UI like a Super Saiyan aura.
  static const Color backgroundLight = Color(0xFFF5F5F5);
  // A dark background color to ground your design with powerful depth.
  static const Color backgroundDark = Color(0xFF181818);
}

// AppSizes: The precise measurements that define your battle-ready layout.
class AppSizes {
  // Small padding for those quick, agile moves.
  static const double paddingSmall = 8.0;
  // Medium padding – balanced and steady like a well-trained fighter.
  static const double paddingMedium = 16.0;
  // Large padding to dominate the field, giving you room to shine.
  static const double paddingLarge = 24.0;

  // Corner radius to soften edges—because even warriors need a bit of style.
  static const double cornerRadius = 16.0;
}

// AppIcons: The iconic symbols that drive your UI energy.
class AppIcons {
  // The app's emblem, as bold as a freshly forged legend.
  static const IconData appIcon = Icons.newspaper;
  // Settings icon to fine-tune your Super Saiyan power.
  static const IconData settingsIcon = Icons.settings;
  // Share icon to spread the energy far and wide.
  static const IconData shareIcon = Icons.share;
  // Favorite icon to mark your most epic moments.
  static const IconData favoriteIcon = Icons.favorite;
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/user_service.dart ===

import 'package:cloud_firestore/cloud_firestore.dart';

class UserService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  Future<void> saveUserProfile({
    required String email,
    required String name,
    required String avatarUrl,
  }) async {
    final userDoc = _firestore.collection('users').doc(email);
    await userDoc.set({
      'name': name,
      'email': email,
      'avatar': avatarUrl,
      'updatedAt': FieldValue.serverTimestamp(),
    }, SetOptions(merge: true));
  }

  Future<Map<String, dynamic>?> getUserProfile(String email) async {
    final userDoc = await _firestore.collection('users').doc(email).get();
    return userDoc.exists ? userDoc.data() : null;
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/theme.dart ===

// lib/core/theme.dart
// ignore_for_file: avoid_classes_with_only_static_members

import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'theme_provider.dart';

class AppTheme {
  // ─ Light Theme ───────────────────────────────────────────────────
  static ThemeData buildLightTheme() => ThemeData(
        useMaterial3: true,
        colorScheme: lightColorScheme,
        brightness: Brightness.light,
        scaffoldBackgroundColor:
            lightColorScheme.background.withOpacity(0.95),
        textTheme: GoogleFonts.poppinsTextTheme().copyWith(
          bodyLarge:
              const TextStyle(color: Colors.black87, fontSize: 16),
          bodyMedium:
              const TextStyle(color: Colors.black54, fontSize: 14),
          headlineLarge: const TextStyle(
              color: Colors.black,
              fontSize: 28,
              fontWeight: FontWeight.bold),
          headlineMedium: const TextStyle(
              color: Colors.black87,
              fontSize: 22,
              fontWeight: FontWeight.bold),
          titleLarge: const TextStyle(
              color: Colors.black,
              fontSize: 20,
              fontWeight: FontWeight.bold),
          titleMedium:
              const TextStyle(color: Colors.black87, fontSize: 18),
          labelLarge:
              const TextStyle(color: Colors.black87, fontSize: 14),
        ),
        appBarTheme: AppBarTheme(
          backgroundColor: lightColorScheme.surface.withOpacity(0.8),
          foregroundColor: Colors.black,
          elevation: 0,
        ),
        cardTheme: CardTheme(
          color: Colors.white.withOpacity(0.7),
          shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(16)),
          elevation: 8,
          shadowColor: Colors.black26,
        ),
        inputDecorationTheme:
            _inputDecorationTheme(lightColorScheme),
        dropdownMenuTheme:
            _dropdownMenuTheme(lightColorScheme),
        chipTheme:
            _chipTheme(lightColorScheme),
      );

  // ─ Dark (Glass + Gold) Theme ────────────────────────────────────
  static ThemeData buildDarkTheme() {
    const gold = Color(0xFFFFD700);

    return ThemeData(
      useMaterial3: true,
      colorScheme: darkColorScheme.copyWith(
        background: const Color(0xFF121417),
        surface: const Color(0xFF1A1D20).withOpacity(0.6),
      ),
      brightness: Brightness.dark,
      scaffoldBackgroundColor:
          const Color(0xFF121417).withOpacity(0.95),
      textTheme: GoogleFonts.poppinsTextTheme().copyWith(
        bodyLarge:
            const TextStyle(color: Colors.white70, fontSize: 16),
        bodyMedium:
            const TextStyle(color: Colors.white60, fontSize: 14),
        headlineLarge: const TextStyle(
            color: Colors.white, fontSize: 28, fontWeight: FontWeight.bold),
        headlineMedium: const TextStyle(
            color: Colors.white70,
            fontSize: 22,
            fontWeight: FontWeight.bold),
        titleLarge: const TextStyle(
            color: Colors.white, fontSize: 20, fontWeight: FontWeight.bold),
        titleMedium:
            const TextStyle(color: Colors.white70, fontSize: 18),
        labelLarge:
            const TextStyle(color: Colors.white70, fontSize: 14),
      ),
      appBarTheme: AppBarTheme(
        backgroundColor: const Color(0xFF1A1D20).withOpacity(0.6),
        foregroundColor: Colors.white,
        elevation: 0,
        titleTextStyle: GoogleFonts.poppins(
          color: Colors.white,
          fontSize: 20,
          fontWeight: FontWeight.bold,
          shadows: [
            Shadow(
              color: gold.withOpacity(0.4),
              blurRadius: 8,
            ),
          ],
        ),
        iconTheme: const IconThemeData(color: Colors.white70),
      ),

      cardTheme: CardTheme(
        color: const Color(0xFF1C1F22).withOpacity(0.5),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(16),
          side: const BorderSide(color: gold, width: 2),
        ),
        elevation: 12,
        shadowColor: gold.withOpacity(0.3),
      ),

      inputDecorationTheme:
          _inputDecorationTheme(darkColorScheme, overrideFocus: gold),
      dropdownMenuTheme:
          _dropdownMenuTheme(darkColorScheme),
      chipTheme:
          _chipTheme(darkColorScheme),

      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor:
              const Color(0xFF1A1D20).withOpacity(0.6),
          side: const BorderSide(color: gold, width: 2),
          shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12)),
          elevation: 6,
          shadowColor: gold.withOpacity(0.4),
          textStyle: GoogleFonts.poppins(
            color: Colors.white,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),

      iconTheme: const IconThemeData(color: Colors.white70),
    );
  }

  // ─ Bangladesh Theme ───────────────────────────────────────────────
  static ThemeData buildBangladeshTheme() => ThemeData(
        useMaterial3: true,
        colorScheme: bangladeshColorScheme,
        brightness: Brightness.dark,
        scaffoldBackgroundColor:
            bangladeshColorScheme.background.withOpacity(0.95),
        textTheme: GoogleFonts.poppinsTextTheme().copyWith(
          bodyLarge:
              const TextStyle(color: Colors.white70, fontSize: 16),
          bodyMedium:
              const TextStyle(color: Colors.white60, fontSize: 14),
          headlineLarge: const TextStyle(
              color: Colors.white,
              fontSize: 28,
              fontWeight: FontWeight.bold),
          headlineMedium: const TextStyle(
              color: Colors.white70,
              fontSize: 22,
              fontWeight: FontWeight.bold),
          titleLarge: const TextStyle(
              color: Colors.white,
              fontSize: 20,
              fontWeight: FontWeight.bold),
          titleMedium:
              const TextStyle(color: Colors.white70, fontSize: 18),
          labelLarge:
              const TextStyle(color: Colors.white70, fontSize: 14),
        ),
        appBarTheme: AppBarTheme(
          backgroundColor:
              bangladeshColorScheme.surface.withOpacity(0.8),
          foregroundColor: Colors.white,
          elevation: 0,
        ),
        cardTheme: CardTheme(
          color: bangladeshColorScheme.surface.withOpacity(0.7),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16),
            side: BorderSide(
                color: bangladeshColorScheme.primary, width: 2),
          ),
          elevation: 8,
          shadowColor: Colors.black45,
        ),
        inputDecorationTheme:
            _inputDecorationTheme(bangladeshColorScheme),
        dropdownMenuTheme:
            _dropdownMenuTheme(bangladeshColorScheme),
        chipTheme:
            _chipTheme(bangladeshColorScheme),
        iconTheme: const IconThemeData(color: Colors.white70),
      );

  // ─ Common Input Decoration ──────────────────────────────────────
  static InputDecorationTheme _inputDecorationTheme(
    ColorScheme scheme, {
    Color? overrideFocus,
  }) {
    final focusColor = overrideFocus ?? scheme.secondary;
    return InputDecorationTheme(
      filled: true,
      fillColor: scheme.surface.withOpacity(0.5),
      border: OutlineInputBorder(
        borderRadius: BorderRadius.circular(12),
        borderSide: BorderSide.none,
      ),
      focusedBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(12),
        borderSide: BorderSide(color: focusColor, width: 2),
      ),
      hintStyle: TextStyle(
        color: scheme.brightness == Brightness.dark
            ? Colors.white60
            : Colors.black54,
      ),
      labelStyle: TextStyle(
        color: scheme.brightness == Brightness.dark
            ? Colors.white
            : Colors.black87,
        fontWeight: FontWeight.bold,
      ),
      floatingLabelStyle: TextStyle(
        color: scheme.brightness == Brightness.dark
            ? Colors.white
            : scheme.primary,
      ),
    );
  }

  // ─ Dropdown Menu Theme ──────────────────────────────────────────
  static DropdownMenuThemeData _dropdownMenuTheme(
      ColorScheme scheme) {
    return DropdownMenuThemeData(
      menuStyle: MenuStyle(
        backgroundColor: MaterialStateProperty.all(
          scheme.brightness == Brightness.dark
              ? scheme.surface.withOpacity(0.8)
              : Colors.white,
        ),
        shape: MaterialStateProperty.all(
          RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12)),
        ),
      ),
    );
  }

  // ─ Chip Theme for all chips (including ChoiceChip) ────────────────
  static ChipThemeData _chipTheme(ColorScheme scheme) {
    return ChipThemeData(
      brightness: scheme.brightness,
      backgroundColor: scheme.surfaceVariant,
      selectedColor: scheme.primaryContainer,
      disabledColor: scheme.onSurface.withOpacity(0.12),
      labelStyle: TextStyle(color: scheme.onSurface),
      secondaryLabelStyle: TextStyle(color: scheme.onPrimary),
      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
      shape: StadiumBorder(
        side: BorderSide(color: scheme.onSurface.withOpacity(0.12)),
      ),
    );
  }
}

// ─ Color Schemes ─────────────────────────────────────────────────
final ColorScheme lightColorScheme = ColorScheme.light(
  primary: const Color(0xFF1565C0),
  secondary: const Color(0xFF42A5F5),
  background: const Color(0xFFF5F5F5),
  surface: const Color(0xFFFFFFFF),
);

final ColorScheme darkColorScheme = ColorScheme.dark(
  primary: const Color(0xFF42A5F5),
  secondary: const Color(0xFF1565C0),
  background: const Color(0xFF121417),
  surface: const Color(0xFF1A1D20),
);

final ColorScheme bangladeshColorScheme = ColorScheme.dark(
  primary: const Color(0xFF00796B),
  secondary: const Color(0xFF004D40),
  background: const Color(0xFF121417),
  surface: const Color(0xFF1A1D20),
);


// ─ Central Gradient Colors per AppThemeMode ─────────────────────
class AppGradients {
  static List<Color> getGradientColors(AppThemeMode mode) {
    switch (mode) {
      case AppThemeMode.light:
        return [Colors.blue.shade300, Colors.blue.shade100];
      case AppThemeMode.bangladesh:
        return [const Color(0xFF00796B), const Color(0xFF004D40)];
      case AppThemeMode.dark:
      default:
        return [Colors.black87, Colors.grey.shade900];
    }
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/settings/settings_screen.dart ===

// lib/features/settings/settings_screen.dart

import 'dart:ui' show ImageFilter;
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:package_info_plus/package_info_plus.dart';
import 'package:flutter_cache_manager/flutter_cache_manager.dart';

import '../../core/theme.dart';
import '../../core/theme_provider.dart';
import '../../core/language_provider.dart';
import '/l10n/app_localizations.dart';
import '../../widgets/app_drawer.dart';
import '../../features/common/appBar.dart';
import '/data/services/iap_helper.dart';

class SettingsScreen extends StatefulWidget {
  const SettingsScreen({Key? key}) : super(key: key);

  @override
  State<SettingsScreen> createState() => _SettingsScreenState();
}

class _SettingsScreenState extends State<SettingsScreen> {
  String _version = '';
  bool _isClearingCache = false;
  bool _isPremium = false;

  @override
  void initState() {
    super.initState();
    _loadVersion();
    _checkPremium();
  }

  Future<void> _loadVersion() async {
    final info = await PackageInfo.fromPlatform();
    setState(() => _version = info.version);
  }

  Future<void> _checkPremium() async {
    final isPremium = await IAPHelper().isUserPremium();
    if (!mounted) return;
    setState(() => _isPremium = isPremium);
  }

  Future<void> _buyRemoveAds() async {
    final result = await IAPHelper().purchaseRemoveAds();
    if (!mounted) return;
    if (result) setState(() => _isPremium = true);
  }

  Future<void> _launchPaypal() async {
    final url = Uri.parse('https://www.paypal.com/donate?hosted_button_id=YOUR_BUTTON_ID');
    if (!await launchUrl(url, mode: LaunchMode.externalApplication)) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Could not open PayPal')),
      );
    }
  }

  Future<void> _rateApp() async {
    final loc = AppLocalizations.of(context)!;
    final uri = Uri.parse('https://play.google.com/store/apps/details?id=com.example.droid');
    if (!await launchUrl(uri)) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(loc.storeOpenError)),
      );
    }
  }

  Future<void> _clearCache() async {
    setState(() => _isClearingCache = true);
    await DefaultCacheManager().emptyCache();
    if (!mounted) return;
    setState(() => _isClearingCache = false);
    final loc = AppLocalizations.of(context)!;
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(loc.clearCacheSuccess)),
    );
  }

  Future<void> _contactSupport() async {
    final loc = AppLocalizations.of(context)!;
    final uri = Uri.parse('mailto:${loc.contactEmail}');
    if (!await launchUrl(uri)) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(loc.mailClientError)),
      );
    }
  }

  Widget _buildAdFreeSection(Color textColor) {
    final loc = AppLocalizations.of(context)!;
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          loc.adFree,
          style: TextStyle(
            fontSize: 20,
            fontWeight: FontWeight.bold,
            color: textColor,
          ),
        ),
        const SizedBox(height: 12),
        if (_isPremium)
          Text('Ads Removed', style: TextStyle(color: textColor))
        else
          Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              // **Removed `const` and gave each button a UniqueKey()**
              ElevatedButton.icon(
                key: UniqueKey(),
                onPressed: _buyRemoveAds,
                icon: Icon(Icons.payment, color: textColor),
                label: Text('Google Pay', style: TextStyle(color: textColor)),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.transparent,
                  elevation: 0,
                  side: BorderSide(color: textColor, width: 1.5),
                ),
              ),
              const SizedBox(height: 8),
              ElevatedButton.icon(
                key: UniqueKey(),
                onPressed: _launchPaypal,
                icon: Icon(Icons.attach_money, color: textColor),
                label: Text('PayPal/Card', style: TextStyle(color: textColor)),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.transparent,
                  elevation: 0,
                  side: BorderSide(color: textColor, width: 1.5),
                ),
              ),
            ],
          ),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final themeProv = context.watch<ThemeProvider>();
    final langProv = context.watch<LanguageProvider>();
    final theme = Theme.of(context);
    final textColor = theme.textTheme.bodyLarge?.color ?? Colors.white;

    Widget glassSection({required Widget child}) {
      return Container(
        margin: const EdgeInsets.symmetric(vertical: 16),
        decoration: themeProv.glassDecoration(borderRadius: BorderRadius.circular(24)),
        child: ClipRRect(
          borderRadius: BorderRadius.circular(24),
          child: BackdropFilter(
            filter: ImageFilter.blur(sigmaX: 25, sigmaY: 25),
            child: Container(
              padding: const EdgeInsets.all(20),
              color: themeProv.glassColor,
              child: child,
            ),
          ),
        ),
      );
    }

    Widget themeButton(AppThemeMode value, IconData icon, String label) {
      final selected = themeProv.appThemeMode == value;
      return Expanded(
        child: GestureDetector(
          onTap: () => themeProv.toggleTheme(value),
          child: Container(
            padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 8),
            decoration: BoxDecoration(
              gradient: selected
                  ? LinearGradient(colors: AppGradients.getGradientColors(value))
                  : null,
              border: Border.all(color: themeProv.borderColor, width: 2),
              borderRadius: BorderRadius.circular(16),
            ),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Icon(icon, color: selected ? Colors.white : textColor),
                const SizedBox(height: 4),
                Text(
                  label,
                  textAlign: TextAlign.center,
                  style: TextStyle(
                    color: selected ? Colors.white : textColor,
                    fontWeight: selected ? FontWeight.bold : FontWeight.normal,
                  ),
                ),
              ],
            ),
          ),
        ),
      );
    }

    Widget langButton(String code, String label) {
      final selected = langProv.locale.languageCode == code;
      return Expanded(
        child: GestureDetector(
          onTap: () => langProv.setLocale(code),
          child: Container(
            padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 8),
            decoration: BoxDecoration(
              gradient: selected
                  ? LinearGradient(colors: AppGradients.getGradientColors(themeProv.appThemeMode))
                  : null,
              border: Border.all(color: themeProv.borderColor, width: 2),
              borderRadius: BorderRadius.circular(16),
            ),
            child: Text(
              label,
              textAlign: TextAlign.center,
              style: TextStyle(
                color: selected ? Colors.white : textColor,
                fontWeight: selected ? FontWeight.bold : FontWeight.normal,
              ),
            ),
          ),
        ),
      );
    }

    return Scaffold(
      extendBodyBehindAppBar: true,
      backgroundColor: Colors.transparent,
      drawer: const AppDrawer(),
      appBar: AppBar(
        centerTitle: true,
        backgroundColor: Colors.transparent,
        elevation: 0,
        title: AppBarTitle(loc.settings),
        flexibleSpace: ClipRect(
          child: BackdropFilter(
            filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20),
            child: const SizedBox.expand(),
          ),
        ),
      ),
      body: Stack(
        fit: StackFit.expand,
        children: [
          // your existing gradient background lives here…
          SafeArea(
            child: SingleChildScrollView(
              padding: const EdgeInsets.all(24),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  glassSection(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          loc.theme,
                          style: TextStyle(
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                            color: textColor,
                          ),
                        ),
                        const SizedBox(height: 12),
                        Row(
                          children: [
                            themeButton(AppThemeMode.light, Icons.wb_sunny, loc.lightTheme),
                            const SizedBox(width: 8),
                            themeButton(AppThemeMode.dark, Icons.nights_stay, loc.darkTheme),
                            const SizedBox(width: 8),
                            themeButton(AppThemeMode.bangladesh, Icons.flag, loc.bangladeshTheme),
                          ],
                        ),
                      ],
                    ),
                  ),
                  glassSection(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          loc.language,
                          style: TextStyle(
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                            color: textColor,
                          ),
                        ),
                        const SizedBox(height: 12),
                        Row(
                          children: [
                            langButton('en', 'English'),
                            const SizedBox(width: 8),
                            langButton('bn', 'বাংলা'),
                          ],
                        ),
                      ],
                    ),
                  ),
                  glassSection(child: _buildAdFreeSection(textColor)),
                  glassSection(
                    child: Column(
                      children: [
                        ListTile(
                          leading: Icon(Icons.cleaning_services, color: textColor),
                          title: Text(loc.clearCache, style: TextStyle(color: textColor)),
                          trailing: _isClearingCache
                              ? CircularProgressIndicator(
                                  strokeWidth: 2,
                                  valueColor: AlwaysStoppedAnimation(theme.colorScheme.primary),
                                )
                              : IconButton(
                                  icon: Icon(Icons.delete, color: textColor),
                                  onPressed: _clearCache,
                                ),
                        ),
                        ListTile(
                          leading: Icon(Icons.star_rate, color: textColor),
                          title: Text(loc.rateApp, style: TextStyle(color: textColor)),
                          trailing: IconButton(
                            icon: Icon(Icons.chevron_right, color: textColor),
                            onPressed: _rateApp,
                          ),
                        ),
                        ListTile(
                          leading: Icon(Icons.support_agent, color: textColor),
                          title: Text(loc.contactSupport, style: TextStyle(color: textColor)),
                          subtitle: Text(
                            loc.contactEmail,
                            style: TextStyle(color: textColor.withOpacity(0.7)),
                          ),
                          trailing: IconButton(
                            icon: Icon(Icons.chevron_right, color: textColor),
                            onPressed: _contactSupport,
                          ),
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(height: 16),
                  Center(
                    child: Text(
                      '${loc.versionPrefix} $_version',
                      style: TextStyle(
                        color: textColor.withOpacity(0.7),
                        fontStyle: FontStyle.italic,
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/home/home_screen.dart ===

// lib/features/home/home_screen.dart

import 'dart:async';
import 'dart:convert';
import 'dart:ui';

import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:intl/intl.dart';
import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:go_router/go_router.dart';
import 'package:geolocator/geolocator.dart';
import 'package:http/http.dart' as http;

import '../../core/theme_provider.dart';
import '../../core/theme.dart';
import '../../core/env_keys.dart';
import '../../data/models/news_article.dart';
import '../../data/services/hive_service.dart';
import '../../data/services/rss_service.dart';
import '../../widgets/app_drawer.dart';
import '../../features/common/appBar.dart';
import '../home/widgets/news_card.dart';
import '../home/widgets/shimmer_loading.dart';
import '/l10n/app_localizations.dart';

final RouteObserver<ModalRoute<void>> routeObserver =
    RouteObserver<ModalRoute<void>>();

class HomeScreen extends StatefulWidget {
  const HomeScreen({Key? key}) : super(key: key);

  @override
  HomeScreenState createState() => HomeScreenState();
}

class HomeScreenState extends State<HomeScreen>
    with TickerProviderStateMixin, RouteAware {
  late TabController _tabController;
  final ScrollController _scrollController = ScrollController();

  // Now only these four categories:
  late List<String> _categoryKeys;
  late Map<String, String> _localizedLabels;

  final Map<String, List<NewsArticle>> _articles = {};
  final Map<String, bool> _loadingStatus = {};
  final Map<String, int> _articleLimit = {};

  Locale? _lastLocale;
  DateTime? _lastBackPressed;
  bool _isSlowConnection = false;

  // ─── Weather state ─────────────────────────────────────────────────
  bool _weatherLoading = true;
  String _weatherLocation = '';
  double? _weatherTemp;

  @override
  void initState() {
    super.initState();
    _checkNetworkSpeed();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      routeObserver.subscribe(this, ModalRoute.of(context)!);
    });
    _loadWeather();
  }

  Future<void> _checkNetworkSpeed() async {
    final result = await Connectivity().checkConnectivity();
    setState(() => _isSlowConnection = result != ConnectivityResult.wifi);
  }

  Future<void> _loadWeather() async {
    try {
      LocationPermission perm = await Geolocator.checkPermission();
      if (perm == LocationPermission.denied ||
          perm == LocationPermission.deniedForever) {
        perm = await Geolocator.requestPermission();
      }
      final Position pos = await Geolocator.getCurrentPosition(
          desiredAccuracy: LocationAccuracy.low);

      final Uri uri = Uri.https('api.openweathermap.org', '/data/2.5/weather', {
        'lat': pos.latitude.toString(),
        'lon': pos.longitude.toString(),
        'units': 'metric',
        'appid': EnvService.weatherApiKey,
      });
      final http.Response res = await http.get(uri).timeout(const Duration(seconds: 10));
      if (res.statusCode == 200) {
        final Map<String, dynamic> data = jsonDecode(res.body) as Map<String, dynamic>;
        setState(() {
          _weatherLocation = data['name']?.toString() ?? '';
          _weatherTemp = (data['main']?['temp'] as num?)?.toDouble();
          _weatherLoading = false;
        });
      } else {
        throw Exception('Weather API ${res.statusCode}');
      }
    } catch (e) {
      debugPrint('Weather error: $e');
      setState(() {
        _weatherLoading = false;
        _weatherTemp = null;
        _weatherLocation = '';
      });
      Fluttertoast.showToast(msg: 'Unable to load weather');
    }
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    final locale = Localizations.localeOf(context);
    if (_lastLocale == locale) return;
    _lastLocale = locale;

    final loc = AppLocalizations.of(context)!;

    // Grab exactly the four categories from the new RssService
    _categoryKeys = RssService.categories;

    // Localize their labels:
    _localizedLabels = {
      'latest': loc.latest,
      'national': loc.national,
      'international': loc.international,
      'education': loc.lifestyle, // or loc.education if you have it
    };

    // Create the TabController
    _tabController =
        TabController(length: _categoryKeys.length, vsync: this)
          ..addListener(_scrollToTop);

    // Reset state and bootstrap
    _articles.clear();
    _loadingStatus.clear();
    _articleLimit.clear();
    HiveService.init(_categoryKeys).then((_) => _loadInitialFeeds());
  }

  Future<void> _loadInitialFeeds() async {
    setState(() {
      for (final k in _categoryKeys) {
        _loadingStatus[k] = true;
      }
    });
    await Future.wait(_categoryKeys.map(_loadFeedForKey));
  }

  Future<void> _loadFeedForKey(String key) async {
    List<NewsArticle> news;

    // 1️⃣ Try cache
    if (!HiveService.isExpired(key) && HiveService.hasArticles(key)) {
      news = HiveService.getArticles(key);
    } else {
      // 2️⃣ Fetch fresh via unified API
      news = await RssService.fetchNews(
        category: key,
        locale: Localizations.localeOf(context),
        context: context,
      );
      await HiveService.saveArticles(key, news);
    }

    final initialCount = _isSlowConnection ? 5 : 15;
    setState(() {
      _articles[key] = news;
      _articleLimit[key] = initialCount;
      _loadingStatus[key] = false;
    });
  }

  void _scrollToTop() {
    if (_scrollController.hasClients) {
      _scrollController.jumpTo(0);
    }
    setState(() {});
  }

  void _loadMore(String key) {
    final current = _articleLimit[key]!;
    final max = _articles[key]?.length ?? 0;
    if (current < max) {
      setState(() {
        _articleLimit[key] = (current + 10).clamp(0, max);
      });
    }
  }

  Future<bool> _onWillPop() async {
    final now = DateTime.now();
    if (_lastBackPressed == null ||
        now.difference(_lastBackPressed!) > const Duration(seconds: 2)) {
      _lastBackPressed = now;
      Fluttertoast.showToast(
        msg: "Press back again to exit",
        toastLength: Toast.LENGTH_SHORT,
      );
      return false;
    }
    return true;
  }

  @override
  void didPopNext() {
    _tabController.animateTo(0);
    _scrollToTop();
  }

  @override
  void dispose() {
    routeObserver.unsubscribe(this);
    _tabController.dispose();
    _scrollController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final prov = context.watch<ThemeProvider>();
    final colors = AppGradients.getGradientColors(prov.appThemeMode);
    final start = colors[0], end = colors[1];

    final key = _categoryKeys[_tabController.index];
    final isLoading = _loadingStatus[key] ?? true;
    final visible = _articles[key]?.take(_articleLimit[key]!).toList() ?? [];

    return WillPopScope(
      onWillPop: _onWillPop,
      child: Scaffold(
        extendBodyBehindAppBar: true,
        backgroundColor: Colors.transparent,
        drawer: const AppDrawer(),
        appBar: AppBar(
          backgroundColor: Colors.transparent,
          elevation: 0,
          centerTitle: true,
          title: const AppBarTitle('BDNewsHub 📰'),
          flexibleSpace: ClipRect(
            child: BackdropFilter(
              filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20),
              child: Container(
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                    colors: [start.withOpacity(0.8), end.withOpacity(0.85)],
                  ),
                ),
              ),
            ),
          ),
        ),
        body: Stack(fit: StackFit.expand, children: [
          // background gradient
          Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [start.withOpacity(0.6), end.withOpacity(0.7)],
              ),
            ),
          ),

          SafeArea(
            child: Column(
              children: [
                const SizedBox(height: 12),
                _buildDateWeather(prov),
                const SizedBox(height: 12),
                _buildChips(prov),
                const SizedBox(height: 8),
                Expanded(
                  child: isLoading
                      ? const ShimmerLoading()
                      : visible.isEmpty
                          ? Center(
                              child: Text(loc.noArticlesFound,
                                  style: prov.floatingTextStyle(fontSize: 16)),
                            )
                          : NotificationListener<ScrollNotification>(
                              onNotification: (s) {
                                if (s.metrics.pixels ==
                                    s.metrics.maxScrollExtent) {
                                  _loadMore(key);
                                }
                                return false;
                              },
                              child: RefreshIndicator(
                                onRefresh: _loadInitialFeeds,
                                color: end.withOpacity(0.8),
                                child: ListView.builder(
                                  controller: _scrollController,
                                  padding: const EdgeInsets.symmetric(
                                      horizontal: 12, vertical: 8),
                                  itemCount: visible.length,
                                  itemBuilder: (_, i) {
  final article = visible[i];
  final source = article.source.toLowerCase();
  final isHighlighted =
      !(source.contains('prothom') || source.contains('daily star'));

  return Padding(
    padding: const EdgeInsets.symmetric(vertical: 8),
    child: NewsCard(
      article: article,
      onTap: () => context.push(
        '/webview',
        extra: {
          'url': article.url,
          'title': article.title,
        },
      ),
      highlight: isHighlighted, // 👈 if your NewsCard supports this
    ),
  );
},

                                ),
                              ),
                            ),
                ),
              ],
            ),
          ),
        ]),
      ),
    );
  }

  Widget _buildDateWeather(ThemeProvider prov) {
    final now = DateTime.now();
    final time = DateFormat('hh:mm a').format(now);
    final date = DateFormat('dd.MM.yyyy').format(now);
    final weather = _weatherLoading
        ? '...'
        : (_weatherLocation.isNotEmpty && _weatherTemp != null
            ? '$_weatherLocation, ${_weatherTemp!.round()}°C'
            : 'Unknown');

    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 12),
      child: Container(
        decoration:
            prov.glassDecoration(borderRadius: BorderRadius.circular(32)),
        padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 20),
        child: Column(children: [
          Row(children: [
            Icon(Icons.battery_full, color: prov.floatingTextStyle().color),
            const SizedBox(width: 8),
            Text('75%', style: prov.floatingTextStyle(fontSize: 14)),
            const Spacer(),
            Text(time, style: prov.floatingTextStyle(fontSize: 24)),
          ]),
          const SizedBox(height: 12),
          Row(children: [
            Text(weather, style: prov.floatingTextStyle(fontSize: 18)),
            const Spacer(),
            Text(date, style: prov.floatingTextStyle(fontSize: 14)),
          ]),
        ]),
      ),
    );
  }

  Widget _buildChips(ThemeProvider prov) {
    final isLight = Theme.of(context).brightness == Brightness.light;

    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 12),
      child: Container(
        height: 48,
        decoration: prov.glassDecoration(borderRadius: BorderRadius.circular(16)),
        child: ListView.builder(
          scrollDirection: Axis.horizontal,
          padding: const EdgeInsets.symmetric(horizontal: 8),
          itemCount: _categoryKeys.length,
          itemBuilder: (_, i) {
            final label = _localizedLabels[_categoryKeys[i]] ?? _categoryKeys[i];
            final selected = _tabController.index == i;

            return Padding(
              padding: const EdgeInsets.symmetric(horizontal: 6),
              child: ChoiceChip(
                label: Text(
                  label,
                  style: TextStyle(
                    fontSize: 14,
                    fontWeight: selected ? FontWeight.w900 : FontWeight.w600,
                    color: isLight ? Colors.black87 : (selected ? Colors.white : Colors.white70),
                  ),
                ),
                selected: selected,
                backgroundColor: prov.glassColor,
                selectedColor: Colors.amber.withOpacity(0.8),
                elevation: selected ? 4 : 0,
                onSelected: (_) {
                  _tabController.animateTo(i);
                  _scrollToTop();
                },
              ),
            );
          },
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/home/widgets/stock_exchange_widget.dart ===

import 'dart:async';
import 'package:flutter/material.dart';
import 'package:webview_flutter/webview_flutter.dart';
import 'package:url_launcher/url_launcher.dart';

/// Shows ONLY the live DSE share-price scroll with full error/loading handling.
class StockExchangeWidget extends StatefulWidget {
  /// Height of the widget; default to 150.
  final double height;

  const StockExchangeWidget({Key? key, this.height = 150}) : super(key: key);

  @override
  State<StockExchangeWidget> createState() => _StockExchangeWidgetState();
}

class _StockExchangeWidgetState extends State<StockExchangeWidget> {
  late final WebViewController _controller;
  bool _isLoading = true;
  bool _hasError = false;
  static const _url = 'https://www.dsebd.org/latest_share_price_scroll_l.php';

  @override
  void initState() {
    super.initState();

    // Initialize controller
    _controller = WebViewController()
      ..setJavaScriptMode(JavaScriptMode.unrestricted)
      ..setNavigationDelegate(NavigationDelegate(
        onPageStarted: (_) {
          setState(() {
            _isLoading = true;
            _hasError = false;
          });
        },
        onPageFinished: (_) async {
          // Keep only the first <table>
          await _controller.runJavaScript('''
            (function(){
              const table = document.querySelector('table');
              if (!table) return;
              document.body.innerHTML = '';
              document.body.appendChild(table);
            })();
          ''');
          setState(() {
            _isLoading = false;
          });
        },
        onWebResourceError: (_) {
          setState(() {
            _hasError = true;
            _isLoading = false;
          });
        },
      ))
      ..loadRequest(Uri.parse(_url));
  }

  Future<void> _reload() async {
    setState(() {
      _isLoading = true;
      _hasError = false;
    });
    await _controller.reload();
  }

  Future<void> _openInBrowser() => launchUrl(
        Uri.parse(_url),
        mode: LaunchMode.externalApplication,
      );

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      height: widget.height,
      child: Stack(
        children: [
          // WebView content
          Positioned.fill(
            child: ClipRRect(
              borderRadius: BorderRadius.circular(8),
              child: WebViewWidget(controller: _controller),
            ),
          ),

          // Loading spinner
          if (_isLoading)
            const Center(child: CircularProgressIndicator()),

          // Error UI
          if (_hasError)
            Center(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  const Text('Failed to load DSE data'),
                  const SizedBox(height: 8),
                  ElevatedButton.icon(
                    icon: const Icon(Icons.refresh),
                    label: const Text('Retry'),
                    onPressed: _reload,
                  ),
                ],
              ),
            ),

          // Controls (refresh + browser)
          if (!_isLoading && !_hasError)
            Positioned(
              top: 4,
              right: 4,
              child: Row(
                children: [
                  IconButton(
                    icon: const Icon(Icons.refresh),
                    tooltip: 'Reload',
                    onPressed: _reload,
                  ),
                  IconButton(
                    icon: const Icon(Icons.open_in_new),
                    tooltip: 'Open in browser',
                    onPressed: _openInBrowser,
                  ),
                ],
              ),
            ),
        ],
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/home/widgets/shimmer_list_loader.dart ===

// path: lib/features/home/widgets/shimmer_list_loader.dart

import 'package:flutter/material.dart';
import 'package:shimmer/shimmer.dart';

class ShimmerListLoader extends StatelessWidget {
  const ShimmerListLoader({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return ListView.builder(
      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
      itemCount: 6, // Show 6 placeholders
      itemBuilder: (_, __) => Padding(
        padding: const EdgeInsets.symmetric(vertical: 8),
        child: Shimmer.fromColors(
          baseColor: Colors.grey.shade300,
          highlightColor: Colors.grey.shade100,
          child: Container(
            height: 240,
            decoration: BoxDecoration(
              color: Colors.grey[300],
              borderRadius: BorderRadius.circular(16),
            ),
          ),
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/home/widgets/shimmer_loading.dart ===

import 'package:flutter/material.dart';
import 'package:shimmer/shimmer.dart';

class ShimmerLoading extends StatelessWidget {
  const ShimmerLoading({
    super.key,
    this.height = 150,
    this.width = double.infinity,
    this.borderRadius = 16.0,
    this.margin = const EdgeInsets.all(8.0),
    this.period = const Duration(milliseconds: 1500),
  });

  final double height;
  final double width;
  final double borderRadius;
  final EdgeInsetsGeometry margin;
  final Duration period;

  @override
  Widget build(BuildContext context) {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    final baseColor = isDark ? Colors.grey.shade800 : Colors.grey.shade300;
    final highlightColor = isDark ? Colors.grey.shade700 : Colors.grey.shade100;

    return Card(
      elevation: 6,
      margin: margin,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(borderRadius),
      ),
      child: Shimmer.fromColors(
        baseColor: baseColor,
        highlightColor: highlightColor,
        period: period,
        child: Container(
          width: width,
          height: height,
          decoration: BoxDecoration(
            color: baseColor,
            borderRadius: BorderRadius.circular(borderRadius),
          ),
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/home/widgets/news_card.dart ===

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import '/core/utils/source_logos.dart';
import '../../../data/models/news_article.dart';

class NewsCard extends StatelessWidget {
  final NewsArticle article;
  final VoidCallback? onTap;
  final bool highlight;
  const NewsCard({
  Key? key,
  required this.article,
  this.onTap,
  this.highlight = true,
}) : super(key: key);

  bool get isLive => article.isLive;
  bool get isBreaking => DateTime.now().difference(article.publishedAt) < const Duration(hours: 6);
  bool get isFresh => DateTime.now().difference(article.publishedAt) < const Duration(minutes: 30);
  bool get isCached => article.fromCache;

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final logoPath = SourceLogos.logos[article.sourceOverride ?? article.source];
    final timestamp = DateFormat('hh:mm a').format(article.publishedAt);

    return GestureDetector(
      onTap: onTap,
      child: Container(
        margin: const EdgeInsets.symmetric(vertical: 10, horizontal: 8),
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(18),
          color: Colors.white.withOpacity(0.08),
          border: Border.all(color: Colors.white.withOpacity(0.15)),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.1),
              blurRadius: 10,
              offset: const Offset(0, 4),
            ),
          ],
        ),
        child: ClipRRect(
          borderRadius: BorderRadius.circular(18),
          child: BackdropFilter(
            filter: ImageFilter.blur(sigmaX: 14, sigmaY: 14),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                if (article.imageUrl?.isNotEmpty ?? false)
                  ClipRRect(
                    borderRadius: const BorderRadius.vertical(top: Radius.circular(18)),
                    child: FadeInImage.assetNetwork(
                      placeholder: 'assets/placeholder.png',
                      image: article.imageUrl!,
                      width: double.infinity,
                      height: 180,
                      fit: BoxFit.cover,
                      imageErrorBuilder: (_, __, ___) => Container(
                        height: 180,
                        color: Colors.grey.shade300,
                        alignment: Alignment.center,
                        child: const Icon(Icons.image_not_supported, size: 36, color: Colors.grey),
                      ),
                    ),
                  ),
                Padding(
                  padding: const EdgeInsets.all(14),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                     Row(
  children: [
    if (logoPath != null)
      _glassLogo(logoPath)
    else
      const Icon(
        Icons.public,
        size: 24,
        color: Colors.deepPurpleAccent,
      ),
    const SizedBox(width: 10),
    Expanded(
      child: Text(
        article.sourceOverride ?? article.source,
        style: const TextStyle(
          fontSize: 13,
          fontWeight: FontWeight.bold,
          color: Colors.white,
        ),
        maxLines: 1,
        overflow: TextOverflow.ellipsis,
      ),
    ),
    if (isLive) _tag("LIVE ⚡", Colors.redAccent),
    if (!isLive && isBreaking) _tag("BREAKING 🔥", Colors.orangeAccent),
    if (!isLive && !isBreaking && isFresh) _tag("NEW", Colors.lightBlue),
    if (!isLive && !isBreaking && !isFresh && isCached) _tag("CACHED", Colors.grey),
  ],
),


                      const SizedBox(height: 10),

                      Text(
                        article.title,
                        style: theme.textTheme.titleMedium?.copyWith(
                          fontWeight: FontWeight.bold,
                          color: Colors.white,
                        ),
                      ),

                      if (article.snippet.isNotEmpty)
                        Padding(
                          padding: const EdgeInsets.only(top: 6),
                          child: Text(
                            article.snippet,
                            style: theme.textTheme.bodyMedium?.copyWith(
                              color: Colors.white70,
                              height: 1.4,
                            ),
                            maxLines: 3,
                            overflow: TextOverflow.ellipsis,
                          ),
                        ),

                      const SizedBox(height: 8),
                      Text(
                        timestamp,
                        style: theme.textTheme.labelSmall?.copyWith(color: Colors.white60),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _glassLogo(String path) {
    return Container(
      width: 36,
      height: 36,
      padding: const EdgeInsets.all(4),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(10),
        gradient: LinearGradient(
          colors: [
            Colors.white.withOpacity(0.25),
            Colors.white.withOpacity(0.05),
          ],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        border: Border.all(color: Colors.white.withOpacity(0.25), width: 1),
        boxShadow: [
          BoxShadow(
            color: Colors.white.withOpacity(0.08),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: ClipRRect(
        borderRadius: BorderRadius.circular(8),
        child: Image.asset(path, fit: BoxFit.contain),
      ),
    );
  }

  Widget _tag(String label, Color color) {
    return Container(
      margin: const EdgeInsets.only(left: 8),
      padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 3),
      decoration: BoxDecoration(
        color: color,
        borderRadius: BorderRadius.circular(10),
      ),
      child: Text(
        label,
        style: const TextStyle(
          color: Colors.white,
          fontSize: 10,
          fontWeight: FontWeight.bold,
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/splash/splash_screen.dart ===

// lib/features/splash/splash_screen.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../../core/splash_service.dart';
import '../../features/common/appBar.dart';
import '../../core/theme_provider.dart';
import '../../core/theme.dart'; // for AppGradients

class SplashScreen extends StatefulWidget {
  const SplashScreen({super.key});
  @override
  State<SplashScreen> createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen> with TickerProviderStateMixin {
  bool _showLogo = false;
  bool _showText = false;
  late final AnimationController _zoomController;
  late final Animation<double> _zoomAnimation;

  @override
  void initState() {
    super.initState();
    _zoomController = AnimationController(
      duration: const Duration(milliseconds: 1600),
      vsync: this,
    );
    _zoomAnimation = Tween<double>(begin: 0.7, end: 1.2).animate(
      CurvedAnimation(parent: _zoomController, curve: Curves.easeInOutBack),
    );
    _runAnimations();
    _navigateToNext();
  }

  @override
  void dispose() {
    _zoomController.dispose();
    super.dispose();
  }

  Future<void> _runAnimations() async {
    await Future.delayed(const Duration(milliseconds: 300));
    if (!mounted) return;
    setState(() => _showLogo = true);
    _zoomController.forward();
    await Future.delayed(const Duration(milliseconds: 700));
    if (!mounted) return;
    setState(() => _showText = true);
  }

  Future<void> _navigateToNext() async {
    // wait for splash animations
    await Future.delayed(const Duration(seconds: 2));
    if (!mounted) return;

    final prefs = await SharedPreferences.getInstance();
    final next = await SplashService(prefs: prefs).resolveInitialRoute();

    // defer navigation until after build
    WidgetsBinding.instance.addPostFrameCallback((_) {
      context.go(next);
    });
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final mode = context.watch<ThemeProvider>().appThemeMode;
    final gradientColors = AppGradients.getGradientColors(mode);
    final startColor = gradientColors[0];
    final endColor = gradientColors[1];

    return Scaffold(
      body: Stack(fit: StackFit.expand, children: [
        // tinted backdrop
        Container(color: theme.colorScheme.background.withOpacity(0.4)),
        BackdropFilter(
          filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20),
          child: const SizedBox.expand(),
        ),
        Center(
          child: AnimatedOpacity(
            opacity: _showLogo ? 1 : 0,
            duration: const Duration(milliseconds: 800),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                ScaleTransition(
                  scale: _zoomAnimation,
                  child: ClipRRect(
                    borderRadius: BorderRadius.circular(24),
                    child: Image.asset(
                      'assets/icons/app-icon.png',
                      width: 120,
                      height: 120,
                      fit: BoxFit.cover,
                    ),
                  ),
                ),
                const SizedBox(height: 24),
                AnimatedOpacity(
                  opacity: _showText ? 1 : 0,
                  duration: const Duration(milliseconds: 600),
                  child: Column(
                    children: [
                      Text(
                        'BDNewsHub',
                        style: theme.textTheme.headlineMedium?.copyWith(
                          fontWeight: FontWeight.bold,
                          letterSpacing: 1.2,
                          color: theme.colorScheme.primary,
                        ),
                      ),
                      const SizedBox(height: 16),
                      CircularProgressIndicator(
                        strokeWidth: 3,
                        valueColor: AlwaysStoppedAnimation<Color>(
                          theme.colorScheme.primary.withOpacity(0.8),
                        ),
                        backgroundColor:
                            theme.colorScheme.onBackground.withOpacity(0.2),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      ]),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/news_detail/news_detail_screen.dart ===

// lib/features/news/screens/news_detail_screen.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:share_plus/share_plus.dart';
import 'package:provider/provider.dart';
import 'package:cached_network_image/cached_network_image.dart';

import '../../data/models/news_article.dart';
import '../../core/utils/favorites_manager.dart';
import '../../core/theme_provider.dart';
import '../../widgets/app_drawer.dart';
import '../../core/theme.dart';
import 'animated_background.dart';

class NewsDetailScreen extends StatefulWidget {
  final NewsArticle news;
  const NewsDetailScreen({Key? key, required this.news}) : super(key: key);

  @override
  State<NewsDetailScreen> createState() => _NewsDetailScreenState();
}

class _NewsDetailScreenState extends State<NewsDetailScreen> {
  bool isFavorite = false;

  @override
  void initState() {
    super.initState();
    _checkFavorite();
  }

  Future<void> _checkFavorite() async {
    final fav = FavoritesManager.instance.favoriteArticles
        .any((a) => a.url == widget.news.url);
    setState(() => isFavorite = fav);
  }

  Future<void> _toggleFavorite() async {
    if (isFavorite) {
      await FavoritesManager.instance.removeFavorite(widget.news);
    } else {
      await FavoritesManager.instance.addFavorite(widget.news);
    }
    _checkFavorite();
  }

  void _shareNews() {
    Share.share('${widget.news.title}\n\n${widget.news.url}');
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final scheme = theme.colorScheme;

    return Scaffold(
      drawer: const AppDrawer(),
      extendBodyBehindAppBar: true,
      backgroundColor: Colors.transparent,
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        centerTitle: true,
        title: Text(
          widget.news.source,
          style: theme.textTheme.titleMedium?.copyWith(
            color: scheme.onPrimary,
            fontWeight: FontWeight.bold,
          ),
        ),
        flexibleSpace: const AnimatedBackground(overlayOpacity: 0.35),
        actions: [
          IconButton(
            icon: Icon(Icons.share, color: scheme.onPrimary),
            onPressed: _shareNews,
          ),
          IconButton(
            icon: Icon(
              isFavorite ? Icons.favorite : Icons.favorite_border,
              color: Colors.redAccent,
            ),
            onPressed: _toggleFavorite,
          ),
        ],
      ),
      body: AnimatedBackground(
        overlayOpacity: 0.25,
        child: SingleChildScrollView(
          padding: const EdgeInsets.fromLTRB(16, kToolbarHeight + 24, 16, 24),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              if (widget.news.imageUrl != null && widget.news.imageUrl!.isNotEmpty)
                ClipRRect(
                  borderRadius: BorderRadius.circular(16),
                  child: CachedNetworkImage(
                    imageUrl: widget.news.imageUrl!,
                    placeholder: (context, url) => Container(
                      height: 200,
                      color: Colors.black12,
                      child: const Center(child: CircularProgressIndicator()),
                    ),
                    errorWidget: (context, url, error) => Container(
                      height: 200,
                      color: Colors.black12,
                      child: const Center(child: Icon(Icons.broken_image)),
                    ),
                    height: 200,
                    width: double.infinity,
                    fit: BoxFit.cover,
                  ),
                ),
              const SizedBox(height: 20),
              Container(
                decoration: BoxDecoration(
                  color: scheme.surface.withOpacity(0.08),
                  borderRadius: BorderRadius.circular(16),
                  border: Border.all(color: scheme.primary.withOpacity(0.25)),
                ),
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      widget.news.title,
                      style: theme.textTheme.titleLarge?.copyWith(
                        color: scheme.primary,
                        fontWeight: FontWeight.bold,
                        shadows: const [Shadow(blurRadius: 4, color: Colors.black45)],
                      ),
                    ),
                    const SizedBox(height: 12),
                    Text(
                      widget.news.fullContent.isNotEmpty
                          ? widget.news.fullContent
                          : (widget.news.snippet.isNotEmpty
                              ? widget.news.snippet
                              : 'No content available.'),
                      style: theme.textTheme.bodyMedium?.copyWith(
                        color: scheme.onSurface.withOpacity(0.85),
                        height: 1.5,
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/news_detail/animated_background.dart ===

// lib/features/news/widgets/animated_background.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../../core/theme_provider.dart';
import '../../../core/theme.dart';

/// A full-screen overlay that can optionally blur the backdrop
/// and apply a semi-transparent animated gradient tint based on theme.
class AnimatedBackground extends StatelessWidget {
  final Duration duration;
  final Widget? child;
  final double blurSigma;
  final double overlayOpacity;

  const AnimatedBackground({
    super.key,
    this.duration = const Duration(seconds: 20),
    this.child,
    this.blurSigma = 20,
    this.overlayOpacity = 0.3,
  });

  @override
  Widget build(BuildContext context) {
    final mode = context.watch<ThemeProvider>().appThemeMode;
    final colors = _gradientColors(mode);

    return Stack(fit: StackFit.expand, children: [
      if (blurSigma > 0)
        Positioned.fill(
          child: BackdropFilter(
            filter: ImageFilter.blur(sigmaX: blurSigma, sigmaY: blurSigma),
            child: const SizedBox.shrink(),
          ),
        ),
      if (overlayOpacity > 0)
        Positioned.fill(
          child: AnimatedContainer(
            duration: duration,
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: colors
                    .map((c) => c.withOpacity(overlayOpacity))
                    .toList(),
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
              ),
            ),
          ),
        ),
      if (child != null) child!,
    ]);
  }

  List<Color> _gradientColors(AppThemeMode mode) {
    return switch (mode) {
      AppThemeMode.dark => [Colors.black87, Colors.grey.shade900],
      AppThemeMode.bangladesh => [const Color(0xFF004D40), const Color(0xFF26A69A)],
      AppThemeMode.light => [Colors.white, Colors.grey.shade100],
    };
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/favorites/favorites_screen.dart ===

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:intl/intl.dart';
import 'package:go_router/go_router.dart';
import 'package:share_plus/share_plus.dart';

import '../../core/theme.dart';
import '../../core/theme_provider.dart';
import '../../core/utils/favorites_manager.dart';
import '/l10n/app_localizations.dart';
import '../../widgets/app_drawer.dart';
import '../news/widgets/animated_background.dart';
import '../magazine/widgets/magazine_card.dart';
import '../news/widgets/news_card.dart';
import '../../data/models/news_article.dart';

class FavoritesScreen extends StatefulWidget {
  const FavoritesScreen({super.key});

  @override
  State<FavoritesScreen> createState() => _FavoritesScreenState();
}

class _FavoritesScreenState extends State<FavoritesScreen> {
  String _filter = 'All';
  String _timeFilter = 'All';

  late FavoritesManager _favorites;

  @override
  void initState() {
    super.initState();
    _favorites = FavoritesManager.instance;
    _favorites.loadFavorites().then((_) => setState(() {}));
  }

  List<Map<String, dynamic>> _applyTimeFilter(List<Map<String, dynamic>> list) {
    if (_timeFilter == 'All') return list;
    final now = DateTime.now();
    return list.where((item) {
      final savedAt = DateTime.tryParse(item['savedAt'] ?? '') ?? now;
      final diff = now.difference(savedAt);
      switch (_timeFilter) {
        case 'Today':
          return diff.inDays == 0;
        case 'This Week':
          return diff.inDays <= 7;
        case 'Older':
          return diff.inDays > 7;
        default:
          return true;
      }
    }).toList();
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final theme = Theme.of(context);
    final textColor = theme.textTheme.bodyLarge?.color ?? Colors.white;
    final categories = ['All', loc.articles, loc.magazines, loc.newspapers];
    final filters = ['All', 'Today', 'This Week', 'Older'];

    final mode = context.watch<ThemeProvider>().appThemeMode;
    final colors = AppGradients.getGradientColors(mode);
    final start = colors[0], end = colors[1];

    final allItems = [
      ..._favorites.favoriteArticles.map((a) => a.toMap()),
      ..._favorites.favoriteMagazines,
      ..._favorites.favoriteNewspapers
    ];

    List<Map<String, dynamic>> filtered = allItems;

    if (_filter != 'All') {
      if (_filter == loc.articles) {
        filtered = _favorites.favoriteArticles.map((a) => a.toMap()).toList();
      } else if (_filter == loc.magazines) {
        filtered = _favorites.favoriteMagazines;
      } else if (_filter == loc.newspapers) {
        filtered = _favorites.favoriteNewspapers;
      }
    }

    filtered = _applyTimeFilter(filtered);

    return WillPopScope(
      onWillPop: () async {
        context.go('/home');
        return false;
      },
      child: Scaffold(
        drawer: const AppDrawer(),
        appBar: AppBar(
          title: Text(loc.favorites, style: const TextStyle(fontWeight: FontWeight.bold)),
          centerTitle: true,
          leading: IconButton(
            icon: const Icon(Icons.arrow_back),
            onPressed: () => context.go('/home'),
          ),
          flexibleSpace: _blurredAppBar(context, start, end),
        ),
        body: Stack(
          fit: StackFit.expand,
          children: [
            _backgroundGradient(start, end),
            AnimatedBackground(
              child: Column(
                children: [
                  Padding(
                    padding: const EdgeInsets.all(12),
                    child: _glassSection(
                      context,
                      child: Row(
                        children: [
                          Expanded(
                            child: DropdownButton<String>(
                              value: _filter,
                              isExpanded: true,
                              dropdownColor: theme.cardColor.withOpacity(0.9),
                              iconEnabledColor: textColor,
                              style: TextStyle(color: textColor, fontWeight: FontWeight.w600),
                              underline: const SizedBox(),
                              items: categories.map((cat) => DropdownMenuItem(
                                value: cat,
                                child: Text(cat, style: TextStyle(color: textColor)),
                              )).toList(),
                              onChanged: (val) => setState(() => _filter = val!),
                            ),
                          ),
                          const SizedBox(width: 12),
                          DropdownButton<String>(
                            value: _timeFilter,
                            dropdownColor: theme.cardColor.withOpacity(0.9),
                            iconEnabledColor: textColor,
                            style: TextStyle(color: textColor),
                            underline: const SizedBox(),
                            items: filters.map((f) => DropdownMenuItem(
                              value: f,
                              child: Text(f, style: TextStyle(color: textColor)),
                            )).toList(),
                            onChanged: (val) => setState(() => _timeFilter = val!),
                          ),
                        ],
                      ),
                    ),
                  ),
                  Expanded(
                    child: RefreshIndicator(
                      onRefresh: () async {
                        await _favorites.loadFavorites();
                        setState(() {});
                      },
                      child: ListView(
                        padding: const EdgeInsets.all(16),
                        children: filtered.isEmpty
                            ? [_buildEmpty(loc, textColor)]
                            : _buildCards(context, filtered),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildEmpty(AppLocalizations loc, Color color) {
    return Padding(
      padding: const EdgeInsets.only(top: 100),
      child: Center(
        child: Text(loc.noFavoritesYet, style: TextStyle(color: color.withOpacity(0.7))),
      ),
    );
  }

  List<Widget> _buildCards(BuildContext context, List<Map<String, dynamic>> filtered) {
    return filtered.map((item) {
      final savedAt = DateTime.tryParse(item['savedAt'] ?? '') ?? DateTime.now();
      final subtitle = 'Saved on ${DateFormat.yMMMd().format(savedAt)}';

      if (item.containsKey('title')) {
        final article = NewsArticle.fromMap(item);
        return _glassSection(
          context,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              NewsCard(
                news: item,
                isFavorite: true,
                onFavoriteToggle: () async {
                  await _favorites.toggleArticleMap(item);
                  setState(() {});
                },
                searchQuery: '',
              ),
              Row(
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  IconButton(
                    icon: const Icon(Icons.share),
                    onPressed: () => Share.share('${article.title}\n${article.url}'),
                  ),
                ],
              ),
            ],
          ),
        );
      } else if (item.containsKey('tags')) {
        return _glassSection(
          context,
          child: MagazineCard(
            magazine: item,
            isFavorite: true,
            onFavoriteToggle: () async {
              await _favorites.toggleMagazine(item);
              setState(() {});
            },
            highlight: false,
          ),
        );
      } else {
        return _glassSection(
          context,
          child: ListTile(
            leading: const Icon(Icons.public),
            title: Text(item['name'] ?? 'Unknown'),
            subtitle: Text(subtitle),
            trailing: IconButton(
              icon: const Icon(Icons.delete_outline),
              onPressed: () async {
                await _favorites.toggleNewspaper(item);
                setState(() {});
              },
            ),
          ),
        );
      }
    }).toList();
  }

  Widget _glassSection(BuildContext context, {required Widget child}) {
    final glow = Theme.of(context).colorScheme.primary.withOpacity(0.4);
    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      child: ClipRRect(
        borderRadius: BorderRadius.circular(18),
        child: BackdropFilter(
          filter: ImageFilter.blur(sigmaX: 12, sigmaY: 12),
          child: Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.1),
              borderRadius: BorderRadius.circular(18),
              border: Border.all(color: glow, width: 1),
              boxShadow: [BoxShadow(color: glow, blurRadius: 8, offset: const Offset(0, 4))],
            ),
            child: child,
          ),
        ),
      ),
    );
  }

  Widget _blurredAppBar(BuildContext context, Color start, Color end) {
    return ClipRect(
      child: BackdropFilter(
        filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20),
        child: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [start.withOpacity(0.85), end.withOpacity(0.85)],
            ),
          ),
        ),
      ),
    );
  }

  Widget _backgroundGradient(Color start, Color end) {
    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [start.withOpacity(0.85), end.withOpacity(0.85)],
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/quiz/daily_quiz_widget.dart ===

// lib/features/quiz/daily_quiz_widget.dart

import 'dart:convert';
import 'dart:ui';
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:http/http.dart' as http;
import 'package:provider/provider.dart';
import 'package:confetti/confetti.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:audioplayers/audioplayers.dart';

import '/core/theme_provider.dart';
import '/core/language_provider.dart';
import '/l10n/app_localizations.dart';

class DailyQuizWidget extends StatefulWidget {
  const DailyQuizWidget({Key? key}) : super(key: key);

  @override
  State<DailyQuizWidget> createState() => _DailyQuizWidgetState();
}

class _DailyQuizWidgetState extends State<DailyQuizWidget> {
  final _controller = ConfettiController(duration: const Duration(seconds: 3));
  final _audioPlayer = AudioPlayer();

  List<Map<String, dynamic>> _questions = [];
  int _current = 0;
  int _score = 0;
  bool _loading = true;
  bool _showResult = false;
  bool _answered = false;
  int _streak = 0;
  int _highScore = 0;

  @override
  void initState() {
    super.initState();
    _loadStats();
    _fetchQuiz();
  }

  Future<void> _loadStats() async {
    final prefs = await SharedPreferences.getInstance();
    _streak = prefs.getInt('quiz_streak') ?? 0;
    _highScore = prefs.getInt('quiz_high_score') ?? 0;
    setState(() {});
  }

  Future<void> _saveStats() async {
    final prefs = await SharedPreferences.getInstance();
    if (_score == _questions.length) {
      _streak++;
    } else {
      _streak = 0;
    }
    prefs.setInt('quiz_streak', _streak);
    if (_score > _highScore) {
      _highScore = _score;
      prefs.setInt('quiz_high_score', _highScore);
    }
  }

  Future<void> _fetchQuiz() async {
    final langCode = Provider.of<LanguageProvider>(context, listen: false).locale.languageCode;
    final useBangla = langCode == 'bn';

    final List<Map<String, dynamic>> quizzes = [];
    final localJson = await rootBundle.loadString(
      useBangla ? 'assets/quizzes/bn_daily_expanded.json' : 'assets/quizzes/en_daily.json',
    );
    final data = json.decode(localJson);
    final shuffled = List<Map<String, dynamic>>.from(data)..shuffle();
    quizzes.addAll(shuffled.take(5));

    setState(() {
      _questions = quizzes;
      _loading = false;
    });
  }

  Future<void> _answer(String selected) async {
    if (_answered) return;
    setState(() => _answered = true);
    final correct = _questions[_current]['correct'];
    _questions[_current]['selected'] = selected;

    if (selected == correct) {
      _score++;
      _controller.play();
      await _audioPlayer.play(AssetSource('sounds/correct.mp3'));
    } else {
      await _audioPlayer.play(AssetSource('sounds/wrong.mp3'));
    }
  }

  void _previous() {
    if (_current > 0) {
      setState(() {
        _current--;
        _answered = _questions[_current].containsKey('selected');
      });
    }
  }

  Future<void> _next() async {
    if (_current + 1 < _questions.length) {
      setState(() {
        _current++;
        _answered = _questions[_current].containsKey('selected');
      });
    } else {
      await _saveStats();
      setState(() => _showResult = true);
    }
  }

  Widget _glassCard({required Widget child}) {
    return ClipRRect(
      borderRadius: BorderRadius.circular(20),
      child: BackdropFilter(
        filter: ImageFilter.blur(sigmaX: 10, sigmaY: 10),
        child: Container(
          decoration: BoxDecoration(
            color: Colors.white.withOpacity(0.08),
            borderRadius: BorderRadius.circular(20),
            border: Border.all(color: Colors.white.withOpacity(0.2)),
          ),
          padding: const EdgeInsets.all(16),
          child: child,
        ),
      ),
    );
  }

  @override
  void dispose() {
    _controller.dispose();
    _audioPlayer.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final prov = context.watch<ThemeProvider>();
    final theme = Theme.of(context);

    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: AppBar(
        title: Text(loc.dailyQuiz),
        centerTitle: true,
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: GestureDetector(
          onTap: () => Navigator.pop(context),
          child: Container(
            margin: const EdgeInsets.all(8),
            decoration: const BoxDecoration(
              shape: BoxShape.circle,
              gradient: LinearGradient(
                colors: [Color(0xFFff6a00), Color(0xFFee0979)],
              ),
            ),
            child: const Icon(Icons.arrow_back, color: Colors.white),
          ),
        ),
        actions: [
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 12),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text('🔥 $_streak ${loc.streak}', style: theme.textTheme.labelMedium),
                Text('🏆 $_highScore ${loc.highScore}', style: theme.textTheme.labelMedium),
              ],
            ),
          )
        ],
      ),
      body: _loading
          ? const Center(child: CircularProgressIndicator())
          : Stack(
              children: [
                Container(
                  decoration: const BoxDecoration(
                    gradient: LinearGradient(
                      colors: [Color(0xFF2193b0), Color(0xFF6dd5ed)],
                      begin: Alignment.topLeft,
                      end: Alignment.bottomRight,
                    ),
                  ),
                ),
                SafeArea(
                  child: Padding(
                    padding: const EdgeInsets.all(16),
                    child: _showResult
                        ? SingleChildScrollView(
                            child: _glassCard(
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Center(
                                    child: Text('🎉 ${loc.quizSummary}',
                                        style: prov.floatingTextStyle(fontSize: 24)),
                                  ),
                                  const SizedBox(height: 16),
                                  ..._questions.asMap().entries.map((e) {
                                    final i = e.key;
                                    final q = e.value;
                                    return Column(
                                      crossAxisAlignment: CrossAxisAlignment.start,
                                      children: [
                                        Text('Q${i + 1}: ${q['question']}'),
                                        Text('✅ ${loc.correct}: ${q['correct']}'),
                                        Text(
                                          '❌ ${loc.yourAnswer}: ${q['selected'] ?? loc.notAnswered}',
                                          style: TextStyle(
                                            color: q['selected'] != q['correct']
                                                ? Colors.redAccent
                                                : Colors.green,
                                          ),
                                        ),
                                        const Divider(),
                                      ],
                                    );
                                  }),
                                  const SizedBox(height: 20),
                                  Text('🔥 ${loc.streak}: $_streak'),
                                  Text('🏆 ${loc.highScore}: $_highScore'),
                                  const SizedBox(height: 20),
                                  Center(
                                    child: ElevatedButton(
                                      onPressed: _fetchQuiz,
                                      child: Text(loc.tryAgain),
                                    ),
                                  )
                                ],
                              ),
                            ),
                          )
                        : Column(
                            crossAxisAlignment: CrossAxisAlignment.stretch,
                            children: [
                              LinearProgressIndicator(
                                value: (_current + 1) / _questions.length,
                                minHeight: 6,
                                backgroundColor: Colors.white30,
                                valueColor: const AlwaysStoppedAnimation(Colors.cyanAccent),
                              ),
                              const SizedBox(height: 16),
                              Expanded(
                                child: _glassCard(
                                  child: Column(
                                    crossAxisAlignment: CrossAxisAlignment.start,
                                    children: [
                                      Text(
                                        'Q${_current + 1}: ${_questions[_current]['question']}',
                                        style: prov.floatingTextStyle(fontSize: 20),
                                      ),
                                      const SizedBox(height: 12),
                                      ..._questions[_current]['options'].map<Widget>((opt) {
                                        final selected = _questions[_current]['selected'];
                                        final correct = _questions[_current]['correct'];
                                        Color? color;
                                        if (_answered) {
                                          if (opt == correct) {
                                            color = Colors.green.shade100;
                                          } else if (opt == selected) {
                                            color = Colors.red.shade100;
                                          }
                                        }
                                        return Card(
                                          color: color,
                                          child: ListTile(
                                            title: Text(opt),
                                            onTap: () => _answer(opt),
                                          ),
                                        );
                                      }),
                                    ],
                                  ),
                                ),
                              ),
                              const SizedBox(height: 8),
                              Row(
                                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                children: [
                                  IconButton.filled(
                                    onPressed: _previous,
                                    icon: const Icon(Icons.arrow_back),
                                    style: IconButton.styleFrom(
                                      shape: const CircleBorder(),
                                      backgroundColor: Colors.white.withOpacity(0.2),
                                    ),
                                  ),
                                  IconButton.filled(
                                    onPressed: _answered ? _next : null,
                                    icon: Icon(
                                      _current + 1 < _questions.length
                                          ? Icons.arrow_forward
                                          : Icons.check,
                                    ),
                                    style: IconButton.styleFrom(
                                      shape: const CircleBorder(),
                                      backgroundColor:
                                          _answered ? Colors.green : Colors.grey,
                                    ),
                                  ),
                                ],
                              )
                            ],
                          ),
                  ),
                ),
                Positioned(
                  top: 16,
                  left: 0,
                  right: 0,
                  child: ConfettiWidget(
                    confettiController: _controller,
                    blastDirection: pi / 2,
                    numberOfParticles: 40,
                    gravity: 0.3,
                  ),
                ),
              ],
            ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/about/about_screen.dart ===

import 'dart:ui' show ImageFilter;

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:package_info_plus/package_info_plus.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';

import '../../core/theme_provider.dart';

class AboutScreen extends StatefulWidget {
  const AboutScreen({super.key});

  @override
  State<AboutScreen> createState() => _AboutScreenState();
}

class _AboutScreenState extends State<AboutScreen> {
  String _appVersion = '';

  @override
  void initState() {
    super.initState();
    _loadAppInfo();
  }

  Future<void> _loadAppInfo() async {
    final PackageInfo info = await PackageInfo.fromPlatform();
    setState(() {
      _appVersion = '${info.version} (Build ${info.buildNumber})';
    });
  }

  Future<void> _launchEmail() async {
    final Uri emailUri = Uri(
      scheme: 'mailto',
      path: 'customerservice@dsmobiles.com',
      queryParameters: {'subject': 'BDNewsHub App Inquiry'},
    );
    if (await canLaunchUrl(emailUri)) {
      await launchUrl(emailUri);
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Could not open email app.')),
      );
    }
  }

  Future<void> _launchWebsite() async {
    final Uri uri = Uri.parse('https://www.dsmobiles.com');
    if (await canLaunchUrl(uri)) await launchUrl(uri, mode: LaunchMode.externalApplication);
  }

  void _copyToClipboard(String text, String label) {
    Clipboard.setData(ClipboardData(text: text));
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('$label copied to clipboard'),
        backgroundColor: Theme.of(context).colorScheme.secondary,
        duration: const Duration(seconds: 2),
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        margin: const EdgeInsets.all(16),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final colorScheme = theme.colorScheme;
    final mode = context.watch<ThemeProvider>().appThemeMode;

    late Color startColor;
    late Color endColor;
    switch (mode) {
      case AppThemeMode.bangladesh:
        startColor = const Color(0xFF00796B);
        endColor = const Color(0xFF004D40);
        break;
      case AppThemeMode.dark:
        startColor = const Color(0xFF2A2D30);
        endColor = const Color(0xFF1E2124);
        break;
      case AppThemeMode.light:
      default:
        startColor = const Color(0xFF42A5F5);
        endColor = const Color(0xFF1565C0);
        break;
    }

    return Scaffold(
      extendBodyBehindAppBar: true,
      backgroundColor: Colors.transparent,
      appBar: AppBar(
        title: const Text('About Us'),
        centerTitle: true,
        elevation: 0,
        backgroundColor: Colors.transparent,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => context.go('/home'),
        ),
        flexibleSpace: ClipRect(
          child: BackdropFilter(
            filter: ImageFilter.blur(sigmaX: 16, sigmaY: 16),
            child: const SizedBox.expand(),
          ),
        ),
      ),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [
                  startColor.withOpacity(0.85),
                  endColor.withOpacity(0.85),
                ],
              ),
            ),
          ),
          ListView(
            padding: EdgeInsets.fromLTRB(20, MediaQuery.of(context).padding.top + kToolbarHeight + 24, 20, 20),
            children: [
              Column(
                children: [
                  Container(
                    height: 100,
                    width: 100,
                    margin: const EdgeInsets.only(bottom: 12),
                    decoration: BoxDecoration(
                      shape: BoxShape.circle,
                      border: Border.all(color: colorScheme.primary, width: 2),
                      boxShadow: [
                        BoxShadow(color: colorScheme.primary.withOpacity(0.2), blurRadius: 10)
                      ],
                      image: const DecorationImage(
                        image: AssetImage('assets/logo.png'),
                        fit: BoxFit.cover,
                      ),
                    ),
                  ),
                  Text('BDNewsHub',
                      style: theme.textTheme.headlineSmall?.copyWith(fontWeight: FontWeight.bold)),
                  const SizedBox(height: 6),
                  Text(
                    'Real-time News at Your Fingertips',
                    style: theme.textTheme.bodyMedium?.copyWith(
                      color: theme.colorScheme.onSurface.withOpacity(0.7),
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 30),
              _buildThemeCard(
                icon: Icons.auto_stories,
                title: 'Our Story',
                content:
                    'BDNewsHub is the first mobile app by DSMobiles Group, delivering fast and reliable news updates. Our mission is to create free, high-quality apps that inform and empower.',
              ),
              _buildThemeCard(
                icon: Icons.track_changes,
                title: 'Our Vision',
                content:
                    'We envision a world where information is free and universal. Through user-first design and innovative tools, we aim to create digital experiences that inspire.',
              ),
              _buildThemeCard(
                icon: Icons.mail,
                title: 'Contact Us',
                contentWidget: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    _buildContactTile(
                      label: 'customerservice@dsmobiles.com',
                      icon: Icons.email,
                      onTap: _launchEmail,
                      onLongPress: () => _copyToClipboard('customerservice@dsmobiles.com', 'Email'),
                    ),
                    const SizedBox(height: 12),
                    _buildContactTile(
                      label: 'www.dsmobiles.com',
                      icon: Icons.language,
                      onTap: _launchWebsite,
                      onLongPress: () => _copyToClipboard('https://www.dsmobiles.com', 'Website'),
                    ),
                  ],
                ),
              ),
              const SizedBox(height: 20),
              Center(
                child: Column(
                  children: [
                    Text('Version $_appVersion', style: theme.textTheme.bodySmall),
                    const SizedBox(height: 4),
                    Text(
                      '© ${DateTime.now().year} DreamSD Group',
                      style: theme.textTheme.labelSmall?.copyWith(
                        color: theme.colorScheme.onSurface.withOpacity(0.5),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildThemeCard({
    required IconData icon,
    required String title,
    String? content,
    Widget? contentWidget,
  }) {
    final theme = Theme.of(context);
    return Container(
      margin: const EdgeInsets.symmetric(vertical: 10),
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(18),
        color: theme.cardColor,
        boxShadow: [BoxShadow(color: theme.shadowColor.withOpacity(0.05), blurRadius: 12)],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Icon(icon, color: theme.colorScheme.primary, size: 32),
          const SizedBox(height: 16),
          Text(
            title,
            style: theme.textTheme.titleMedium?.copyWith(fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 10),
          if (content != null)
            Text(
              content,
              style: theme.textTheme.bodyMedium?.copyWith(height: 1.5),
              textAlign: TextAlign.justify,
            ),
          if (contentWidget != null) contentWidget,
        ],
      ),
    );
  }

  Widget _buildContactTile({
    required String label,
    required IconData icon,
    required VoidCallback onTap,
    required VoidCallback onLongPress,
  }) {
    final theme = Theme.of(context);
    return InkWell(
      borderRadius: BorderRadius.circular(12),
      onTap: onTap,
      onLongPress: onLongPress,
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 14),
        decoration: BoxDecoration(
          color: theme.cardColor.withOpacity(0.95),
          borderRadius: BorderRadius.circular(12),
          border: Border.all(color: theme.colorScheme.outline.withOpacity(0.1)),
        ),
        child: Row(
          children: [
            Icon(icon, color: theme.colorScheme.primary),
            const SizedBox(width: 14),
            Expanded(
              child: Text(
                label,
                style: theme.textTheme.bodyMedium?.copyWith(fontWeight: FontWeight.w600),
              ),
            ),
            const Icon(Icons.copy, size: 18, color: Colors.grey),
          ],
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/search/search_screen.dart ===

// lib/features/search/search_screen.dart

import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:string_similarity/string_similarity.dart';

import '../../core/navigation_helper.dart';
import '/l10n/app_localizations.dart';

class SearchScreen extends StatefulWidget {
  const SearchScreen({super.key});

  @override
  State<SearchScreen> createState() => _SearchScreenState();
}

class _SearchScreenState extends State<SearchScreen> {
  final TextEditingController _searchController = TextEditingController();
  final List<String> _dataSet = ['Prothom Alo', 'Daily Star', 'Jugantor', 'Kaler Kantho', 'BBC Bangla', 'Anandabazar', 'Dhaka Tribune', 'News24', 'Rtv', 'Bangladesh Pratidin', 'Desh TV', 'Time Magazine', 'The Economist', 'Forbes', 'Nat Geo', 'Science Today'];
  List<String> _suggestions = [];
  List<String> _recentSearches = [];
  bool _isSearching = false;

  @override
  void initState() {
    super.initState();
    _loadRecentSearches();
    _searchController.addListener(_updateSuggestions);
  }

  Future<void> _loadRecentSearches() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() => _recentSearches = prefs.getStringList('recent_searches') ?? []);
  }

  Future<void> _saveSearchQuery(String query) async {
    final prefs = await SharedPreferences.getInstance();
    final updated = [query, ..._recentSearches.where((q) => q != query)];
    await prefs.setStringList('recent_searches', updated.take(10).toList());
    setState(() => _recentSearches = updated.take(10).toList());
  }

  void _updateSuggestions() {
    final query = _searchController.text.trim().toLowerCase();
    if (query.isEmpty) {
      setState(() => _suggestions = []);
    } else {
      final matches = _dataSet
          .where((entry) => entry.toLowerCase().contains(query))
          .toList();

      matches.sort((a, b) => b.similarityTo(query).compareTo(a.similarityTo(query)));

      setState(() => _suggestions = matches.take(5).toList());
    }
  }

  void _onSelect(String query) async {
    _searchController.text = query;
    await _saveSearchQuery(query);

    if (query.toLowerCase().contains('magazine')) {
      NavigationHelper.goMagazines(context);
    } else if (query.toLowerCase().contains('newspaper') ||
        _dataSet.any((d) => d.toLowerCase() == query.toLowerCase())) {
      NavigationHelper.goNewspaper(context);
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('No match found for "$query"')),
      );
    }
  }

  void _clearQuery() {
    _searchController.clear();
    setState(() => _suggestions.clear());
  }

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final theme = Theme.of(context);

    return Scaffold(
      appBar: AppBar(
        title: Text(loc.searchHint),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => NavigationHelper.goHome(context),
        ),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(children: [
          TextField(
            controller: _searchController,
            textInputAction: TextInputAction.search,
            onSubmitted: _onSelect,
            decoration: InputDecoration(
              hintText: loc.searchHint,
              prefixIcon: const Icon(Icons.search),
              suffixIcon: _searchController.text.isNotEmpty
                  ? IconButton(
                      icon: const Icon(Icons.clear),
                      onPressed: _clearQuery,
                    )
                  : null,
              border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),
            ),
          ),
          const SizedBox(height: 16),
          if (_suggestions.isNotEmpty)
            Expanded(
              child: ListView(
                children: _suggestions.map((s) => ListTile(
                  title: Text(s),
                  onTap: () => _onSelect(s),
                )).toList(),
              ),
            )
          else
            Expanded(
              child: ListView(
                children: [
                  if (_recentSearches.isNotEmpty)
                    Text('Recent Searches', style: theme.textTheme.titleMedium),
                  ..._recentSearches.map((q) => ListTile(
                        leading: const Icon(Icons.history),
                        title: Text(q),
                        onTap: () => _onSelect(q),
                      )),
                ],
              ),
            )
        ]),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/common/gradient_app_bar.dart ===

// lib/widgets/gradient_app_bar.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '/core/theme_provider.dart';

class GradientAppBar extends StatelessWidget implements PreferredSizeWidget {
  final String title;
  final List<Widget>? actions;
  final bool centerTitle;
  final bool automaticallyImplyLeading;

  const GradientAppBar({
    super.key,
    required this.title,
    this.actions,
    this.centerTitle = true,
    this.automaticallyImplyLeading = true, required IconButton leading, required Color iconColor, required IconButton Function(dynamic ctx) leadingBuilder,
  });

  @override
  Widget build(BuildContext context) {
    final mode = context.watch<ThemeProvider>().appThemeMode;

    List<Color> appBarColors;
    switch (mode) {
      case AppThemeMode.bangladesh:
        appBarColors = [const Color(0xFF00796B), const Color(0xFF004D40)];
        break;
      case AppThemeMode.dark:
        appBarColors = [Colors.grey.shade900, Colors.black87];
        break;
      default:
        appBarColors = [Colors.blue.shade400, Colors.blue.shade800];
    }

    return AppBar(
      automaticallyImplyLeading: automaticallyImplyLeading,
      centerTitle: centerTitle,
      elevation: 0,
      backgroundColor: Colors.transparent,
      flexibleSpace: ClipRect(
        child: BackdropFilter(
          filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20),
          child: Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: appBarColors,
              ),
            ),
          ),
        ),
      ),
      title: ShaderMask(
        shaderCallback: (bounds) => LinearGradient(colors: appBarColors).createShader(bounds),
        child: Text(
          title,
          style: const TextStyle(
            color: Colors.white,
            fontWeight: FontWeight.bold,
            fontSize: 24,
          ),
        ),
      ),
      actions: actions,
    );
  }

  @override
  Size get preferredSize => const Size.fromHeight(kToolbarHeight);
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/common/webview_screen.dart ===

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:flutter_inappwebview/flutter_inappwebview.dart';
import 'package:provider/provider.dart';
import 'package:share_plus/share_plus.dart';

import '../../core/utils/favorites_manager.dart';
import '../../data/models/news_article.dart';
import '/l10n/app_localizations.dart';
import '../../core/theme_provider.dart';

enum _TranslateEngine { google, bing, deepl }

extension on _TranslateEngine {
  String get label => switch (this) {
        _TranslateEngine.google => 'Google Translate',
        _TranslateEngine.bing => 'Bing Translator',
        _TranslateEngine.deepl => 'DeepL',
      };
}

class WebViewScreen extends StatefulWidget {
  final String url;
  final String title;

  const WebViewScreen({Key? key, required this.url, this.title = 'Web View'}) : super(key: key);

  @override
  State<WebViewScreen> createState() => _WebViewScreenState();
}

class _WebViewScreenState extends State<WebViewScreen> {
  InAppWebViewController? _ctrl;
  late PullToRefreshController _ptrCtrl;
  double _progress = 0;
  bool _readerMode = false;
  bool _darkMode = false;

  @override
  void initState() {
    super.initState();
    _ptrCtrl = PullToRefreshController(
      options: PullToRefreshOptions(color: Colors.blueAccent),
      onRefresh: () => _ctrl?.reload(),
    );
  }

  @override
  void dispose() {
    _ctrl?.stopLoading();
    super.dispose();
  }

  Future<void> _shareUrl() async {
    final url = await _ctrl?.getUrl();
    if (url != null) Share.share(url.toString());
  }

  Future<void> _bookmarkUrl() async {
    final uri = await _ctrl?.getUrl();
    final title = await _ctrl?.getTitle();
    if (uri != null && title != null) {
      final article = NewsArticle(
        title: title,
        url: uri.toString(),
        publishedAt: DateTime.now(),
        source: Uri.parse(uri.toString()).host,
        description: '',
        imageUrl: null,
        language: 'en',
        snippet: '',
        fullContent: '',
        isLive: false,
      );
      FavoritesManager.instance.toggleArticle(article);
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(AppLocalizations.of(context)!.bookmarkSuccess)),
      );
    }
  }

  Future<void> _toggleReaderMode() async {
    _readerMode = !_readerMode;
    await _ctrl?.evaluateJavascript(source: _readerMode
        ? "document.querySelectorAll('header, footer, nav, aside, .ads, .popup').forEach(e => e.remove()); document.body.style.padding='16px';"
        : "location.reload();");
    setState(() {});
  }

  Future<void> _toggleDarkMode() async {
    _darkMode = !_darkMode;
    await _ctrl?.evaluateJavascript(source: _darkMode
        ? "document.body.style.background='#111';document.body.style.color='#e0e0e0';"
        : "document.body.style.background='';document.body.style.color='';");
    setState(() {});
  }

  Future<void> _translate(_TranslateEngine engine) async {
    final url = await _ctrl?.getUrl();
    if (url == null) return;
    final encoded = Uri.encodeComponent(url.toString());
    final translateUrl = switch (engine) {
      _TranslateEngine.google => 'https://translate.google.com/translate?u=$encoded',
      _TranslateEngine.bing => 'https://www.bing.com/translator?text=$encoded',
      _TranslateEngine.deepl => 'https://www.deepl.com/translator#auto/en/$encoded',
    };
    await _ctrl?.loadUrl(urlRequest: URLRequest(url: WebUri(translateUrl)));
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final prov = context.watch<ThemeProvider>();
    final theme = Theme.of(context);
    final scheme = theme.colorScheme;

    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title, style: theme.textTheme.titleMedium),
        centerTitle: true,
        backgroundColor: scheme.surface.withOpacity(0.7),
        elevation: 0,
        bottom: PreferredSize(
          preferredSize: const Size.fromHeight(3),
          child: LinearProgressIndicator(
            value: _progress < 1 ? _progress : 0,
            backgroundColor: const Color.fromARGB(0, 71, 70, 70),
            color: scheme.secondary,
          ),
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.translate),
            tooltip: 'Translate',
            onPressed: () => _translate(_TranslateEngine.google),
          ),
          IconButton(
            icon: const Icon(Icons.share),
            tooltip: 'Share',
            onPressed: _shareUrl,
          ),
          IconButton(
            icon: const Icon(Icons.bookmark_add),
            tooltip: 'Bookmark',
            onPressed: _bookmarkUrl,
          ),
          PopupMenuButton<String>(
            icon: const Icon(Icons.more_vert),
            tooltip: 'More Options',
            onSelected: (value) {
              if (value == '_toggleReader') _toggleReaderMode();
              if (value == '_toggleDark') _toggleDarkMode();
            },
            itemBuilder: (_) => [
              CheckedPopupMenuItem(
                value: '_toggleReader',
                checked: _readerMode,
                child: const Text('Reader Mode'),
              ),
              CheckedPopupMenuItem(
                value: '_toggleDark',
                checked: _darkMode,
                child: const Text('Dark Mode'),
              ),
            ],
          ),
        ],
      ),
      body: InAppWebView(
        initialUrlRequest: URLRequest(url: WebUri(widget.url)),
        pullToRefreshController: _ptrCtrl,
        initialSettings: InAppWebViewSettings(
          javaScriptEnabled: true,
          domStorageEnabled: true,
          useWideViewPort: true,
          loadWithOverviewMode: true,
          builtInZoomControls: true,
          supportZoom: true,
          displayZoomControls: false,
          cacheEnabled: true,
        ),
        onWebViewCreated: (controller) => _ctrl = controller,
        onLoadStart: (_, __) => setState(() => _progress = 0),
        onProgressChanged: (_, p) => setState(() => _progress = p / 100),
        onLoadStop: (_, __) async {
          await Future.delayed(const Duration(milliseconds: 120));
          _ptrCtrl.endRefreshing();
          setState(() => _progress = 1);
        },
      ),
      bottomNavigationBar: BottomAppBar(
        color: scheme.surface.withOpacity(0.08),
        elevation: 8,
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceAround,
          children: [
            IconButton(icon: const Icon(Icons.arrow_back), onPressed: () => _ctrl?.goBack()),
            IconButton(icon: const Icon(Icons.arrow_forward), onPressed: () => _ctrl?.goForward()),
            IconButton(icon: const Icon(Icons.refresh), onPressed: () => _ctrl?.reload()),
            IconButton(
              icon: const Icon(Icons.home),
              onPressed: () => _ctrl?.loadUrl(urlRequest: URLRequest(url: WebUri(widget.url))),
            ),
          ],
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/common/appBar.dart ===

import 'package:flutter/material.dart';

class AppBarTitle extends StatelessWidget {
  final String title;

  const AppBarTitle(this.title, {super.key});

  @override
  Widget build(BuildContext context) {
    return Text(
      title,
      textAlign: TextAlign.center,
      style: const TextStyle(
        color: Colors.white,
        fontSize: 24,
        fontWeight: FontWeight.w900, // Super Bold
        letterSpacing: 1.2,
        shadows: [
          Shadow(
            offset: Offset(0, 2),
            blurRadius: 6,
            color: Colors.black45,
          ),
          Shadow(
            blurRadius: 12,
            color: Colors.white24,
          ),
        ],
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/magazine/magazine_screen.dart ===

// lib/features/magazine/magazine_screen.dart

import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:provider/provider.dart';
import 'package:go_router/go_router.dart';

import '/core/theme_provider.dart';
import '/core/theme.dart';
import '/core/utils/favorites_manager.dart';
import '/core/app_paths.dart';
import '/l10n/app_localizations.dart';
import '../../widgets/app_drawer.dart';
import '../../widgets/category_chips_bar.dart';
import '../../features/common/appBar.dart';
import 'widgets/animated_background.dart';
import 'widgets/magazine_card.dart';

class MagazineScreen extends StatefulWidget {
  const MagazineScreen({Key? key}) : super(key: key);

  @override
  State<MagazineScreen> createState() => _MagazineScreenState();
}

class _MagazineScreenState extends State<MagazineScreen>
    with SingleTickerProviderStateMixin {
  final List<dynamic> magazines = [];
  bool _isLoading = true;
  late final TabController _tabController;
  final ScrollController _scrollController = ScrollController();
  DateTime? _lastBackPressed;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 9, vsync: this)
      ..addListener(() => setState(() {}));
    _loadMagazines();
  }

  Future<void> _loadMagazines() async {
    setState(() => _isLoading = true);
    try {
      final raw = await rootBundle.loadString('assets/data.json');
      final data = json.decode(raw);
      setState(() {
        magazines
          ..clear()
          ..addAll(data['magazines'] ?? []);
        _isLoading = false;
      });
    } catch (e) {
      setState(() => _isLoading = false);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Load failed: $e')),
      );
    }
  }

  Future<void> _toggleFavorite(dynamic magazine) async {
    await FavoritesManager.instance.toggleMagazine(magazine);
    setState(() {});
  }

  Future<bool> _onWillPop() async {
    final now = DateTime.now();
    if (context.canPop()) {
      context.pop();
      return false;
    }
    if (_lastBackPressed == null ||
        now.difference(_lastBackPressed!) > const Duration(seconds: 2)) {
      _lastBackPressed = now;
      Fluttertoast.showToast(
        msg: "Press back again to exit",
        gravity: ToastGravity.BOTTOM,
      );
      return false;
    }
    return true;
  }

  List<String> _categories(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    return [
      loc.catFashion,
      loc.catScience,
      loc.catFinance,
      loc.catAffairs,
      loc.catTech,
      loc.catArts,
      loc.catLifestyle,
      loc.catSports,
    ];
  }

  List<dynamic> get _filteredMagazines {
    final loc = AppLocalizations.of(context)!;
    final categories = _categories(context);
    final keywords = {
      loc.catFashion: ['fashion', 'style', 'aesthetics'],
      loc.catScience: ['science', 'discovery', 'research'],
      loc.catFinance: ['finance', 'economics', 'business'],
      loc.catAffairs: [
        'global',
        'politics',
        'world',
        'international',
        'defense'
      ],
      loc.catTech: ['technology', 'innovation', 'tech'],
      loc.catArts: ['arts', 'culture', 'humanities', 'literature'],
      loc.catLifestyle: ['lifestyle', 'luxury', 'travel'],
      loc.catSports: ['sports', 'athletics', 'performance'],
    };

    final selected = categories[_tabController.index];
    if (selected == loc.favorites) {
      final favIds = FavoritesManager.instance.favoriteMagazines
          .map((m) => m['id'].toString())
          .toSet();
      return magazines
          .where((m) => favIds.contains(m['id'].toString()))
          .toList();
    }

    final selectedKeywords = keywords[selected] ?? [];
    return magazines.where((m) {
      final tags = List<String>.from(m['tags'] ?? []);
      return tags.any((t) => selectedKeywords.any(
          (kw) => t.toLowerCase().contains(kw.toLowerCase())));
    }).toList();
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final mode = context.watch<ThemeProvider>().appThemeMode;
    final gradientColors = AppGradients.getGradientColors(mode);
    final theme = Theme.of(context);

    return WillPopScope(
      onWillPop: _onWillPop,
      child: Scaffold(
        extendBodyBehindAppBar: true,
        backgroundColor: Colors.transparent,
        drawer: const AppDrawer(),
        body: Stack(
          fit: StackFit.expand,
          children: [
            Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: [
                    gradientColors[0].withOpacity(0.85),
                    gradientColors[1].withOpacity(0.85),
                  ],
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                ),
              ),
            ),
            AnimatedBackground(
              duration: const Duration(seconds: 30),
              child: CustomScrollView(
                slivers: [
                  SliverAppBar(
                    pinned: true,
                    backgroundColor: theme.appBarTheme.backgroundColor,
                    elevation: theme.appBarTheme.elevation,
                    centerTitle: true,
                    title: AppBarTitle(loc.magazines),
                  ),
                  SliverToBoxAdapter(
                    child: ChipsBar(
                      items: _categories(context),
                      selectedIndex: _tabController.index,
                      onTap: (i) => _tabController.animateTo(i),
                      glow: false, // 👈 disable glow
                    ),
                  ),
                  SliverFillRemaining(
                    child: _isLoading
                        ? Center(
                            child: CircularProgressIndicator(
                              valueColor: AlwaysStoppedAnimation(
                                  theme.colorScheme.primary),
                            ),
                          )
                        : _filteredMagazines.isEmpty
                            ? Center(
                                child: Text(
                                  loc.noMagazines,
                                  style: theme.textTheme.bodyLarge,
                                ),
                              )
                            : RefreshIndicator(
                                color: theme.colorScheme.primary,
                                onRefresh: _loadMagazines,
                                child: ListView.builder(
                                  controller: _scrollController,
                                  padding: const EdgeInsets.all(16),
                                  itemCount: _filteredMagazines.length,
                                  itemBuilder: (_, idx) {
                                    final m = _filteredMagazines[idx];
                                    final id = m['id'].toString();
                                    final name = (m['name'] ?? '').toString().toLowerCase();
                                    final isSpecial = name.contains('prothom') || name.contains('daily star');

                                    return Padding(
                                      padding: const EdgeInsets.only(bottom: 16),
                                      child: MagazineCard(
                                        magazine: m,
                                        isFavorite: FavoritesManager.instance.isFavoriteMagazine(id),
                                        onFavoriteToggle: () => _toggleFavorite(m),
                                        highlight: !isSpecial, // 👈 disable highlight for Prothom/Daily Star
                                      ),
                                    );
                                  },
                                ),
                              ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/magazine/widgets/magazine_card.dart ===

// lib/features/magazine/widgets/magazine_card.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';

import '../../../core/theme_provider.dart';

class MagazineCard extends StatelessWidget {
  final Map<String, dynamic> magazine;
  final bool isFavorite;
  final VoidCallback onFavoriteToggle;
  final bool highlight;

  const MagazineCard({
    super.key,
    required this.magazine,
    required this.isFavorite,
    required this.onFavoriteToggle,
    this.highlight = true,
  });

  void _openMagazine(BuildContext context) {
    final url = magazine['contact']?['website'] ?? '';
    final title = magazine['name'] ?? 'Magazine';
    final uri = Uri.tryParse(url);

    if (uri == null || !(uri.hasScheme && (uri.scheme == 'http' || uri.scheme == 'https'))) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Invalid or missing website URL')),
      );
      return;
    }

    context.pushNamed('webview', extra: {'url': url, 'title': title});
  }

  String _getDescription() {
    final desc = (magazine['description'] ?? '').toString().trim();
    if (desc.isNotEmpty) return desc;
    final country = magazine['country'] ?? 'Unknown';
    final language = magazine['language'] ?? 'Unknown';
    return '$country • $language';
  }

  String _getLogoUrl() {
    final website = magazine['contact']?['website'] as String?;
    if (website != null && website.isNotEmpty) {
      try {
        return 'https://logo.clearbit.com/${Uri.parse(website).host}';
      } catch (_) {}
    }
    return '';
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final mode = context.watch<ThemeProvider>().appThemeMode;
    final glowColor = theme.colorScheme.primary.withOpacity(mode == AppThemeMode.dark ? 0.1 : 0.4);

    final logoUrl = _getLogoUrl();
    final name = magazine['name'] ?? 'Unknown Magazine';
    final description = _getDescription();
    final fallbackTxt = (name.length >= 2 ? name.substring(0, 2).toUpperCase() : 'MG');

    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 12, vertical: 10),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(18),
        color: Colors.white.withOpacity(0.08),
        border: Border.all(color: highlight ? glowColor : Colors.transparent, width: 1),
        boxShadow: [], // ← removes glow

      ),
      child: ClipRRect(
        borderRadius: BorderRadius.circular(18),
        child: BackdropFilter(
          filter: ImageFilter.blur(sigmaX: 16, sigmaY: 16),
          child: InkWell(
            borderRadius: BorderRadius.circular(18),
            onTap: () => _openMagazine(context),
            child: Padding(
              padding: const EdgeInsets.all(14),
              child: Row(
                children: [
                  ClipRRect(
                    borderRadius: BorderRadius.circular(12),
                    child: logoUrl.isNotEmpty
                        ? CachedNetworkImage(
                            imageUrl: logoUrl,
                            width: 55,
                            height: 55,
                            fit: BoxFit.cover,
                            placeholder: (_, __) => const SizedBox(
                              width: 20,
                              height: 20,
                              child: CircularProgressIndicator(strokeWidth: 2),
                            ),
                            errorWidget: (_, __, ___) => _fallbackAvatar(fallbackTxt),
                          )
                        : _fallbackAvatar(fallbackTxt),
                  ),
                  const SizedBox(width: 14),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          name,
                          maxLines: 1,
                          overflow: TextOverflow.ellipsis,
                          style: theme.textTheme.titleMedium?.copyWith(
                            fontWeight: FontWeight.bold,
                            color: theme.colorScheme.onSurface,
                          ),
                        ),
                        const SizedBox(height: 6),
                        Text(
                          description,
                          maxLines: 2,
                          overflow: TextOverflow.ellipsis,
                          style: theme.textTheme.bodyMedium?.copyWith(
                            fontWeight: FontWeight.w600,
                            color: theme.textTheme.bodyMedium?.color?.withOpacity(0.85),
                          ),
                        ),
                      ],
                    ),
                  ),
                  IconButton(
                    icon: Icon(
                      isFavorite ? Icons.favorite : Icons.favorite_border,
                      color: isFavorite ? Colors.redAccent : theme.iconTheme.color,
                    ),
                    onPressed: onFavoriteToggle,
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _fallbackAvatar(String text) {
    return Container(
      width: 55,
      height: 55,
      color: Colors.grey[300],
      alignment: Alignment.center,
      child: Text(
        text,
        style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/magazine/widgets/webview_screen.dart ===

// lib/features/common/webview_screen.dart

import 'dart:io';
import 'package:flutter/material.dart';
import 'package:webview_flutter/webview_flutter.dart';
import '../../news/widgets/animated_background.dart';

class WebViewScreen extends StatefulWidget {
  const WebViewScreen({
    required this.url,
    required this.title,
    super.key,
  });

  final String url;
  final String title;

  @override
  State<WebViewScreen> createState() => _WebViewScreenState();
}

class _WebViewScreenState extends State<WebViewScreen> {
  late final WebViewController _controller;
  bool _isLoading = true;
  int _progress = 0;

  @override
  void initState() {
    super.initState();

    // Initialize the WebView controller
    _controller = WebViewController()
      ..setJavaScriptMode(JavaScriptMode.unrestricted)
      ..setBackgroundColor(Colors.transparent)
      ..setNavigationDelegate(
        NavigationDelegate(
          onNavigationRequest: (NavigationRequest request) {
            final uri = Uri.tryParse(request.url);
            // Enforce HTTPS
            if (uri == null || uri.scheme != 'https') {
              return NavigationDecision.prevent;
            }
            return NavigationDecision.navigate;
          },
          onProgress: (progress) => setState(() {
            _progress = progress;
          }),
          onPageStarted: (_) => setState(() => _isLoading = true),
          onPageFinished: (_) async {
            setState(() => _isLoading = false);
            // Inject viewport meta and custom CSS for magazine layout
            const css = '''
              body { margin: 0; padding: 16px; font-family: -apple-system, BlinkMacSystemFont, sans-serif; line-height: 1.6; }
              img { max-width: 100% !important; height: auto !important; display: block; margin: 8px auto; }
              header, footer, nav, .sidebar, .ads { display: none !important; }
              article { max-width: 600px; margin: auto; }
            ''';
            final script = '''
              (function() {
                if (!document.querySelector('meta[name="viewport"]')) {
                  var meta = document.createElement('meta');
                  meta.name = 'viewport';
                  meta.content = 'width=device-width, initial-scale=1.0';
                  document.head.appendChild(meta);
                }
                var style = document.createElement('style');
                style.textContent = ${css.replaceAll("'", "\\'")};
                document.head.appendChild(style);
              })();
            ''';
            await _controller.runJavaScript(script);
          },
          onWebResourceError: (error) => ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Failed to load: \${error.description}')),
          ),
        ),
      )
      ..loadRequest(Uri.parse(widget.url));
  }

  Future<void> _refresh() async {
    await _controller.reload();
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: AppBar(
        elevation: 0,
        backgroundColor: theme.colorScheme.primary.withOpacity(0.95),
        centerTitle: true,
        title: Text(
          widget.title,
          style: theme.textTheme.titleLarge?.copyWith(
            color: Colors.white,
            fontWeight: FontWeight.w800,
          ),
          overflow: TextOverflow.ellipsis,
        ),
        bottom: PreferredSize(
          preferredSize: const Size.fromHeight(4.0),
          child: _isLoading
              ? LinearProgressIndicator(
                  value: _progress / 100.0,
                  backgroundColor: Colors.white24,
                  valueColor: const AlwaysStoppedAnimation<Color>(Colors.white),
                )
              : const SizedBox.shrink(),
        ),
      ),
      body: AnimatedBackground(
        child: RefreshIndicator(
          onRefresh: _refresh,
          child: ClipRRect(
            borderRadius: const BorderRadius.vertical(top: Radius.circular(24)),
            child: WebViewWidget(controller: _controller),
          ),
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/magazine/widgets/animated_background.dart ===

// lib/features/news/widgets/animated_background.dart

import 'package:flutter/material.dart';

/// A no-op wrapper that renders only its child.
/// Kept the original constructor signature for compatibility.
class AnimatedBackground extends StatelessWidget {
  /// Previously used for animation timing (now unused).
  final Duration duration;

  /// The content rendered on top.
  final Widget? child;

  const AnimatedBackground({
    Key? key,
    this.duration = const Duration(seconds: 20),
    this.child,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return child ?? const SizedBox.shrink();
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/profile/signup_screen.dart ===

// lib/features/auth/signup_screen.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';
import '../../../core/theme_provider.dart';
import '../../../features/profile/auth_service.dart';
import '/l10n/app_localizations.dart';

class SignupScreen extends StatefulWidget {
  const SignupScreen({super.key});

  @override
  State<SignupScreen> createState() => _SignupScreenState();
}

class _SignupScreenState extends State<SignupScreen> {
  final _nameCtl = TextEditingController();
  final _emailCtl = TextEditingController();
  final _passCtl = TextEditingController();
  String? _error;
  bool _loading = false;

  @override
  void dispose() {
    _nameCtl.dispose();
    _emailCtl.dispose();
    _passCtl.dispose();
    super.dispose();
  }

  Future<void> _signup() async {
    setState(() => _loading = true);
    final msg = await AuthService().signUp(
      _nameCtl.text.trim(),
      _emailCtl.text.trim(),
      _passCtl.text.trim(),
    );
    setState(() => _loading = false);
    if (msg != null) {
      setState(() => _error = msg);
    } else {
      context.go('/home');
    }
  }

  Future<void> _signupWithGoogle() async {
    setState(() => _loading = true);
    final result = await AuthService().signInWithGoogle();
    setState(() => _loading = false);
    if (result != null) {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(result)));
    } else {
      context.go('/home');
    }
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final mode = context.watch<ThemeProvider>().appThemeMode;
    final textColor = Theme.of(context).textTheme.bodyLarge?.color ?? Colors.white;

    return Scaffold(
      extendBodyBehindAppBar: true,
      backgroundColor: Colors.transparent,
      body: Stack(
        fit: StackFit.expand,
        children: [
          _buildBackground(mode),
          Container(color: _glassTint(mode)),
          SafeArea(
            child: SingleChildScrollView(
              padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 80),
              child: ClipRRect(
                borderRadius: BorderRadius.circular(24),
                child: BackdropFilter(
                  filter: ImageFilter.blur(sigmaX: 16, sigmaY: 16),
                  child: Container(
                    padding: const EdgeInsets.all(24),
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(24),
                      border: Border.all(color: Colors.white30, width: 1),
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.stretch,
                      children: [
                        Text(
                          loc.signup,
                          textAlign: TextAlign.center,
                          style: TextStyle(
                            fontSize: 28,
                            fontWeight: FontWeight.bold,
                            color: textColor,
                          ),
                        ),
                        const SizedBox(height: 24),

                        if (_error != null) ...[
                          Text(
                            _mapError(loc, _error!),
                            style: const TextStyle(color: Colors.redAccent),
                            textAlign: TextAlign.center,
                          ),
                          const SizedBox(height: 16),
                        ],

                        _glassField(loc.fullName, controller: _nameCtl, textColor: textColor),
                        const SizedBox(height: 12),
                        _glassField(loc.email, controller: _emailCtl, textColor: textColor),
                        const SizedBox(height: 12),
                        _glassField(
                          loc.password,
                          controller: _passCtl,
                          obscure: true,
                          textColor: textColor,
                        ),
                        const SizedBox(height: 24),

                        ElevatedButton(
                          onPressed: _loading ? null : _signup,
                          style: ElevatedButton.styleFrom(
                            minimumSize: const Size.fromHeight(50),
                            backgroundColor: Colors.white.withOpacity(0.2),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                          ),
                          child: _loading
                              ? const CircularProgressIndicator(color: Colors.white)
                              : Text(
                                  loc.signup,
                                  style: TextStyle(
                                      color: textColor, fontWeight: FontWeight.bold),
                                ),
                        ),
                        const SizedBox(height: 12),

                        ElevatedButton.icon(
                          icon: Image.asset('assets/google_logo.png', height: 24),
                          label: Text(
                            loc.continueWithGoogle,
                            style: TextStyle(color: textColor),
                          ),
                          onPressed: _loading ? null : _signupWithGoogle,
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.white.withOpacity(0.2),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                            minimumSize: const Size.fromHeight(50),
                          ),
                        ),
                        const SizedBox(height: 12),

                        TextButton(
                          onPressed: () => context.go('/login'),
                          child: Text(
                            loc.alreadyHaveAccount,
                            style: TextStyle(color: textColor),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  String _mapError(AppLocalizations loc, String msg) {
    switch (msg) {
      case 'Invalid email or password.':
        return loc.invalidCredentials;
      case 'No account found. Please sign up first.':
        return loc.noAccountFound;
      case 'Account already exists. Please log in.':
        return loc.accountExists;
      default:
        return msg;
    }
  }

  Widget _buildBackground(AppThemeMode mode) {
    switch (mode) {
      case AppThemeMode.dark:
        return Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [Color(0xFF1C1F22), Color(0xFF121417)],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
          ),
        );
      case AppThemeMode.light:
        return Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [Color(0xFFB0B0B0), Color(0xFFD0D0D0)],
              begin: Alignment.topCenter,
              end: Alignment.bottomCenter,
            ),
            boxShadow: [
              BoxShadow(color: Colors.white70, offset: Offset(-4, -4), blurRadius: 6),
              BoxShadow(color: Colors.black26, offset: Offset(4, 4), blurRadius: 6),
            ],
          ),
        );
      case AppThemeMode.bangladesh:
      default:
        return Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [Color(0xFF8FA49D), Color(0xFF6E7B75)],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
            boxShadow: [
              BoxShadow(color: Colors.black38, offset: Offset(2, 2), blurRadius: 8),
            ],
          ),
        );
    }
  }

  Color _glassTint(AppThemeMode mode) {
    switch (mode) {
      case AppThemeMode.dark:
        return const Color(0xFF1C1F26).withOpacity(0.1);
      case AppThemeMode.light:
        return Colors.white.withOpacity(0.1);
      case AppThemeMode.bangladesh:
      default:
        return const Color(0xFF6E7B75).withOpacity(0.15);
    }
  }

  Widget _glassField(
    String label, {
    required TextEditingController controller,
    bool obscure = false,
    required Color textColor,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.2),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.white.withOpacity(0.5)),
      ),
      child: TextField(
        controller: controller,
        obscureText: obscure,
        style: TextStyle(color: textColor),
        decoration: InputDecoration(
          labelText: label,
          labelStyle: TextStyle(color: textColor.withOpacity(0.7)),
          border: InputBorder.none,
          contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 14),
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/profile/profile_screen.dart ===

// lib/features/profile/profile_screen.dart

import 'dart:io';
import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:provider/provider.dart';
import 'package:image_picker/image_picker.dart';
import '../../core/theme.dart';
import '../../core/theme_provider.dart';
import '/l10n/app_localizations.dart';
import 'auth_service.dart';
import '../../widgets/app_drawer.dart';

class ProfileScreen extends StatefulWidget {
  const ProfileScreen({Key? key}) : super(key: key);

  @override
  State<ProfileScreen> createState() => _ProfileScreenState();
}

class _ProfileScreenState extends State<ProfileScreen> {
  final _formKey = GlobalKey<FormState>();
  late Map<String, dynamic> _profile;
  bool _isEditing = false;
  bool _isSaving = false;
  String? _imagePath;
  final _nameController = TextEditingController();
  final _emailController = TextEditingController();
  final _phoneController = TextEditingController();
  final _roleController = TextEditingController();
  final _departmentController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _loadProfile();
  }

  Future<void> _loadProfile() async {
    final data = await AuthService().getProfile();
    setState(() {
      _profile = data;
      _nameController.text = data['name'] ?? '';
      _emailController.text = data['email'] ?? '';
      _phoneController.text = data['phone'] ?? '';
      _roleController.text = data['role'] ?? '';
      _departmentController.text = data['department'] ?? '';
      _imagePath = data['image'];
    });
  }

  Future<void> _toggleEdit() async {
    if (_isEditing) {
      if (_formKey.currentState!.validate()) {
        setState(() => _isSaving = true);
        await AuthService().updateProfile(
          name: _nameController.text.trim(),
          email: _emailController.text.trim(),
          phone: _phoneController.text.trim(),
          role: _roleController.text.trim(),
          department: _departmentController.text.trim(),
          imagePath: _imagePath ?? '',
        );
        await _loadProfile();
      }
    }
    setState(() {
      _isEditing = !_isEditing;
      _isSaving = false;
    });
  }

  Future<void> _pickImage() async {
    final picked = await ImagePicker().pickImage(source: ImageSource.gallery);
    if (picked != null) {
      setState(() => _imagePath = picked.path);
    }
  }

  String? validateEmail(String? value) {
    if (value == null || value.isEmpty) return 'Enter email';
    if (!RegExp(r'^[\w\-.]+@([\w\-]+\.)+[\w\-]{2,4}$')
        .hasMatch(value)) {
      return 'Invalid email format';
    }
    return null;
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final currentUser = FirebaseAuth.instance.currentUser;
    if (currentUser == null) {
      Future.microtask(() => context.go('/login'));
      return const SizedBox.shrink();
    }

    final theme = Theme.of(context);
    final brightness = theme.brightness;
    final mode = context.watch<ThemeProvider>().appThemeMode;
    final isDark = brightness == Brightness.dark;

    final gradientColors = AppGradients.getGradientColors(mode);
    final startColor = gradientColors[0];
    final endColor = gradientColors[1];

    const double bgOpacity = 0.85;
    final overlayOpacity = isDark ? 0.6 : 0.0;

    final inputTextStyle = TextStyle(
      fontWeight: FontWeight.bold,
      color: isDark ? Colors.white : Colors.black,
    );

    return Scaffold(
      extendBodyBehindAppBar: true,
      drawer: const AppDrawer(),
      backgroundColor: Colors.transparent,
      appBar: AppBar(
        title: Text(
          loc.profile,
          style: TextStyle(
            color: isDark ? Colors.white : Colors.black,
            fontWeight: FontWeight.bold,
          ),
        ),
        backgroundColor: Colors.transparent,
        elevation: 0,
        centerTitle: true,
        leading: Builder(
          builder: (context) => IconButton(
            icon: Icon(Icons.menu, color: isDark ? Colors.white : Colors.black),
            onPressed: () => Scaffold.of(context).openDrawer(),
          ),
        ),
        actions: [
          IconButton(
            icon:
                Icon(Icons.arrow_back, color: isDark ? Colors.white : Colors.black),
            tooltip: loc.home,
            onPressed: () => context.go('/home'),
          ),
        ],
      ),
      body: Stack(
        children: [
          Positioned.fill(
            child: Image.asset('assets/theme/setImage.webp', fit: BoxFit.cover),
          ),
          Positioned.fill(
            child: Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: [
                    startColor.withOpacity(bgOpacity),
                    endColor.withOpacity(bgOpacity),
                  ],
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                ),
              ),
            ),
          ),
          if (overlayOpacity > 0)
            Container(color: Colors.black.withOpacity(overlayOpacity)),
          SafeArea(
            child: Form(
              key: _formKey,
              child: ListView(
                padding: const EdgeInsets.all(24),
                children: [
                  const SizedBox(height: 24),
                  _buildProfileHeader(isDark),
                  const SizedBox(height: 32),
                  _isEditing
                      ? _buildEditForm(inputTextStyle)
                      : _buildProfileDetails(isDark),
                  const SizedBox(height: 24),
                  _buildEditButton(isDark, loc),
                ],
              ),
            ),
          ),
        ],
      ),
      floatingActionButton: FloatingActionButton.extended(
        onPressed: () async {
          await FirebaseAuth.instance.signOut();
          context.go('/login');
        },
        icon: Icon(Icons.logout, color: isDark ? Colors.white : Colors.black),
        label: Text(
          loc.logout,
          style: TextStyle(color: isDark ? Colors.white : Colors.black),
        ),
        backgroundColor:
            theme.colorScheme.primary.withOpacity(0.15),
      ),
    );
  }

  Widget _buildProfileHeader(bool isDark) {
    return ClipRRect(
      borderRadius: BorderRadius.circular(20),
      child: BackdropFilter(
        filter: ImageFilter.blur(sigmaX: 12, sigmaY: 12),
        child: Container(
          padding: const EdgeInsets.all(20),
          decoration: BoxDecoration(
            color: Colors.white.withOpacity(0.08),
            borderRadius: BorderRadius.circular(20),
          ),
          child: Column(
            children: [
              GestureDetector(
                onTap: _isEditing ? _pickImage : null,
                child: CircleAvatar(
                  radius: 48,
                  backgroundColor: Colors.white.withOpacity(0.2),
                  backgroundImage: _getProfileImage(),
                  child: _imagePath == null
                      ? Icon(
                          Icons.person,
                          size: 48,
                          color: isDark ? Colors.white70 : Colors.black54,
                        )
                      : null,
                ),
              ),
              const SizedBox(height: 16),
              _isEditing
                  ? TextFormField(
                      controller: _nameController,
                      style: TextStyle(
                        fontSize: 20,
                        fontWeight: FontWeight.bold,
                        color: isDark ? Colors.white : Colors.black,
                      ),
                      textAlign: TextAlign.center,
                      decoration: const InputDecoration(
                        border: InputBorder.none,
                        contentPadding: EdgeInsets.zero,
                      ),
                    )
                  : Text(
                      _nameController.text,
                      style: TextStyle(
                        fontSize: 20,
                        fontWeight: FontWeight.bold,
                        color: isDark ? Colors.white : Colors.black,
                      ),
                    ),
            ],
          ),
        ),
      ),
    );
  }

  ImageProvider? _getProfileImage() {
    if (_imagePath != null && File(_imagePath!).existsSync()) {
      return FileImage(File(_imagePath!));
    }
    return FirebaseAuth.instance.currentUser?.photoURL != null
        ? NetworkImage(FirebaseAuth.instance.currentUser!.photoURL!)
        : null;
  }

  Widget _buildProfileDetails(bool isDark) {
    return Column(
      children: [
        _buildDetailRow('Email', _emailController.text, isDark),
        _buildDetailRow('Phone', _phoneController.text, isDark),
        _buildDetailRow('Role', _roleController.text, isDark),
        _buildDetailRow('Department', _departmentController.text, isDark),
      ],
    );
  }

  Widget _buildEditForm(TextStyle inputTextStyle) {
    return Column(
      children: [
        _buildEditableField(
          'Email',
          _emailController,
          validateEmail,
          inputTextStyle,
        ),
        _buildEditableField(
          'Phone',
          _phoneController,
          null,
          inputTextStyle,
        ),
        _buildEditableField(
          'Role',
          _roleController,
          null,
          inputTextStyle,
        ),
        _buildEditableField(
          'Department',
          _departmentController,
          null,
          inputTextStyle,
        ),
      ],
    );
  }

  Widget _buildEditButton(bool isDark, AppLocalizations loc) {
    return ElevatedButton.icon(
      icon: _isSaving
          ? const SizedBox(
              width: 24,
              height: 24,
              child: CircularProgressIndicator(strokeWidth: 3),
            )
          : Icon(
              _isEditing ? Icons.save : Icons.edit,
              color: isDark ? Colors.white : Colors.black,
            ),
      label: Text(
        _isEditing ? loc.save : loc.editProfile,
        style: TextStyle(
          fontSize: 16,
          fontWeight: FontWeight.bold,
          color: isDark ? Colors.white : Colors.black,
        ),
      ),
      onPressed: _isSaving ? null : _toggleEdit,
      style: ElevatedButton.styleFrom(
        backgroundColor:
            isDark ? Colors.white.withOpacity(0.1) : Colors.black.withOpacity(0.05),
        padding: const EdgeInsets.symmetric(vertical: 16),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(12),
          side: BorderSide(
            color: isDark ? Colors.white24 : Colors.black12,
          ),
        ),
      ),
    );
  }

  Widget _buildDetailRow(String label, String value, bool isDark) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: Row(
        children: [
          Icon(
            Icons.circle,
            size: 8,
            color: isDark ? Colors.white54 : Colors.black54,
          ),
          const SizedBox(width: 8),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  label,
                  style: TextStyle(
                    color: isDark ? Colors.white : Colors.black,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 2),
                Text(
                  value,
                  style: TextStyle(
                    color: isDark ? Colors.white70 : Colors.black54,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildEditableField(
    String label,
    TextEditingController controller,
    String? Function(String?)? validator,
    TextStyle textStyle,
  ) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: TextFormField(
        controller: controller,
        style: textStyle,
        decoration: InputDecoration(
          labelText: label,
          labelStyle:
              textStyle.copyWith(fontWeight: FontWeight.normal),
          enabledBorder: UnderlineInputBorder(
            borderSide:
                BorderSide(color: textStyle.color!.withOpacity(0.5)),
          ),
        ),
        validator: validator,
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/profile/auth_service.dart ===


import 'package:firebase_auth/firebase_auth.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:google_sign_in/google_sign_in.dart';

class AuthService {
  static final AuthService _instance = AuthService._internal();
  factory AuthService() => _instance;
  AuthService._internal();

  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  User? get currentUser => _auth.currentUser;

  bool get isLoggedIn => _auth.currentUser != null;

  Future<String?> signUp(String name, String email, String password) async {
    try {
      final userCredential = await _auth.createUserWithEmailAndPassword(
        email: email.trim(),
        password: password,
      );
      final uid = userCredential.user!.uid;

      await _firestore.collection('users').doc(uid).set({
        'name': name,
        'email': email,
        'phone': '',
        'role': '',
        'department': '',
        'image': '',
      });

      await _cacheProfile(name: name, email: email);
      return null;
    } on FirebaseAuthException catch (e) {
      return e.message;
    }
  }

  Future<String?> login(String email, String password) async {
    try {
      final userCredential = await _auth.signInWithEmailAndPassword(
        email: email.trim(),
        password: password,
      );

      final uid = userCredential.user!.uid;
      final doc = await _firestore.collection('users').doc(uid).get();
      if (doc.exists) {
        await _cacheProfileMap(doc.data()!);
      }
      return null;
    } on FirebaseAuthException catch (e) {
      return e.message;
    }
  }

  Future<String?> signInWithGoogle() async {
    try {
      final googleUser = await GoogleSignIn().signIn();
      if (googleUser == null) return 'Google sign-in cancelled.';

      final googleAuth = await googleUser.authentication;
      final credential = GoogleAuthProvider.credential(
        accessToken: googleAuth.accessToken,
        idToken: googleAuth.idToken,
      );

      final userCredential = await _auth.signInWithCredential(credential);
      final user = userCredential.user!;

      final doc = await _firestore.collection('users').doc(user.uid).get();
      if (!doc.exists) {
        await _firestore.collection('users').doc(user.uid).set({
          'name': user.displayName ?? 'User',
          'email': user.email ?? '',
          'phone': '',
          'role': '',
          'department': '',
          'image': user.photoURL ?? '',
        });
      }

      await _cacheProfile(
        name: user.displayName ?? 'User',
        email: user.email ?? '',
        imagePath: user.photoURL ?? '',
      );

      return null;
    } catch (e) {
      return 'Google Sign-in error: ${e.toString()}';
    }
  }

  Future<void> logout() async {
    await _auth.signOut();
    await GoogleSignIn().signOut();
    final prefs = await SharedPreferences.getInstance();
    await prefs.clear();
  }

  Future<Map<String, String>> getProfile() async {
    final prefs = await SharedPreferences.getInstance();
    return {
      'name': prefs.getString('user_name') ?? '',
      'email': prefs.getString('user_email') ?? '',
      'phone': prefs.getString('user_phone') ?? '',
      'role': prefs.getString('user_role') ?? '',
      'department': prefs.getString('user_department') ?? '',
      'image': prefs.getString('user_image') ?? '',
    };
  }

  Future<void> updateProfile({
    required String name,
    required String email,
    String phone = '',
    String role = '',
    String department = '',
    String imagePath = '',
  }) async {
    final uid = _auth.currentUser?.uid;
    if (uid != null) {
      await _firestore.collection('users').doc(uid).update({
        'name': name,
        'email': email,
        'phone': phone,
        'role': role,
        'department': department,
        'image': imagePath,
      });
    }

    await _cacheProfile(
      name: name,
      email: email,
      phone: phone,
      role: role,
      department: department,
      imagePath: imagePath,
    );
  }

  Future<void> _cacheProfile({
    required String name,
    required String email,
    String phone = '',
    String role = '',
    String department = '',
    String imagePath = '',
  }) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('user_name', name);
    await prefs.setString('user_email', email);
    await prefs.setString('user_phone', phone);
    await prefs.setString('user_role', role);
    await prefs.setString('user_department', department);
    await prefs.setString('user_image', imagePath);
    await prefs.setBool('isLoggedIn', true);
  }

  Future<void> _cacheProfileMap(Map<String, dynamic> data) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('user_name', data['name'] ?? '');
    await prefs.setString('user_email', data['email'] ?? '');
    await prefs.setString('user_phone', data['phone'] ?? '');
    await prefs.setString('user_role', data['role'] ?? '');
    await prefs.setString('user_department', data['department'] ?? '');
    await prefs.setString('user_image', data['image'] ?? '');
    await prefs.setBool('isLoggedIn', true);
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/profile/login_screen.dart ===

// lib/features/auth/login_screen.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';

import '../../../core/theme_provider.dart';
import '../../../features/profile/auth_service.dart';
import '/l10n/app_localizations.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final TextEditingController _emailCtl = TextEditingController();
  final TextEditingController _passCtl = TextEditingController();
  String? _error;
  bool _loading = false;

  @override
  void dispose() {
    _emailCtl.dispose();
    _passCtl.dispose();
    super.dispose();
  }

  Future<void> _login() async {
    setState(() => _loading = true);
    final msg = await AuthService().login(
      _emailCtl.text.trim(),
      _passCtl.text.trim(),
    );
    setState(() => _loading = false);
    if (msg != null) {
      setState(() => _error = msg);
    } else {
      if (!mounted) return;
      context.go('/home');
    }
  }

  Future<void> _loginWithGoogle() async {
    setState(() => _loading = true);
    final result = await AuthService().signInWithGoogle();
    setState(() => _loading = false);
    if (!mounted) return;
    if (result != null) {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(result)));
    } else {
      context.go('/home');
    }
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final mode = context.watch<ThemeProvider>().appThemeMode;
    final textColor = Theme.of(context).textTheme.bodyLarge?.color ?? Colors.white;

    return Scaffold(
      extendBodyBehindAppBar: true,
      backgroundColor: Colors.transparent,
      body: Stack(
        fit: StackFit.expand,
        children: [
          _buildBackground(mode),
          Container(color: _glassTint(mode)),
          SafeArea(
            child: SingleChildScrollView(
              padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 80),
              child: ClipRRect(
                borderRadius: BorderRadius.circular(24),
                child: BackdropFilter(
                  filter: ImageFilter.blur(sigmaX: 16, sigmaY: 16),
                  child: Container(
                    padding: const EdgeInsets.all(24),
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(24),
                      border: Border.all(color: Colors.white30, width: 1),
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.stretch,
                      children: [
                        Text(
                          loc.login,
                          textAlign: TextAlign.center,
                          style: TextStyle(
                              fontSize: 28,
                              fontWeight: FontWeight.bold,
                              color: textColor),
                        ),
                        const SizedBox(height: 24),

                        if (_error != null) ...[
                          Text(
                            _mapError(loc, _error!),
                            style: const TextStyle(color: Colors.redAccent),
                            textAlign: TextAlign.center,
                          ),
                          const SizedBox(height: 16),
                        ],

                        _glassField(
                          loc.email,
                          controller: _emailCtl,
                          textColor: textColor,
                        ),
                        const SizedBox(height: 12),
                        _glassField(
                          loc.password,
                          controller: _passCtl,
                          obscure: true,
                          textColor: textColor,
                        ),
                        const SizedBox(height: 24),

                        ElevatedButton(
                          onPressed: _loading ? null : _login,
                          style: ElevatedButton.styleFrom(
                            minimumSize: const Size.fromHeight(50),
                            backgroundColor: Colors.white.withOpacity(0.2),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                          ),
                          child: _loading
                              ? const CircularProgressIndicator(color: Colors.white)
                              : Text(
                                  loc.login,
                                  style: TextStyle(
                                    color: textColor,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                        ),
                        const SizedBox(height: 12),

                        ElevatedButton.icon(
                          icon: Image.asset('assets/google_logo.png', height: 24),
                          label: Text(
                            loc.continueWithGoogle,
                            style: TextStyle(color: textColor),
                          ),
                          onPressed: _loading ? null : _loginWithGoogle,
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.white.withOpacity(0.2),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                            minimumSize: const Size.fromHeight(50),
                          ),
                        ),
                        const SizedBox(height: 12),

                        TextButton(
                          onPressed: () => context.go('/signup'),
                          child: Text(
                            loc.createAccount,
                            style: TextStyle(color: textColor),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  String _mapError(AppLocalizations loc, String msg) {
    switch (msg) {
      case 'Invalid email or password.':
        return loc.invalidCredentials;
      case 'No account found. Please sign up first.':
        return loc.noAccountFound;
      case 'Account already exists. Please log in.':
        return loc.accountExists;
      default:
        return msg;
    }
  }

  Widget _buildBackground(AppThemeMode mode) {
    switch (mode) {
      case AppThemeMode.dark:
        return Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [Color(0xFF1C1F22), Color(0xFF121417)],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
          ),
        );
      case AppThemeMode.light:
        return Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [Color(0xFFB0B0B0), Color(0xFFD0D0D0)],
              begin: Alignment.topCenter,
              end: Alignment.bottomCenter,
            ),
            boxShadow: [
              BoxShadow(color: Colors.white70, offset: Offset(-4, -4), blurRadius: 6),
              BoxShadow(color: Colors.black26, offset: Offset(4, 4), blurRadius: 6),
            ],
          ),
        );
      case AppThemeMode.bangladesh:
      default:
        return Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [Color(0xFF8FA49D), Color(0xFF6E7B75)],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
            boxShadow: [
              BoxShadow(color: Colors.black38, offset: Offset(2, 2), blurRadius: 8),
            ],
          ),
        );
    }
  }

  Color _glassTint(AppThemeMode mode) {
    switch (mode) {
      case AppThemeMode.dark:
        return const Color(0xFF1C1F26).withOpacity(0.1);
      case AppThemeMode.light:
        return Colors.white.withOpacity(0.1);
      case AppThemeMode.bangladesh:
      default:
        return const Color(0xFF6E7B75).withOpacity(0.15);
    }
  }

  Widget _glassField(
    String label, {
    required TextEditingController controller,
    bool obscure = false,
    required Color textColor,
  }) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.2),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.white.withOpacity(0.5)),
      ),
      child: TextField(
        controller: controller,
        obscureText: obscure,
        style: TextStyle(color: textColor),
        decoration: InputDecoration(
          labelText: label,
          labelStyle: TextStyle(color: textColor.withOpacity(0.7)),
          border: InputBorder.none,
          contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 14),
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/profile/forgot_password_screen.dart ===

import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '/l10n/app_localizations.dart';

class ForgotPasswordScreen extends StatefulWidget {
  const ForgotPasswordScreen({super.key});

  @override
  State<ForgotPasswordScreen> createState() => _ForgotPasswordScreenState();
}

class _ForgotPasswordScreenState extends State<ForgotPasswordScreen> {
  final TextEditingController emailController = TextEditingController();
  String? message;

  Future<void> _resetPassword() async {
    final loc = AppLocalizations.of(context)!;
    try {
      await FirebaseAuth.instance
          .sendPasswordResetEmail(email: emailController.text.trim());
      setState(() => message = loc.resetEmailSent);
    } on FirebaseAuthException catch (e) {
      setState(() => message = e.message);
    }
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;

    return Scaffold(
      appBar: AppBar(
        title: Text(loc.forgotPassword),
        centerTitle: true,
      ),
      body: Padding(
        padding: const EdgeInsets.all(24),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Text(loc.enterEmailReset),
            const SizedBox(height: 12),
            TextField(
              controller: emailController,
              keyboardType: TextInputType.emailAddress,
              decoration: InputDecoration(
                labelText: loc.email,
                border: const OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: _resetPassword,
              child: Text(loc.sendResetLink),
            ),
            if (message != null) ...[
              const SizedBox(height: 20),
              Text(
                message!,
                style: TextStyle(
                  color: message!.contains('sent') ? Colors.green : Colors.red,
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/profile/edit_profile_screen.dart ===

/* lib/features/profile/edit_profile_screen.dart

import 'dart:io';
import 'dart:ui';
import '../../core/theme.dart'; 
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:provider/provider.dart';
import 'package:go_router/go_router.dart';

import '../../core/theme_provider.dart';
import '/l10n/app_localizations.dart';
import 'auth_service.dart';

class EditProfileScreen extends StatefulWidget {
  const EditProfileScreen({super.key});

  @override
  State<EditProfileScreen> createState() => _EditProfileScreenState();
}

class _EditProfileScreenState extends State<EditProfileScreen> {
  final _formKey = GlobalKey<FormState>();
  final _nameController       = TextEditingController();
  final _emailController      = TextEditingController();
  final _phoneController      = TextEditingController();
  final _roleController       = TextEditingController();
  final _departmentController = TextEditingController();

  String? _imagePath;
  bool _isSaving = false;

  @override
  void initState() {
    super.initState();
    _loadProfile();
  }

  Future<void> _loadProfile() async {
    final profile = await AuthService().getProfile();
    if (!mounted) return;
    setState(() {
      _nameController.text       = profile['name']       ?? '';
      _emailController.text      = profile['email']      ?? '';
      _phoneController.text      = profile['phone']      ?? '';
      _roleController.text       = profile['role']       ?? '';
      _departmentController.text = profile['department'] ?? '';
      _imagePath                 = profile['image'];
    });
  }

  Future<void> _pickImage() async {
    final picked = await ImagePicker().pickImage(source: ImageSource.gallery);
    if (picked != null) {
      setState(() => _imagePath = picked.path);
    }
  }

  Future<void> _saveProfile() async {
    if (!_formKey.currentState!.validate()) return;
    setState(() => _isSaving = true);

    await AuthService().updateProfile(
      name:        _nameController.text.trim(),
      email:       _emailController.text.trim(),
      phone:       _phoneController.text.trim(),
      role:        _roleController.text.trim(),
      department:  _departmentController.text.trim(),
      imagePath:   _imagePath ?? '',
    );

    if (mounted) {
      context.pop(true);
    }
  }

  @override
  Widget build(BuildContext context) {
    final loc        = AppLocalizations.of(context)!;
    final themeProv  = context.watch<ThemeProvider>();
    final theme      = Theme.of(context);
    final isDark     = theme.brightness == Brightness.dark;

    final gradientColors = AppGradients.getGradientColors(themeProv.appThemeMode);
final startColor = gradientColors[0];
final endColor = gradientColors[1];

    const double bgOpacity = 0.85;

    return Scaffold(
      extendBodyBehindAppBar: true,
      backgroundColor: Colors.transparent,
      appBar: AppBar(
        title: Text(loc.editProfile),
        centerTitle: true,
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => context.pop(),
        ),
        flexibleSpace: ClipRect(
          child: BackdropFilter(
            filter: ImageFilter.blur(sigmaX: 16, sigmaY: 16),
            child: const SizedBox.expand(),
          ),
        ),
      ),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [
                  startColor.withOpacity(bgOpacity),
                  endColor.withOpacity(bgOpacity),
                ],
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
              ),
            ),
          ),
          SafeArea(
            child: SingleChildScrollView(
              padding: const EdgeInsets.fromLTRB(16, 100, 16, 24),
              child: Form(
                key: _formKey,
                child: Column(
                  children: [
                    GestureDetector(
                      onTap: _pickImage,
                      child: ClipOval(
                        child: Container(
                          color: theme.colorScheme.surface.withOpacity(0.2),
                          padding: const EdgeInsets.all(4),
                          child: CircleAvatar(
                            radius: 50,
                            backgroundImage: (_imagePath != null && File(_imagePath!).existsSync())
                                ? FileImage(File(_imagePath!))
                                : const AssetImage('assets/default_avatar.png') as ImageProvider,
                            child: (_imagePath == null)
                                ? Icon(Icons.camera_alt,
                                    size: 32,
                                    color: isDark ? Colors.white70 : Colors.black54)
                                : null,
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(height: 32),
                    _themedField(context,
                        controller: _nameController,
                        label: loc.name,
                        validator: (v) => v!.isEmpty ? loc.enterName : null),
                    _themedField(context,
                        controller: _emailController,
                        label: loc.email,
                        validator: (v) {
                          if (v == null || v.isEmpty) return loc.enterEmail;
                          final emailRegex = RegExp(r'^[^@]+@[^@]+\.[^@]+\$');
                          if (!emailRegex.hasMatch(v)) return loc.invalidEmail;
                          return null;
                        }),
                    _themedField(context,
                        controller: _phoneController, label: loc.phone),
                    _themedField(context,
                        controller: _roleController, label: loc.role),
                    _themedField(context,
                        controller: _departmentController, label: loc.department),
                    const SizedBox(height: 32),
                    ElevatedButton(
                      style: ElevatedButton.styleFrom(
                        minimumSize: const Size.fromHeight(50),
                        backgroundColor: theme.colorScheme.primary.withOpacity(0.9),
                        foregroundColor: theme.colorScheme.onPrimary,
                      ),
                      onPressed: _isSaving ? null : _saveProfile,
                      child: _isSaving
                          ? const SizedBox(
                              height: 24, width: 24,
                              child: CircularProgressIndicator(strokeWidth: 3))
                          : Text(loc.save, style: const TextStyle(fontWeight: FontWeight.bold)),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _themedField(
    BuildContext context, {
    required TextEditingController controller,
    required String label,
    String? Function(String?)? validator,
  }) {
    final theme = Theme.of(context);
    final scheme = theme.colorScheme;
    final isDark = theme.brightness == Brightness.dark;

    return Container(
      margin: const EdgeInsets.symmetric(vertical: 8),
      decoration: BoxDecoration(
        color: scheme.surface.withOpacity(isDark ? 0.5 : 0.9),
        borderRadius: BorderRadius.circular(18),
        border: Border.all(
          color: isDark ? Colors.white24 : Colors.black26,
        ),
      ),
      child: TextFormField(
        controller: controller,
        validator: validator,
        style: TextStyle(color: scheme.onSurface),
        decoration: InputDecoration(
          labelText: label,
          contentPadding: const EdgeInsets.symmetric(horizontal: 20, vertical: 18),
        ),
      ),
    );
  }
}
*/

// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/profile/animated_background.dart ===

// lib/features/profile/animated_background.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../../core/theme_provider.dart'; // Fixed relative path
import '../../../core/theme.dart'; // for AppGradients

class AnimatedBackground extends StatelessWidget {
  const AnimatedBackground({super.key});

  @override
  Widget build(BuildContext context) {
    final mode = Provider.of<ThemeProvider>(context).appThemeMode;

    return Stack(
      fit: StackFit.expand,
      children: [
        _buildMetallicBase(mode),
        if (mode == AppThemeMode.dark || mode == AppThemeMode.bangladesh)
          Positioned.fill(child: _buildGlossOverlay(mode)),
        Container(color: _glassTint(mode)),
      ],
    );
  }

  Widget _buildMetallicBase(AppThemeMode mode) {
  final gradientColors = AppGradients.getGradientColors(mode);
  return Container(
    decoration: BoxDecoration(
      gradient: LinearGradient(
        colors: [
          gradientColors[0].withOpacity(0.9),
          gradientColors[1].withOpacity(0.9),
        ],
        begin: Alignment.topLeft,
        end: Alignment.bottomRight,
      ),
    ),
  );
}
  Widget _buildGlossOverlay(AppThemeMode mode) {
    final center = mode == AppThemeMode.dark
        ? const Alignment(-0.5, -0.5)
        : const Alignment(0.6, -0.6);
    final radius = mode == AppThemeMode.dark ? 1.5 : 1.4;
    final opacity = mode == AppThemeMode.dark ? 0.05 : 0.15;

    return DecoratedBox(
      position: DecorationPosition.foreground,
      decoration: BoxDecoration(
        gradient: RadialGradient(
          center: center,
          radius: radius,
          colors: [
            Colors.white.withOpacity(opacity),
            Colors.transparent,
          ],
          stops: const [0.0, 0.7],
        ),
      ),
    );
  }

  Color _glassTint(AppThemeMode mode) {
    switch (mode) {
      case AppThemeMode.dark:
        return const Color(0xFF1C1F26).withOpacity(0.1);
      case AppThemeMode.light:
        return Colors.white.withOpacity(0.1);
      case AppThemeMode.bangladesh:
      default:
        return const Color(0xFF6E7B75).withOpacity(0.15);
    }
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/news/newspaper_screen.dart ===



import 'dart:convert';
import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:provider/provider.dart';
import 'package:go_router/go_router.dart';
import 'package:fluttertoast/fluttertoast.dart';

import '/core/theme_provider.dart';
import '/core/theme.dart';
import '/core/utils/favorites_manager.dart';
import '/l10n/app_localizations.dart';
import '/widgets/app_drawer.dart';
import '/widgets/category_chips_bar.dart';
import '/core/app_paths.dart';
import '../common/appBar.dart';
import 'widgets/news_card.dart';

class NewspaperScreen extends StatefulWidget {
  const NewspaperScreen({Key? key}) : super(key: key);

  @override
  State<NewspaperScreen> createState() => _NewspaperScreenState();
}

class _NewspaperScreenState extends State<NewspaperScreen>
    with SingleTickerProviderStateMixin {
  final List<dynamic> _papers = [];
  bool _isLoading = true;
  late final TabController _tabController;
  final ScrollController _scrollController = ScrollController();
  String _langFilter = 'All';
  final FavoritesManager favoritesManager = FavoritesManager.instance;
  DateTime? _lastBackPressed;
  bool _didInit = false;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 9, vsync: this)
      ..addListener(() {
        setState(() => _langFilter = 'All');
        _scrollController.jumpTo(0);
      });
    favoritesManager.loadFavorites();
    _loadPapers();
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    if (!_didInit) {
      _didInit = true;
      WidgetsBinding.instance.addPostFrameCallback((_) {
        if (mounted) {
          _tabController.animateTo(0);
          _scrollController.jumpTo(0);
        }
      });
    }
  }

  Future<void> _loadPapers() async {
    setState(() => _isLoading = true);
    try {
      final raw = await rootBundle.loadString('assets/data.json');
      final data = jsonDecode(raw) as Map<String, dynamic>;
      setState(() {
        _papers
          ..clear()
          ..addAll(data['newspapers'] as List<dynamic>);
        _isLoading = false;
      });
    } catch (e) {
      setState(() => _isLoading = false);
      final loc = AppLocalizations.of(context)!;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(loc.loadError.replaceFirst('{message}', '$e'))),
      );
    }
  }

  List<String> get _categories {
    final loc = AppLocalizations.of(context)!;
    return [
      loc.national,
      loc.international,
      loc.businessFinance,
      loc.digitalTech,
      loc.sportsNews,
      loc.entertainmentArts,
      loc.worldPolitics,
      loc.blog,
    ];
  }

  List<dynamic> get _filteredPapers {
    final loc = AppLocalizations.of(context)!;
    final selectedCategory = _categories[_tabController.index];
    final mapping = {
      loc.businessFinance: 'business',
      loc.digitalTech: 'tech',
      loc.sportsNews: 'sports',
      loc.entertainmentArts: 'entertainment',
      loc.worldPolitics: 'defense',
      loc.blog: 'blog',
      loc.national: 'national',
      loc.international: 'international',
    };

    if (selectedCategory == loc.favorites) {
      final favIds = favoritesManager.favoriteNewspapers
          .map((n) => n['id'].toString())
          .toSet();
      return _papers
          .where((p) => favIds.contains(p['id'].toString()))
          .toList();
    }

    return _papers.where((p) {
      final region = (p['region'] ?? '').toString().toLowerCase();
      final key = mapping[selectedCategory];
      if (selectedCategory == loc.national ||
          selectedCategory == loc.international) {
        if (region != key) return false;
        if (_langFilter == 'All') return true;
        final lang = (p['language'] ?? '').toString().toLowerCase();
        return (_langFilter == loc.bangla && lang == 'bn') ||
            (_langFilter == loc.english && lang == 'en');
      }
      return key != null && region == key;
    }).toList();
  }

  Future<bool> _onWillPop() async {
    final now = DateTime.now();
    if (context.canPop()) {
      context.pop();
      return false;
    }
    if (_lastBackPressed == null ||
        now.difference(_lastBackPressed!) > const Duration(seconds: 2)) {
      _lastBackPressed = now;
      Fluttertoast.showToast(
        msg: "Press back again to exit",
        gravity: ToastGravity.BOTTOM,
      );
      return false;
    }
    return true;
  }

  @override
 @override
Widget build(BuildContext context) {
  final loc = AppLocalizations.of(context)!;
  final prov = context.watch<ThemeProvider>();
  final mode = prov.appThemeMode;
  final colors = AppGradients.getGradientColors(mode);
  final start = colors[0];
  final end = colors[1];
  final theme = Theme.of(context);

  return WillPopScope(
    onWillPop: _onWillPop,
    child: Scaffold(
      extendBodyBehindAppBar: true,
      backgroundColor: Colors.transparent,
      drawer: const AppDrawer(),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [
                  start.withOpacity(0.9),
                  end.withOpacity(0.9),
                ],
              ),
            ),
          ),
          CustomScrollView(
            slivers: [
              SliverAppBar(
                pinned: true,
                backgroundColor: Colors.transparent,
                elevation: 0,
                centerTitle: true,
                title: AppBarTitle(loc.newspapers),
                flexibleSpace: ClipRect(
                  child: BackdropFilter(
                    filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20),
                    child: Container(
                      decoration: BoxDecoration(
                        gradient: LinearGradient(
                          begin: Alignment.topLeft,
                          end: Alignment.bottomRight,
                          colors: [
                            start.withOpacity(0.8),
                            end.withOpacity(0.85),
                          ],
                        ),
                      ),
                    ),
                  ),
                ),
              ),
              SliverToBoxAdapter(
                child: ChipsBar(
                  items: _categories,
                  selectedIndex: _tabController.index,
                  onTap: (i) => _tabController.animateTo(i),
                ),
              ),
              if (_categories[_tabController.index] == loc.national ||
                  _categories[_tabController.index] == loc.international)
                SliverToBoxAdapter(
                  child: Padding(
                    padding: const EdgeInsets.symmetric(vertical: 8),
                    child: Center(child: _buildLanguageFilter(context)),
                  ),
                ),
              SliverFillRemaining(
                child: _isLoading
                    ? Center(
                        child: CircularProgressIndicator(
                          valueColor: AlwaysStoppedAnimation(
                              theme.colorScheme.primary),
                        ),
                      )
                    : _filteredPapers.isEmpty
                        ? Center(
                            child: Text(
                              loc.noPapersFound,
                              style: theme.textTheme.bodyLarge,
                            ),
                          )
                        : RefreshIndicator(
                            color: theme.colorScheme.primary,
                            onRefresh: _loadPapers,
                            child: ListView.builder(
                              controller: _scrollController,
                              padding: const EdgeInsets.all(16),
                              itemCount: _filteredPapers.length,
                              itemBuilder: (_, idx) {
  final paper = _filteredPapers[idx];
  final id = paper['id'].toString();
  final isFavorite = favoritesManager.isFavoriteNewspaper(id);

  return AnimatedContainer(
    duration: const Duration(milliseconds: 400),
    curve: Curves.easeInOut,
    margin: const EdgeInsets.only(bottom: 12),
    decoration: BoxDecoration(
      borderRadius: BorderRadius.circular(20),
      color: theme.cardColor.withOpacity(0.03),
      border: Border.all(
        color: theme.colorScheme.outline.withOpacity(0.15),
        width: 1.2,
      ),
      boxShadow: isFavorite
          ? [
              BoxShadow(
                color: theme.colorScheme.primary.withOpacity(0.25),
                blurRadius: 14,
                spreadRadius: 1,
                offset: const Offset(0, 6),
              ),
            ]
          : [],
    ),
    child: NewsCard(
      news: paper,
      isFavorite: isFavorite,
      onFavoriteToggle: () => setState(() {
        favoritesManager.toggleNewspaper(paper);
      }),
      searchQuery: '',
    ),
  );
}

                            ),
                          ),
              ),
            ],
          ),
        ],
      ),
    ),
  );
}

Widget _buildLanguageFilter(BuildContext context) {
  final loc = AppLocalizations.of(context)!;
  final prov = context.watch<ThemeProvider>();
  final theme = Theme.of(context);
  final baseColor = prov.glassColor;
  final borderColor = prov.borderColor.withOpacity(0.3);
  final selectedColor = const Color(0xFFFFD700); // Gold

  Widget buildChip(String label, bool selected) {
    return Material(
      color: Colors.transparent,
      child: InkWell(
        borderRadius: BorderRadius.circular(30),
        onTap: () => setState(() => _langFilter = label),
        splashColor: theme.colorScheme.primary.withOpacity(0.2),
        child: AnimatedContainer(
          duration: const Duration(milliseconds: 250),
          padding: const EdgeInsets.symmetric(horizontal: 18, vertical: 10),
          decoration: BoxDecoration(
            color: _langFilter == label
                ? theme.colorScheme.primary.withOpacity(0.2)
                : baseColor.withOpacity(0.05),
            borderRadius: BorderRadius.circular(30),
            border: Border.all(
              color: _langFilter == label
                  ? theme.colorScheme.primary
                  : borderColor,
              width: 1.2,
            ),
          ),
          child: Text(
            label,
            style: theme.textTheme.labelLarge?.copyWith(
              fontWeight: FontWeight.w600,
              color: _langFilter == label
                  ? theme.colorScheme.primary
                  : theme.textTheme.bodyMedium?.color?.withOpacity(0.85),
            ),
          ),
        ),
      ),
    );
  }

  return Row(
    mainAxisAlignment: MainAxisAlignment.center,
    children: [
      buildChip(loc.bangla, _langFilter == loc.bangla),
      const SizedBox(width: 12),
      buildChip(loc.english, _langFilter == loc.english),
    ],
  );
}
}

// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/news/widgets/news_card.dart ===

// lib/features/news/widgets/news_card.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';
import 'package:share_plus/share_plus.dart';
import '../../../core/theme_provider.dart';
import '../../../core/theme.dart';

class NewsCard extends StatefulWidget {
  final Map<String, dynamic> news;
  final bool isFavorite;
  final VoidCallback onFavoriteToggle;
  final bool highlight;
  final String searchQuery;

  const NewsCard({
    super.key,
    required this.news,
    required this.isFavorite,
    required this.onFavoriteToggle,
    this.highlight = true,
    required this.searchQuery,
  });

  @override
  State<NewsCard> createState() => _NewsCardState();
}

class _NewsCardState extends State<NewsCard> with SingleTickerProviderStateMixin {
  bool _isPressed = false;

  void _open(BuildContext context) {
    final maybeWebsite = widget.news['contact']?['website'];
    final maybeUrl = widget.news['url'] ?? widget.news['link'];
    final url = (maybeWebsite is String && maybeWebsite.isNotEmpty)
        ? maybeWebsite
        : (maybeUrl is String ? maybeUrl : '');

    final title = widget.news['name'] ?? 'News';

    if (url.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('No URL available')),
      );
      return;
    }

    context.push('/webview', extra: {'url': url, 'title': title});
  }

  String? _getLocalLogoPath() {
    final id = widget.news['id']?.toString();
    return id != null ? 'assets/logos/$id.png' : null;
  }

  void _share() {
    final title = widget.news['name'] ?? 'Newspaper';
    final url = widget.news['url'] ?? widget.news['link'] ?? '';
    if (url is String && url.isNotEmpty) {
      Share.share('$title\n$url');
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final scheme = theme.colorScheme;
    final mode = context.watch<ThemeProvider>().appThemeMode;
    final localLogoPath = _getLocalLogoPath();

    final isDark = mode == AppThemeMode.dark;
    final isDesh = mode.toString().toLowerCase().contains("desh");
    final fallbackText = (widget.news['name']?.toString().substring(0, 2).toUpperCase() ?? "NP");

    return GestureDetector(
      onTapDown: (_) => setState(() => _isPressed = true),
      onTapUp: (_) => setState(() => _isPressed = false),
      onTapCancel: () => setState(() => _isPressed = false),
      onTap: () => _open(context),
      child: AnimatedScale(
        scale: _isPressed ? 0.97 : 1.0,
        duration: const Duration(milliseconds: 150),
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 10),
          child: AspectRatio(
            aspectRatio: 3 / 1,
            child: Container(
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(24),
                color: isDark ? Colors.white.withOpacity(0.06) : Colors.white.withOpacity(0.02),
                border: Border.all(
                  color: Colors.white.withOpacity(0.08),
                  width: 1.2,
                ),
                boxShadow: widget.highlight
                    ? [
                        BoxShadow(
                          color: Colors.black.withOpacity(0.3),
                          blurRadius: 30,
                          offset: const Offset(0, 12),
                        ),
                      ]
                    : [],
              ),
              child: ClipRRect(
                borderRadius: BorderRadius.circular(24),
                child: Stack(
                  fit: StackFit.expand,
                  children: [
                    BackdropFilter(
                      filter: ImageFilter.blur(sigmaX: 30, sigmaY: 30),
                      child: Container(
                        decoration: BoxDecoration(
                          gradient: LinearGradient(
                            begin: Alignment.topLeft,
                            end: Alignment.bottomRight,
                            colors: [
                              Colors.white.withOpacity(0.08),
                              Colors.white.withOpacity(0.02),
                            ],
                          ),
                        ),
                      ),
                    ),
                    if (isDark || isDesh)
                      Container(
                        decoration: const BoxDecoration(
                          gradient: LinearGradient(
                            begin: Alignment.topCenter,
                            end: Alignment.bottomCenter,
                            colors: [
                              Colors.white30,
                              Colors.transparent,
                            ],
                          ),
                        ),
                      ),
                    Center(
                      child: Padding(
                        padding: const EdgeInsets.all(20.0),
                        child: Container(
                          decoration: BoxDecoration(
                            shape: BoxShape.circle,
                            gradient: RadialGradient(
                              center: Alignment.center,
                              radius: 0.5,
                              colors: [
                                Colors.white.withOpacity(isDark ? 0.25 : 0.1),
                                Colors.transparent,
                              ],
                            ),
                            boxShadow: widget.highlight && (isDark || isDesh)
                                ? [
                                    BoxShadow(
                                      color: Colors.white.withOpacity(0.15),
                                      blurRadius: 24,
                                      spreadRadius: 1,
                                      offset: const Offset(0, 4),
                                    ),
                                  ]
                                : [],
                          ),
                          padding: const EdgeInsets.all(8),
                          child: localLogoPath != null
                              ? ClipRRect(
                                  borderRadius: BorderRadius.circular(16),
                                  child: Image.asset(
                                    localLogoPath,
                                    fit: BoxFit.contain,
                                    errorBuilder: (_, __, ___) => _fallbackAvatar(fallbackText),
                                  ),
                                )
                              : _fallbackAvatar(fallbackText),
                        ),
                      ),
                    ),
                   // ✅ With this block:
Positioned(
  bottom: 8,
  left: 8,
  child: Column(
    crossAxisAlignment: CrossAxisAlignment.start,
    children: [
      IconButton(
        icon: Icon(
          widget.isFavorite ? Icons.favorite : Icons.favorite_border,
          color: widget.isFavorite ? Colors.redAccent : theme.iconTheme.color,
          size: 20,
        ),
        onPressed: widget.onFavoriteToggle,
        visualDensity: VisualDensity.compact,
        padding: EdgeInsets.zero,
        constraints: const BoxConstraints(),
      ),
      const SizedBox(height: 4),
      IconButton(
        icon: const Icon(Icons.share, size: 20),
        onPressed: _share,
        visualDensity: VisualDensity.compact,
        padding: EdgeInsets.zero,
        constraints: const BoxConstraints(),
      ),
    ],
  ),
),

                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _fallbackAvatar(String initials) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.grey.shade200.withOpacity(0.4),
        borderRadius: BorderRadius.circular(16),
      ),
      alignment: Alignment.center,
      child: Text(
        initials,
        style: const TextStyle(
          fontSize: 24,
          fontWeight: FontWeight.bold,
          color: Colors.black87,
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/news/widgets/animated_background.dart ===

// lib/features/news/widgets/animated_background.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../../core/theme_provider.dart';
import '../../../core/theme.dart';

/// A full-screen overlay that can optionally blur the backdrop
/// and apply a semi-transparent animated gradient tint based on theme.
class AnimatedBackground extends StatelessWidget {
  final Duration duration;
  final Widget? child;
  final double blurSigma;
  final double overlayOpacity;

  const AnimatedBackground({
    super.key,
    this.duration = const Duration(seconds: 20),
    this.child,
    this.blurSigma = 20,
    this.overlayOpacity = 0.3,
  });

  @override
  Widget build(BuildContext context) {
    final mode = context.watch<ThemeProvider>().appThemeMode;
    final colors = _gradientColors(mode);

    return Stack(fit: StackFit.expand, children: [
      if (blurSigma > 0)
        Positioned.fill(
          child: BackdropFilter(
            filter: ImageFilter.blur(sigmaX: blurSigma, sigmaY: blurSigma),
            child: const SizedBox.shrink(),
          ),
        ),
      if (overlayOpacity > 0)
        Positioned.fill(
          child: AnimatedContainer(
            duration: duration,
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: colors
                    .map((c) => c.withOpacity(overlayOpacity))
                    .toList(),
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
              ),
            ),
          ),
        ),
      if (child != null) child!,
    ]);
  }

  List<Color> _gradientColors(AppThemeMode mode) {
    return switch (mode) {
      AppThemeMode.dark => [Colors.black87, Colors.grey.shade900],
      AppThemeMode.bangladesh => [const Color(0xFF004D40), const Color(0xFF26A69A)],
      AppThemeMode.light => [const Color.fromARGB(255, 232, 231, 231), Colors.grey.shade100],
    };
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/history/history_widget.dart ===

 // lib/features/history/history_widget.dart

import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:http/http.dart' as http;
import 'package:intl/intl.dart';
import 'package:share_plus/share_plus.dart';
import '/core/theme_provider.dart';
import 'package:provider/provider.dart';
import 'dart:ui';

class HistoryWidget extends StatefulWidget {
  const HistoryWidget({Key? key}) : super(key: key);

  @override
  State<HistoryWidget> createState() => _HistoryWidgetState();
}

class _HistoryWidgetState extends State<HistoryWidget> {
  bool isLoading = true;
  Map<String, dynamic>? data;
  String? error;
  String searchQuery = '';

  @override
  void initState() {
    super.initState();
    fetchHistory();
  }

  Future<void> fetchHistory() async {
    final now = DateTime.now();
    final url = Uri.parse(
        'https://byabbe.se/on-this-day/${now.month}/${now.day}/events.json');

    try {
      final response = await http.get(url);
      if (response.statusCode == 200) {
        final result = json.decode(response.body);
        setState(() {
          data = result;
          isLoading = false;
        });
      } else {
        setState(() {
          error = 'Error ${response.statusCode}: Unable to fetch data';
          isLoading = false;
        });
      }
    } catch (e) {
      setState(() {
        error = 'Exception: $e';
        isLoading = false;
      });
    }
  }

  Widget _modernIconButton(
      {required IconData icon,
      required VoidCallback onPressed,
      String? tooltip}) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 4),
      child: Material(
        color: Colors.transparent,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        child: InkWell(
          onTap: onPressed,
          borderRadius: BorderRadius.circular(12),
          child: Tooltip(
            message: tooltip ?? '',
            child: Ink(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.white.withOpacity(0.1),
                borderRadius: BorderRadius.circular(12),
              ),
              child: Icon(icon, size: 22),
            ),
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final today = DateFormat('MMMM d').format(DateTime.now());
    final prov = context.watch<ThemeProvider>();
    final theme = Theme.of(context);
    final gradient = prov.appThemeMode == AppThemeMode.light
        ? [Colors.blue.shade300, Colors.blue.shade100]
        : prov.appThemeMode == AppThemeMode.bangladesh
            ? [const Color(0xFF00796B), const Color(0xFF004D40)]
            : [Colors.black87, Colors.grey.shade900];

    final regionKeywords = [
      'bangladesh', 'dhaka', 'east pakistan', 'pakistan', 'india', 'indian',
      'subcontinent', 'kolkata', 'lahore', 'mujib', 'sheikh hasina',
      'language movement', 'war of independence'
    ];
    final globalHighlights = [
      'nasa', 'moon', 'united nations', 'world war',
      'martin luther king', 'gandhi'
    ];
    final allKeywords = [...regionKeywords, ...globalHighlights];

    final events = (data?['events'] as List<dynamic>? ?? [])
        .where((event) {
          final desc = event['description'].toString().toLowerCase();
          return allKeywords.any((kw) => desc.contains(kw)) ||
              searchQuery.isNotEmpty &&
                  (event['year'].toString().contains(searchQuery) ||
                      desc.contains(searchQuery.toLowerCase()));
        })
        .toList();

    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: AppBar(
        title: Text(
          "Today's History - $today",
          style: prov.floatingTextStyle(fontSize: 20),
        ),
        centerTitle: true,
        backgroundColor: Colors.transparent,
        elevation: 0,
        flexibleSpace: ClipRect(
          child: BackdropFilter(
            filter: ImageFilter.blur(sigmaX: 15, sigmaY: 15),
            child: Container(color: Colors.black.withOpacity(0.05)),
          ),
        ),
        actions: [
          _modernIconButton(
            icon: Icons.refresh,
            tooltip: 'Refresh',
            onPressed: fetchHistory,
          ),
        ],
      ),
      body: isLoading
          ? const Center(child: CircularProgressIndicator())
          : error != null
              ? Center(child: Text(error!))
              : Container(
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      colors: gradient,
                      begin: Alignment.topCenter,
                      end: Alignment.bottomCenter,
                    ),
                  ),
                  child: Column(
                    children: [
                      const SizedBox(height: 90),
                      Padding(
                        padding: const EdgeInsets.all(16),
                        child: Material(
                          elevation: 4,
                          borderRadius: BorderRadius.circular(16),
                          child: TextField(
                            decoration: InputDecoration(
                              hintText: 'Search by year or keyword...',
                              prefixIcon: const Icon(Icons.search),
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(16),
                                borderSide: BorderSide.none,
                              ),
                              filled: true,
                              fillColor: theme.cardColor.withOpacity(0.9),
                              contentPadding: const EdgeInsets.symmetric(
                                  horizontal: 16, vertical: 14),
                            ),
                            onChanged: (value) =>
                                setState(() => searchQuery = value),
                          ),
                        ),
                      ),
                      Padding(
                        padding: const EdgeInsets.symmetric(horizontal: 16),
                        child: Row(
                          children: [
                            const Icon(Icons.history, size: 24),
                            const SizedBox(width: 8),
                            Text(
                              'Major Historical Events',
                              style: prov.floatingTextStyle(fontSize: 22),
                            ),
                          ],
                        ),
                      ),
                      const SizedBox(height: 8),
                      Expanded(
                        child: events.isEmpty
                            ? const Center(child: Text('No matching results.'))
                            : ListView.builder(
                                padding:
                                    const EdgeInsets.symmetric(horizontal: 16),
                                itemCount: events.length,
                                itemBuilder: (context, index) {
                                  final event = events[index];
                                  return AnimatedContainer(
                                    duration:
                                        const Duration(milliseconds: 300),
                                    curve: Curves.easeInOut,
                                    margin:
                                        const EdgeInsets.symmetric(vertical: 8),
                                    decoration: BoxDecoration(
                                      borderRadius: BorderRadius.circular(20),
                                      gradient: LinearGradient(
                                        colors: [
                                          prov.appThemeMode ==
                                                  AppThemeMode.dark
                                              ? const Color(0xFF222831)
                                              : Colors.blue.shade50,
                                          prov.appThemeMode ==
                                                  AppThemeMode.dark
                                              ? const Color(0xFF393E46)
                                              : Colors.blue.shade100
                                        ],
                                        begin: Alignment.topLeft,
                                        end: Alignment.bottomRight,
                                      ),
                                      border: Border.all(
                                        color: prov.appThemeMode ==
                                                AppThemeMode.dark
                                            ? const Color(0xFFFFD700)
                                            : Colors.blueAccent,
                                        width: 1.5,
                                      ),
                                      boxShadow: [
                                        BoxShadow(
                                          color: Colors.black.withOpacity(0.05),
                                          blurRadius: 8,
                                          offset: const Offset(2, 2),
                                        ),
                                      ],
                                    ),
                                    child: Padding(
                                      padding: const EdgeInsets.all(20),
                                      child: Column(
                                        crossAxisAlignment:
                                            CrossAxisAlignment.start,
                                        children: [
                                          Row(
                                            mainAxisAlignment:
                                                MainAxisAlignment
                                                    .spaceBetween,
                                            children: [
                                              Row(
                                                children: [
                                                  Icon(Icons.calendar_month,
                                                      size: 18,
                                                      color: prov.appThemeMode ==
                                                              AppThemeMode.dark
                                                          ? const Color(
                                                              0xFFFFD700)
                                                          : theme
                                                              .iconTheme.color),
                                                  const SizedBox(width: 6),
                                                  Text(
                                                    event['year'].toString(),
                                                    style: prov
                                                        .floatingTextStyle(
                                                      fontSize: 18,
                                                      color: prov.appThemeMode ==
                                                              AppThemeMode.dark
                                                          ? const Color(
                                                              0xFFFFD700)
                                                          : theme
                                                              .textTheme
                                                              .titleLarge!
                                                              .color,
                                                    ),
                                                  ),
                                                ],
                                              ),
                                              Row(
                                                children: [
                                                  _modernIconButton(
                                                    icon: Icons.share,
                                                    tooltip: 'Share',
                                                    onPressed: () =>
                                                        Share.share(
                                                            'On this day in ${event['year']}: ${event['description']}'),
                                                  ),
                                                  _modernIconButton(
                                                    icon: Icons.copy,
                                                    tooltip: 'Copy',
                                                    onPressed: () {
                                                      Clipboard.setData(
                                                        ClipboardData(
                                                          text:
                                                              'On this day in ${event['year']}: ${event['description']}',
                                                        ),
                                                      );
                                                      ScaffoldMessenger.of(
                                                              context)
                                                          .showSnackBar(
                                                        const SnackBar(
                                                          content: Text(
                                                              'Copied to clipboard'),
                                                        ),
                                                      );
                                                    },
                                                  ),
                                                ],
                                              )
                                            ],
                                          ),
                                          const SizedBox(height: 10),
                                          Divider(
                                            thickness: 1,
                                            color: prov.appThemeMode ==
                                                    AppThemeMode.dark
                                                ? Colors.white24
                                                : Colors.black26,
                                          ),
                                          const SizedBox(height: 10),
                                          Text(
                                            event['description'] ?? '',
                                            style:
                                                theme.textTheme.bodyLarge,
                                          ),
                                          if (event['wikipedia'] != null &&
                                              event['wikipedia'].isNotEmpty)
                                            Padding(
                                              padding: const EdgeInsets.only(
                                                  top: 8),
                                              child: Text(
                                                '📍 Related: ${(event['wikipedia'][0]['title'] ?? '')}',
                                                style: theme
                                                    .textTheme.bodySmall
                                                    ?.copyWith(
                                                  color: Colors.blueAccent,
                                                  fontStyle: FontStyle.italic,
                                                ),
                                              ),
                                            ),
                                        ],
                                      ),
                                    ),
                                  );
                                },
                              ),
                      ),
                    ],
                  ),
                ),
    );
  }
}

// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/movies/movie_widget.dart ===

// lib/features/movies/movie_widget.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:go_router/go_router.dart';
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:provider/provider.dart';
import 'movie.dart';
import 'recommendation_service.dart';
import '../../core/theme_provider.dart';
import '../../core/theme.dart';

class MovieWidget extends StatelessWidget {
  final double height;
  const MovieWidget({Key? key, required this.height}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final scheme = theme.colorScheme;
    return Center(
      child: ElevatedButton.icon(
        icon: Icon(Icons.movie, color: scheme.onPrimary),
        label: Text("Open CineSpot", style: theme.textTheme.labelLarge?.copyWith(color: scheme.onPrimary)),
        style: ElevatedButton.styleFrom(
          backgroundColor: scheme.surface.withOpacity(0.6),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
            side: BorderSide(color: scheme.primary, width: 2),
          ),
          shadowColor: scheme.primary.withOpacity(0.7),
          elevation: 8,
        ),
        onPressed: () => Navigator.of(context).push(
          MaterialPageRoute(
            fullscreenDialog: true,
            builder: (_) => const FullScreenMoviePage(),
          ),
        ),
      ),
    );
  }
}

class FullScreenMoviePage extends StatefulWidget {
  const FullScreenMoviePage({Key? key}) : super(key: key);

  @override
  State<FullScreenMoviePage> createState() => _FullScreenMoviePageState();
}

class _FullScreenMoviePageState extends State<FullScreenMoviePage> with TickerProviderStateMixin {
  late final TabController _langCtrl, _catCtrl;
  final _langs = ['All', 'English', 'Bangla', 'Hindi', 'Other'];
  final _langCodes = [null, 'en', 'bn', 'hi', 'other'];
  final _cats = ['Trending', 'Upcoming', 'Now Playing'];
  final _apiCats = ['now_playing', 'upcoming', 'popular'];
  final Set<int> _favoriteIds = {};

  @override
  void initState() {
    super.initState();
    _langCtrl = TabController(length: _langs.length, vsync: this);
    _catCtrl = TabController(length: _cats.length, vsync: this);
  }

  @override
  void dispose() {
    _langCtrl.dispose();
    _catCtrl.dispose();
    super.dispose();
  }

  Future<List<Movie>> _fetch(String apiCat, String? langCode) async {
    const apiKey = 'e2999b9d149f7847e3c467822ccbc1a7';
    final today = DateTime.now().toIso8601String().split('T')[0];

    Uri uri = Uri.https('api.themoviedb.org',
      apiCat == 'now_playing' || apiCat == 'upcoming'
          ? '/3/movie/$apiCat'
          : '/3/discover/movie',
      {
        'api_key': apiKey,
        if (langCode != null) 'with_original_language': langCode,
        if (apiCat == 'popular') 'sort_by': 'popularity.desc',
        if (apiCat == 'upcoming') 'primary_release_date.gte': today,
        'language': 'en-US',
      },
    );

    final response = await http.get(uri);
    if (response.statusCode != 200) {
      throw Exception('TMDB ${response.statusCode}: ${response.body}');
    }

    final data = jsonDecode(response.body) as Map<String, dynamic>;
    var movies = (data['results'] as List).map((j) => Movie.fromJson(j)).toList();

    if (langCode == null && apiCat == 'popular') {
      movies = await RecommendationService.instance.personalize(movies);
    }
    return movies;
  }

  Widget _neonButton(IconData icon, VoidCallback onTap, Color color) {
    return Material(
      color: color.withOpacity(0.6),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: InkWell(
        borderRadius: BorderRadius.circular(12),
        onTap: onTap,
        child: Padding(
          padding: const EdgeInsets.all(8),
          child: Icon(icon, color: Theme.of(context).colorScheme.onPrimary, size: 24),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final scheme = theme.colorScheme;
    final background = BoxDecoration(
      gradient: LinearGradient(
        colors: AppGradients.getGradientColors(context.read<ThemeProvider>().appThemeMode),
        begin: Alignment.topLeft,
        end: Alignment.bottomRight,
      ),
    );

    return Scaffold(
      backgroundColor: Colors.transparent,
      body: Container(
        decoration: background,
        child: SafeArea(
          child: Column(
            children: [
              const SizedBox(height: 12),
              Text("CineSpot 🎬", style: theme.textTheme.headlineSmall),
              TabBar(
                controller: _langCtrl,
                isScrollable: true,
                indicatorColor: scheme.primary,
                labelColor: scheme.onPrimary,
                unselectedLabelColor: scheme.onSurface,
                tabs: _langs.map((l) => Tab(text: l)).toList(),
              ),
              TabBar(
                controller: _catCtrl,
                indicatorColor: scheme.primary,
                labelColor: scheme.onPrimary,
                unselectedLabelColor: scheme.onSurface,
                tabs: _cats.map((c) => Tab(text: c)).toList(),
              ),
              Expanded(
                child: TabBarView(
                  controller: _langCtrl,
                  children: _langs.map((lang) {
                    return TabBarView(
                      controller: _catCtrl,
                      children: _apiCats.map((cat) {
                        final langIndex = _langs.indexOf(lang);
                        return FutureBuilder<List<Movie>>(
                          future: _fetch(cat, _langCodes[langIndex]),
                          builder: (ctx, snap) {
                            if (snap.connectionState == ConnectionState.waiting) {
                              return Center(child: CircularProgressIndicator(color: scheme.primary));
                            }
                            if (snap.hasError) {
                              return Center(
                                child: Text('Error: ${snap.error}', style: theme.textTheme.bodyMedium?.copyWith(color: scheme.error)),
                              );
                            }
                            final movies = snap.data!;
                            if (movies.isEmpty) {
                              return Center(child: Text('No movies', style: theme.textTheme.bodyMedium));
                            }

                            final cols = MediaQuery.of(ctx).size.width > 600 ? 3 : 2;
                            return Padding(
                              padding: const EdgeInsets.all(12),
                              child: GridView.builder(
                                itemCount: movies.length,
                                gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                                  crossAxisCount: cols,
                                  crossAxisSpacing: 12,
                                  mainAxisSpacing: 12,
                                  childAspectRatio: 0.65,
                                ),
                                itemBuilder: (ctx, i) => _MovieCard(
                                  movie: movies[i],
                                  rank: i + 1,
                                  isFavorite: _favoriteIds.contains(movies[i].id),
                                  onToggleFavorite: () => setState(() {
                                    final id = movies[i].id;
                                    if (_favoriteIds.contains(id)) {
                                      _favoriteIds.remove(id);
                                    } else {
                                      _favoriteIds.add(id);
                                    }
                                  }),
                                ),
                              ),
                            );
                          },
                        );
                      }).toList(),
                    );
                  }).toList(),
                ),
              ),
              const Divider(),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [
                  _neonButton(Icons.close, () => Navigator.of(context).pop(), scheme.secondary),
                  _neonButton(Icons.refresh, () => setState(() {}), scheme.secondary),
                  _neonButton(Icons.search, () => showDialog(
                        context: context,
                        builder: (_) => AlertDialog(
                          title: Text("Search", style: theme.textTheme.titleMedium),
                          content: Text("Search feature not implemented.", style: theme.textTheme.bodyMedium),
                          actions: [TextButton(onPressed: () => Navigator.pop(context), child: const Text("OK"))],
                        ),
                      ), scheme.secondary),
                  _neonButton(Icons.star, () => showDialog(
                        context: context,
                        builder: (_) => AlertDialog(
                          title: Text("Favorites", style: theme.textTheme.titleMedium),
                          content: Text("Favorites: \${_favoriteIds.length} selected", style: theme.textTheme.bodyMedium),
                          actions: [TextButton(onPressed: () => Navigator.pop(context), child: const Text("OK"))],
                        ),
                      ), scheme.secondary),
                ],
              ),
              const SizedBox(height: 10),
            ],
          ),
        ),
      ),
    );
  }
}

class _MovieCard extends StatelessWidget {
  final Movie movie;
  final int rank;
  final bool isFavorite;
  final VoidCallback onToggleFavorite;

  const _MovieCard({
    Key? key,
    required this.movie,
    required this.rank,
    required this.isFavorite,
    required this.onToggleFavorite,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final scheme = theme.colorScheme;
    return Padding(
      padding: const EdgeInsets.all(6),
      child: ClipRRect(
        borderRadius: BorderRadius.circular(16),
        child: Container(
          decoration: BoxDecoration(
            color: scheme.surface.withOpacity(0.5),
            borderRadius: BorderRadius.circular(16),
            border: Border.all(color: scheme.primary, width: 2),
            boxShadow: [
              BoxShadow(
                color: scheme.primary.withOpacity(0.4),
                blurRadius: 16,
                spreadRadius: 4,
              ),
            ],
          ),
          child: InkWell(
            onTap: () => context.push('/movies/${movie.id}', extra: movie),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                Align(
                  alignment: Alignment.topRight,
                  child: IconButton(
                    icon: Icon(
                      isFavorite ? Icons.star : Icons.star_border,
                      color: isFavorite ? Colors.amber : scheme.onSurface,
                      size: 20,
                    ),
                    onPressed: onToggleFavorite,
                  ),
                ),
                Expanded(
                  child: movie.posterPath != null && movie.posterPath!.isNotEmpty
                      ? CachedNetworkImage(
                          imageUrl: 'https://image.tmdb.org/t/p/w500${movie.posterPath}',
                          fit: BoxFit.cover,
                          errorWidget: (_, __, ___) => const Icon(Icons.broken_image),
                          placeholder: (_, __) => const Center(child: CircularProgressIndicator()),
                        )
                      : const Center(child: Icon(Icons.image_not_supported)),
                ),
                Container(
                  decoration: BoxDecoration(
                    color: scheme.surface.withOpacity(0.6),
                    borderRadius: const BorderRadius.vertical(bottom: Radius.circular(16)),
                  ),
                  padding: const EdgeInsets.all(8),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        movie.title,
                        maxLines: 1,
                        overflow: TextOverflow.ellipsis,
                        style: theme.textTheme.titleSmall?.copyWith(color: scheme.primary),
                      ),
                      const SizedBox(height: 4),
                      Text(
                        movie.releaseDate,
                        style: theme.textTheme.bodySmall?.copyWith(color: scheme.onSurface.withOpacity(0.8)),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/movies/movie_list_horizontal.dart ===

// lib/features/movies/movie_list_horizontal.dart

import 'package:flutter/material.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';

import '../../core/language_provider.dart';
import '../../core/theme_provider.dart';
import '../../core/theme.dart';
import 'movie.dart';
import 'movie_service.dart';

class MovieListHorizontal extends StatelessWidget {
  final String category;
  final double height;

  const MovieListHorizontal({
    Key? key,
    this.category = 'popular',
    required this.height,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final lang = context.watch<LanguageProvider>().locale.languageCode;
    final scheme = Theme.of(context).colorScheme;

    return SizedBox(
      height: height,
      child: FutureBuilder<List<Movie>>(
        future: MovieService.instance.fetch(
          category: category,
          language: lang,
        ),
        builder: (ctx, snap) {
          if (snap.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator(color: scheme.primary));
          }
          if (snap.hasError) {
            return Center(
              child: Text(
                'Error loading movies:\n${snap.error}',
                textAlign: TextAlign.center,
                style: Theme.of(ctx).textTheme.bodyMedium?.copyWith(color: scheme.error),
              ),
            );
          }

          final movies = snap.data ?? [];
          if (movies.isEmpty) {
            return Center(
              child: Text('No movies found', style: Theme.of(ctx).textTheme.bodyMedium),
            );
          }

          return ListView.builder(
            scrollDirection: Axis.horizontal,
            padding: const EdgeInsets.symmetric(horizontal: 12),
            itemCount: movies.length,
            itemBuilder: (ctx, i) {
              final m = movies[i];
              return GestureDetector(
                onTap: () => context.push('/movies/${m.id}', extra: m),
                child: Container(
                  width: height * 0.6,
                  margin: const EdgeInsets.symmetric(horizontal: 8),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Expanded(
                        child: ClipRRect(
                          borderRadius: BorderRadius.circular(8),
                          child: m.posterPath != null && m.posterPath!.isNotEmpty
                              ? CachedNetworkImage(
                                  imageUrl: 'https://image.tmdb.org/t/p/w500${m.posterPath}',
                                  placeholder: (_, __) => const Center(child: CircularProgressIndicator()),
                                  errorWidget: (_, __, ___) => const Icon(Icons.broken_image),
                                  fit: BoxFit.cover,
                                  width: double.infinity,
                                )
                              : const Center(child: Icon(Icons.image_not_supported)),
                        ),
                      ),
                      const SizedBox(height: 6),
                      Text(
                        m.title,
                        maxLines: 1,
                        overflow: TextOverflow.ellipsis,
                        style: Theme.of(ctx).textTheme.bodyMedium,
                      ),
                    ],
                  ),
                ),
              );
            },
          );
        },
      ),
    );
  }
}

// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/movies/movie_detail_screen.dart ===

// lib/features/movies/movie_detail_screen.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter_rating_bar/flutter_rating_bar.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';
import '../../core/theme_provider.dart';
import '../../core/theme.dart';

import 'movie.dart';

class MovieDetailScreen extends StatelessWidget {
  final Movie movie;
  const MovieDetailScreen({Key? key, required this.movie}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final scheme = theme.colorScheme;
    final router = GoRouter.of(context);
    final gradient = AppGradients.getGradientColors(context.read<ThemeProvider>().appThemeMode);

    return Scaffold(
      extendBodyBehindAppBar: true,
      backgroundColor: Colors.transparent,
      body: Stack(fit: StackFit.expand, children: [
        Container(color: scheme.background),
        Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: gradient,
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
          ),
        ),
        Positioned.fill(
          child: BackdropFilter(
            filter: ImageFilter.blur(sigmaX: 18, sigmaY: 18),
            child: Container(color: Colors.black.withOpacity(0.3)),
          ),
        ),
        CustomScrollView(slivers: [
          SliverAppBar(
            backgroundColor: Colors.transparent,
            pinned: true,
            expandedHeight: 300,
            elevation: 0,
            leading: Padding(
              padding: const EdgeInsets.only(left: 12, top: 12),
              child: Material(
                color: scheme.surface.withOpacity(0.3),
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                child: IconButton(
                  icon: Icon(Icons.arrow_back, color: scheme.onPrimary),
                  onPressed: () => Navigator.of(context).pop(),
                ),
              ),
            ),
            actions: [
              Padding(
                padding: const EdgeInsets.only(right: 12, top: 12),
                child: Material(
                  color: scheme.surface.withOpacity(0.3),
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                  child: IconButton(
                    icon: Icon(Icons.refresh, color: scheme.onPrimary),
                    onPressed: () => router.go('/movies/${movie.id}', extra: movie),
                  ),
                ),
              ),
            ],
            flexibleSpace: FlexibleSpaceBar(
              title: Text(
                movie.title,
                style: theme.textTheme.titleLarge?.copyWith(
                  color: scheme.onPrimary,
                  shadows: const [Shadow(blurRadius: 4, color: Colors.black54)],
                ),
              ),
              background: Stack(fit: StackFit.expand, children: [
                movie.backdropPath.isNotEmpty
                    ? CachedNetworkImage(
                        imageUrl: 'https://image.tmdb.org/t/p/w500${movie.backdropPath}',
                        fit: BoxFit.cover,
                        errorWidget: (_, __, ___) => const Icon(Icons.broken_image),
                        placeholder: (_, __) => const Center(child: CircularProgressIndicator()),
                      )
                    : const Center(child: Icon(Icons.image_not_supported)),
                Container(color: Colors.black45),
              ]),
            ),
          ),
          SliverPadding(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 24),
            sliver: SliverList(
              delegate: SliverChildListDelegate([
                Center(
                  child: RatingBarIndicator(
                    rating: movie.voteAverage / 2,
                    itemCount: 5,
                    itemSize: 36,
                    itemBuilder: (_, __) => Icon(Icons.star, color: scheme.secondary),
                  ),
                ),
                const SizedBox(height: 20),
                Text('Release Date: ${movie.releaseDate}', style: theme.textTheme.bodyLarge?.copyWith(color: scheme.onSurface)),
                const SizedBox(height: 12),
                Text('Genres: ${movie.genreIds.join(', ')}', style: theme.textTheme.bodyLarge?.copyWith(color: scheme.onSurface)),
                const SizedBox(height: 20),
                Text(movie.overview, style: theme.textTheme.bodyMedium?.copyWith(color: scheme.onPrimary)),
                const SizedBox(height: 40),
              ]),
            ),
          ),
        ]),
      ]),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/movies/recommendation_service.dart ===

// lib/features/movies/recommendation_service.dart

import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import 'movie.dart';

class RecommendationService {
  RecommendationService._();
  static final RecommendationService instance = RecommendationService._();

  static const _genreScoresKey = 'genreScores';
  Map<int, double> _genreScores = {};

  Future<void> load() async {
    final prefs = await SharedPreferences.getInstance();
    final jsonStr = prefs.getString(_genreScoresKey);
    if (jsonStr != null) {
      final Map<String, dynamic> m = jsonDecode(jsonStr);
      _genreScores =
          m.map((k, v) => MapEntry(int.parse(k), v as double));
    }
  }

  Future<void> _save() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(
      _genreScoresKey,
      jsonEncode(_genreScores.map((k, v) => MapEntry(k.toString(), v))),
    );
  }

  Future<void> recordInteraction(Movie movie) async {
    await load();
    for (var g in movie.genreIds) {
      _genreScores[g] = (_genreScores[g] ?? 0) + 1.0;
    }
    await _save();
  }

  /// Returns a NEW list of movies sorted by (TMDB rating * 0.7 + affinity * 0.3).
  Future<List<Movie>> personalize(List<Movie> movies) async {
    await load();
    // find max genre score
    final maxScore = _genreScores.values.fold<double>(
        0.0, (prev, e) => e > prev ? e : prev);

    // build scored list
    final entries = <MapEntry<Movie, double>>[];
    for (var m in movies) {
      final affinity = m.genreIds
          .fold<double>(0.0, (sum, g) => sum + (_genreScores[g] ?? 0));
      final norm = maxScore > 0 ? (affinity / maxScore) : 0.0;
      final finalScore = m.voteAverage * 0.7 + norm * 5.0 * 0.3;
      entries.add(MapEntry(m, finalScore));
    }

    entries.sort((a, b) => b.value.compareTo(a.value));
    // return only the Movie objects, in sorted order
    return entries.map((e) => e.key).toList();
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/movies/movie.dart ===

// lib/features/movies/movie.dart

class Movie {
  final int id;
  final String title;
  final String overview;
  final String posterPath;
  final String backdropPath;
  final double voteAverage;
  final String releaseDate;
  final List<int> genreIds;
  final String originalLanguage;
  final double popularity;

  Movie({
    required this.id,
    required this.title,
    required this.overview,
    required this.posterPath,
    required this.backdropPath,
    required this.voteAverage,
    required this.releaseDate,
    required this.genreIds,
    required this.originalLanguage,
    required this.popularity,
  });

  factory Movie.fromJson(Map<String, dynamic> json) {
    return Movie(
      id: json['id'] as int,
      title: json['title'] as String? ?? '',
      overview: json['overview'] as String? ?? '',
      posterPath: json['poster_path'] as String? ?? '',
      backdropPath: json['backdrop_path'] as String? ?? '',
      voteAverage: (json['vote_average'] as num).toDouble(),
      releaseDate: json['release_date'] as String? ?? '',
      genreIds: List<int>.from(json['genre_ids'] as List<dynamic>? ?? []),
      originalLanguage: json['original_language'] as String? ?? '',
      popularity: (json['popularity'] as num).toDouble(),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/movies/movie_service.dart ===

// lib/features/movies/movie_service.dart

import 'dart:convert';
import 'package:dio/dio.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'movie.dart';
import 'recommendation_service.dart'; // ← ensure this path matches your project

/// Internal isolate‐safe parser
List<Movie> _parseMovies(Map<String, dynamic> json) {
  final results = json['results'] as List<dynamic>? ?? [];
  return results
      .map((e) => Movie.fromJson(e as Map<String, dynamic>))
      .toList();
}

class MovieService {
  MovieService._() {
    final key = dotenv.env['TMDB_API_KEY']!;
    _dio = Dio(BaseOptions(
      baseUrl: 'https://api.themoviedb.org/3/',
      connectTimeout: const Duration(milliseconds: 5000),
      receiveTimeout: const Duration(milliseconds: 3000),
      queryParameters: {'api_key': key},
    ))
      ..interceptors.add(LogInterceptor(
        requestBody: true,
        responseBody: true,
        logPrint: (m) => debugPrint('[TMDB] $m'),
      ));
  }

  static final MovieService instance = MovieService._();

  late final Dio _dio;
  final Map<String, List<Movie>> _cache = {};

  Future<List<Movie>> fetchCategory({
    required String category,
    String language = 'en-US',
    int page = 1,
  }) async {
    final cacheKey = 'cat:$category|lang:$language|page:$page';
    if (_cache.containsKey(cacheKey)) return _cache[cacheKey]!;

    try {
      final resp = await _dio.get<Map<String, dynamic>>(
        'movie/$category',
        queryParameters: {'language': language, 'page': page},
      );
      final movies = await compute(_parseMovies, resp.data!);
      _cache[cacheKey] = movies;
      return movies;
    } on DioError catch (e) {
      throw Exception('TMDB error (${e.response?.statusCode}): ${e.message}');
    }
  }

  Future<List<Movie>> discoverByLanguage({
    required String origLanguage,
    int page = 1,
  }) async {
    final cacheKey = 'disc:lang:$origLanguage|page:$page';
    if (_cache.containsKey(cacheKey)) return _cache[cacheKey]!;

    try {
      final resp = await _dio.get<Map<String, dynamic>>(
        'discover/movie',
        queryParameters: {
          'with_original_language': origLanguage,
          'sort_by': 'popularity.desc',
          'page': page,
        },
      );
      final movies = await compute(_parseMovies, resp.data!);
      _cache[cacheKey] = movies;
      return movies;
    } on DioError catch (e) {
      throw Exception('TMDB discover error (${e.response?.statusCode}): ${e.message}');
    }
  }

  Future<List<Movie>> fetch({
    required String category,
    String? origLanguage,
    String language = 'en-US',
    int page = 1,
  }) async {
    List<Movie> movies;
    if (origLanguage == null) {
      movies = await fetchCategory(
        category: category,
        language: language,
        page: page,
      );
      if (category == 'popular') {
        movies = await RecommendationService.instance.personalize(movies);
      }
    } else {
      movies = await discoverByLanguage(origLanguage: origLanguage, page: page);
    }
    return movies;
  }

  void clearCache() => _cache.clear();
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/facts/fun_fact_challenge_widget.dart ===

// TODO Implement this library.

// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/login/login_screen.dart ===

import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import '../../../features/profile/auth_service.dart';
import '/l10n/app_localizations.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final TextEditingController _emailCtl = TextEditingController();
  final TextEditingController _passCtl = TextEditingController();
  String? _error;

  @override
  void dispose() {
    _emailCtl.dispose();
    _passCtl.dispose();
    super.dispose();
  }

  void _login() async {
    final msg = await AuthService().login(
      _emailCtl.text.trim(),
      _passCtl.text.trim(),
    );

    if (msg != null) {
      setState(() => _error = msg);
    } else {
      if (!mounted) return;
      context.go('/home');
    }
  }

  void _loginWithGoogle() async {
    final result = await AuthService().signInWithGoogle();
    if (!mounted) return;
    if (result != null) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(result)),
      );
    } else {
      context.go('/home');
    }
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;

    return Scaffold(
      appBar: AppBar(
        title: Text(loc.login),
        automaticallyImplyLeading: false,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => context.go('/home'),
        ),
      ),
      body: Padding(
        padding: const EdgeInsets.all(24),
        child: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              if (_error != null) ...[
                Text(
                  _localizedError(loc, _error!),
                  style: const TextStyle(color: Colors.red),
                ),
                const SizedBox(height: 16),
              ],
              TextField(
                controller: _emailCtl,
                decoration: InputDecoration(labelText: loc.email),
                keyboardType: TextInputType.emailAddress,
              ),
              const SizedBox(height: 12),
              TextField(
                controller: _passCtl,
                decoration: InputDecoration(labelText: loc.password),
                obscureText: true,
              ),
              const SizedBox(height: 24),
              ElevatedButton(
                onPressed: _login,
                style: ElevatedButton.styleFrom(minimumSize: const Size.fromHeight(50)),
                child: Text(loc.login),
              ),
              const SizedBox(height: 12),
              ElevatedButton.icon(
                icon: Image.asset('assets/google_logo.png', height: 24),
                label: const Text('Continue with Google'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.white,
                  foregroundColor: Colors.black87,
                  minimumSize: const Size.fromHeight(50),
                ),
                onPressed: _loginWithGoogle,
              ),
              const SizedBox(height: 12),
              Center(
                child: TextButton(
                  onPressed: () => context.go('/signup'),
                  child: Text(loc.createAccount),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  String _localizedError(AppLocalizations loc, String msg) {
    switch (msg) {
      case 'Invalid email or password.':
        return loc.invalidCredentials;
      case 'No account found. Please sign up first.':
        return loc.noAccountFound;
      case 'Account already exists. Please log in.':
        return loc.accountExists;
      default:
        return msg;
    }
  }
}

// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/onboarding/onboarding_screen.dart ===

import 'package:flutter/material.dart';
import 'package:lottie/lottie.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:go_router/go_router.dart';
import '/l10n/app_localizations.dart';
import '../../core/theme_provider.dart';
import '../../features/news/widgets/animated_background.dart';

class OnboardingScreen extends StatefulWidget {
  const OnboardingScreen({Key? key}) : super(key: key);

  @override
  State<OnboardingScreen> createState() => _OnboardingScreenState();
}

class _OnboardingScreenState extends State<OnboardingScreen> {
  final PageController _controller = PageController();
  int _currentIndex = 0;

  final List<_OnboardingPage> _pages = [
    _OnboardingPage(
      titleBuilder: (loc) => loc.bdNewsHub,
      descriptionBuilder: (loc) => loc.latest,
      animationAsset: 'assets/lottie/news.json',
    ),
    _OnboardingPage(
      titleBuilder: (loc) => loc.fastReliable ?? 'Fast & Reliable',
      descriptionBuilder: (loc) => loc.digitalTech,
      animationAsset: 'assets/lottie/rocket.json',
    ),
    _OnboardingPage(
      titleBuilder: (loc) => loc.personalizedExperience ?? 'Personalized Experience',
      descriptionBuilder: (loc) => loc.settings,
      animationAsset: 'assets/lottie/settings.json',
    ),
  ];

  Future<void> _completeOnboarding() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('onboardingCompleted', true);
    context.go('/login');
  }

  void _nextPage() {
    if (_currentIndex < _pages.length - 1) {
      _controller.nextPage(duration: const Duration(milliseconds: 400), curve: Curves.ease);
    } else {
      _completeOnboarding();
    }
  }

  void _skipToLast() {
    _controller.animateToPage(
      _pages.length - 1,
      duration: const Duration(milliseconds: 400),
      curve: Curves.ease,
    );
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final theme = Theme.of(context);
    final scheme = theme.colorScheme;

    return Scaffold(
      body: AnimatedBackground(
        overlayOpacity: 0.15,
        blurSigma: 30,
        child: SafeArea(
          child: Stack(
            children: [
              PageView.builder(
                controller: _controller,
                itemCount: _pages.length,
                onPageChanged: (index) => setState(() => _currentIndex = index),
                itemBuilder: (context, index) {
                  final page = _pages[index];
                  return Padding(
                    padding: const EdgeInsets.all(24),
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Image.asset('assets/app-icon.png', width: 96, height: 96),
                        const SizedBox(height: 24),
                        Expanded(
                          child: Lottie.asset(page.animationAsset, repeat: true),
                        ),
                        const SizedBox(height: 24),
                        Text(
                          page.titleBuilder(loc),
                          textAlign: TextAlign.center,
                          style: theme.textTheme.headlineSmall?.copyWith(
                            fontWeight: FontWeight.bold,
                            color: scheme.primary,
                          ),
                        ),
                        const SizedBox(height: 16),
                        Text(
                          page.descriptionBuilder(loc),
                          textAlign: TextAlign.center,
                          style: theme.textTheme.bodyLarge?.copyWith(color: scheme.onSurface.withOpacity(0.85)),
                        ),
                        const SizedBox(height: 32),
                      ],
                    ),
                  );
                },
              ),
              if (_currentIndex < _pages.length - 1)
                Positioned(
                  right: 16,
                  top: 16,
                  child: TextButton(
                    onPressed: _skipToLast,
                    child: Text(loc.close, style: theme.textTheme.bodyMedium?.copyWith(color: scheme.primary)),
                  ),
                ),
              Positioned(
                bottom: 24,
                left: 24,
                right: 24,
                child: Column(
                  children: [
                    Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: List.generate(
                        _pages.length,
                        (idx) {
                          final selected = idx == _currentIndex;
                          return AnimatedContainer(
                            duration: const Duration(milliseconds: 300),
                            margin: const EdgeInsets.symmetric(horizontal: 4),
                            width: selected ? 24 : 8,
                            height: 8,
                            decoration: BoxDecoration(
                              color: selected ? scheme.primary : scheme.onSurface.withOpacity(0.3),
                              borderRadius: BorderRadius.circular(6),
                            ),
                          );
                        },
                      ),
                    ),
                    const SizedBox(height: 16),
                    ElevatedButton(
                      onPressed: _nextPage,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: scheme.primary,
                        foregroundColor: scheme.onPrimary,
                        minimumSize: const Size.fromHeight(48),
                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                      ),
                      child: Text(_currentIndex == _pages.length - 1 ? loc.getStarted : loc.next),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class _OnboardingPage {
  final String Function(AppLocalizations) titleBuilder;
  final String Function(AppLocalizations) descriptionBuilder;
  final String animationAsset;

  const _OnboardingPage({
    required this.titleBuilder,
    required this.descriptionBuilder,
    required this.animationAsset,
  });
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/help/help_screen.dart ===

import 'package:flutter/material.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:go_router/go_router.dart';

class HelpScreen extends StatelessWidget {
  const HelpScreen({super.key});

  Future<void> _launchEmail() async {
    final Uri emailUri = Uri(
      scheme: 'mailto',
      path: 'support@dsmobiles.com',
      queryParameters: {'subject': 'Help & Support Inquiry'},
    );
    if (await canLaunchUrl(emailUri)) {
      await launchUrl(emailUri);
    }
  }

  Future<void> _launchWebsite() async {
    final Uri websiteUri = Uri.parse('https://www.dsmobiles.com');
    if (await canLaunchUrl(websiteUri)) {
      await launchUrl(websiteUri, mode: LaunchMode.externalApplication);
    }
  }

  Future<void> _launchRateUs() async {
    final Uri rateUri = Uri.parse('https://play.google.com/store/apps/details?id=com.example.app');
    if (await canLaunchUrl(rateUri)) {
      await launchUrl(rateUri, mode: LaunchMode.externalApplication);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Help & Support'),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => context.go('/home'),
        ),
      ),
      body: ListView(
        padding: const EdgeInsets.all(16),
        children: [
          const ListTile(
            leading: Icon(Icons.question_answer),
            title: Text('How to use BDNewspaper?'),
            subtitle: Text('Navigate news categories from the homepage.'),
          ),
          const ListTile(
            leading: Icon(Icons.lock),
            title: Text('Is my data secure?'),
            subtitle: Text('Yes, we respect your privacy and do not store personal data.'),
          ),
          const ListTile(
            leading: Icon(Icons.update),
            title: Text('How to get latest updates?'),
            subtitle: Text('Updates are pushed automatically via Play Store.'),
          ),
          const Divider(height: 32),
          ElevatedButton.icon(
            onPressed: _launchEmail,
            icon: const Icon(Icons.email_outlined),
            label: const Text('Email Support'),
            style: ElevatedButton.styleFrom(minimumSize: const Size.fromHeight(50)),
          ),
          const SizedBox(height: 16),
          OutlinedButton.icon(
            onPressed: _launchWebsite,
            icon: const Icon(Icons.language),
            label: const Text('Visit Website'),
            style: OutlinedButton.styleFrom(minimumSize: const Size.fromHeight(50)),
          ),
          const SizedBox(height: 16),
          OutlinedButton.icon(
            onPressed: _launchRateUs,
            icon: const Icon(Icons.star_rate_outlined),
            label: const Text('Rate Us'),
            style: OutlinedButton.styleFrom(minimumSize: const Size.fromHeight(50)),
          ),
        ],
      ),
    );
  }
}

// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/extras/extras_screen.dart ===

// lib/features/extras/extras_screen.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import '/core/theme.dart';
import '/core/theme_provider.dart';
import '/features/common/appBar.dart';
import '/widgets/app_drawer.dart';
import '../movies/movie_widget.dart' show FullScreenMoviePage;
import '../history/history_widget.dart';
import '../quiz/daily_quiz_widget.dart';


class ExtrasScreen extends StatelessWidget {
  const ExtrasScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final prov = context.watch<ThemeProvider>();
    final mode = prov.appThemeMode;
    final gradient = AppGradients.getGradientColors(mode);
    final start = gradient[0], end = gradient[1];
    final theme = Theme.of(context);

    return Scaffold(
      extendBodyBehindAppBar: true,
      backgroundColor: Colors.transparent,
      drawer: const AppDrawer(),
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        centerTitle: true,
        title: const AppBarTitle('Extras'),
        flexibleSpace: ClipRect(
          child: BackdropFilter(
            filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20),
            child: const SizedBox.expand(),
          ),
        ),
      ),
      body: Container(
        constraints: const BoxConstraints.expand(),
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [start.withOpacity(0.85), end.withOpacity(0.85)],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        child: SafeArea(
          child: SingleChildScrollView(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 24),
            child: Center(
              child: ConstrainedBox(
                constraints: const BoxConstraints(maxWidth: 400),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: [
                    _infoCard(
                      context: context,
                      icon: Icons.movie,
                      title: 'CineSpot',
                      subtitle: 'Tap to explore cinema',
                      gradient: const [Color(0xFF8E2DE2), Color(0xFF4A00E0)],
                      onTap: () => Navigator.of(context).push(
                        MaterialPageRoute(
                          fullscreenDialog: true,
                          builder: (_) => const FullScreenMoviePage(),
                        ),
                      ),
                    ),
                    const SizedBox(height: 24),
                    _infoCard(
                      context: context,
                      icon: Icons.history,
                      title: 'OnThisDay...',
                      subtitle: 'Events, Birthdays & Inventions',
                      gradient: const [Color(0xFFFC4A1A), Color(0xFFF7B733)],
                      onTap: () => Navigator.of(context).push(
                        MaterialPageRoute(
                          fullscreenDialog: true,
                          builder: (_) => const HistoryWidget(),
                        ),
                      ),
                    ),
                    const SizedBox(height: 24),
                    _infoCard(
                      context: context,
                      icon: Icons.quiz,
                      title: 'BrainBuzz',
                      subtitle: 'Trivia game, track streaks, earn badges!',
                      gradient: const [Color(0xFF36D1DC), Color(0xFF5B86E5)],
                      onTap: () => Navigator.of(context).push(
                        MaterialPageRoute(
                          fullscreenDialog: true,
                          builder: (_) => const DailyQuizWidget(),
                        ),
                      ),
                    ),
                    const SizedBox(height: 24),
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }

Widget _infoCard({
  required BuildContext context,
  required IconData icon,
  required String title,
  String? subtitle,
  required List<Color> gradient,
  required VoidCallback onTap,
}) {
  final prov = context.read<ThemeProvider>();
  final theme = Theme.of(context);
  final titleStyle = prov.floatingTextStyle(fontSize: 20);
  final subtitleStyle = prov.floatingTextStyle(
    fontSize: 14,
    fontWeight: FontWeight.normal,
    color: theme.textTheme.bodyMedium!.color!.withOpacity(0.7),
  );

  return GestureDetector(
    onTap: onTap,
    child: ClipRRect(
      borderRadius: BorderRadius.circular(24),
      child: BackdropFilter(
        filter: ImageFilter.blur(sigmaX: 18, sigmaY: 18),
        child: Container(
          height: 180,
          padding: const EdgeInsets.all(20),
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: [
                gradient[0].withOpacity(0.35),
                gradient[1].withOpacity(0.25),
              ],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
            borderRadius: BorderRadius.circular(24),
            border: Border.all(
              color: Colors.white.withOpacity(0.2),
              width: 1.4,
            ),
            boxShadow: [
              BoxShadow(
                color: gradient.last.withOpacity(0.3),
                blurRadius: 16,
                offset: const Offset(0, 6),
              ),
            ],
          ),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(icon, size: 48, color: Colors.white),
              const SizedBox(height: 14),
              Text(title, style: titleStyle),
              if (subtitle != null) ...[
                const SizedBox(height: 6),
                Text(subtitle, style: subtitleStyle, textAlign: TextAlign.center),
              ],
            ],
          ),
        ),
      ),
    ),
  );
}
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/firebase_options.dart ===

// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'AIzaSyDHaDNvv-pLn4NYcpS139J2Bv6r2VQDA-g',
    appId: '1:92831175770:web:c9f2352eb095beec93f463',
    messagingSenderId: '92831175770',
    projectId: 'droid-e9db9',
    authDomain: 'droid-e9db9.firebaseapp.com',
    storageBucket: 'droid-e9db9.firebasestorage.app',
    measurementId: 'G-LKZEDMNFX6',
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyCeSxbjb0TIYG0kWuLMm-j7TdbZ0nXt8go',
    appId: '1:92831175770:android:40fc17be01d7222293f463',
    messagingSenderId: '92831175770',
    projectId: 'droid-e9db9',
    storageBucket: 'droid-e9db9.firebasestorage.app',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIzaSyA0Vsaayr2jDfB_FEyHQ7PCJ30A51WUsc8',
    appId: '1:92831175770:ios:b69407f94ea150b993f463',
    messagingSenderId: '92831175770',
    projectId: 'droid-e9db9',
    storageBucket: 'droid-e9db9.firebasestorage.app',
    iosBundleId: 'com.example.droid',
  );

  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: 'AIzaSyA0Vsaayr2jDfB_FEyHQ7PCJ30A51WUsc8',
    appId: '1:92831175770:ios:b69407f94ea150b993f463',
    messagingSenderId: '92831175770',
    projectId: 'droid-e9db9',
    storageBucket: 'droid-e9db9.firebasestorage.app',
    iosBundleId: 'com.example.droid',
  );
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/main.dart ===

import 'package:flutter/material.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:go_router/go_router.dart';
import 'core/app_paths.dart';
import 'core/routes.dart';
import 'core/splash_service.dart';
import 'core/env_keys.dart';
import 'core/theme.dart';
import 'core/theme_provider.dart';
import 'core/language_provider.dart';
import 'l10n/app_localizations.dart';
import 'package:provider/provider.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:firebase_core/firebase_core.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await dotenv.load(fileName: '.env');
  await Firebase.initializeApp();

  final prefs = await SharedPreferences.getInstance();
  final initialRoute = await SplashService(prefs: prefs).resolveInitialRoute();

  runApp(MyApp(initialRoute: initialRoute));
}

class MyApp extends StatelessWidget {
  final String initialRoute;
  const MyApp({Key? key, required this.initialRoute}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final router = AppRouter.createRouter(initialLocation: initialRoute);
    return MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => ThemeProvider()),
        ChangeNotifierProvider(create: (_) => LanguageProvider()),
      ],
      child: Consumer2<ThemeProvider, LanguageProvider>(
        builder: (context, themeProv, langProv, _) {
          return MaterialApp.router(
            title: 'BDNewsHub',
            debugShowCheckedModeBanner: false,
            theme: AppTheme.buildLightTheme(),
            darkTheme: AppTheme.buildDarkTheme(),
            themeMode: themeProv.themeMode,
            locale: langProv.locale,
            supportedLocales: const [Locale('en'), Locale('bn')],
            localizationsDelegates: const [
              AppLocalizations.delegate,
              GlobalMaterialLocalizations.delegate,
              GlobalWidgetsLocalizations.delegate,
              GlobalCupertinoLocalizations.delegate,
            ],
            routerConfig: router,
          );
        },
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/main_navigation_screen.dart ===

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import 'features/home/home_screen.dart';
import 'features/news/newspaper_screen.dart';
import 'features/magazine/magazine_screen.dart';
import 'features/settings/settings_screen.dart';
import 'features/extras/extras_screen.dart';
import 'l10n/app_localizations.dart';
import 'core/theme_provider.dart';

class MainNavigationScreen extends StatefulWidget {
  final int selectedTab;
  const MainNavigationScreen({Key? key, this.selectedTab = 0}) : super(key: key);

  @override
  State<MainNavigationScreen> createState() => _MainNavigationScreenState();
}

class _MainNavigationScreenState extends State<MainNavigationScreen> {
  late int _currentIndex;
  late final List<Widget> _tabs;

  final List<String> _iconNames = [
    'home',
    'newspapers',
    'magazines',
    'settings',
    'Extras',
  ];

  @override
  void initState() {
    super.initState();
    _currentIndex = widget.selectedTab;
    _tabs = const [
      HomeScreen(),
      NewspaperScreen(),
      MagazineScreen(),
      SettingsScreen(),
      ExtrasScreen(),
    ];
  }

  void _onItemTapped(int index) {
    setState(() => _currentIndex = index);
  }

  @override
  Widget build(BuildContext context) {
    final themeProv = context.watch<ThemeProvider>();
    final mode = themeProv.appThemeMode;
    final loc = AppLocalizations.of(context)!;
    final cs = Theme.of(context).colorScheme;

    final labels = [
      loc.home,
      loc.newspapers,
      loc.magazines,
      loc.settings,
      'Extras',
    ];

    final Gradient activeGradient = LinearGradient(
      begin: Alignment.topLeft,
      end: Alignment.bottomRight,
      colors: [cs.primary, cs.secondary],
    );

    final Gradient inactiveGradient = LinearGradient(
      begin: Alignment.topLeft,
      end: Alignment.bottomRight,
      colors: [
        mode == AppThemeMode.dark ? Colors.white24 : Colors.black12,
        mode == AppThemeMode.dark ? Colors.white10 : Colors.black12,
      ],
    );

    String themeSuffix;
    switch (mode) {
      case AppThemeMode.dark:
        themeSuffix = 'dark';
        break;
      case AppThemeMode.bangladesh:
        themeSuffix = 'desh';
        break;
      default:
        themeSuffix = 'light';
    }

    return Scaffold(
      body: IndexedStack(
        index: _currentIndex,
        children: _tabs,
      ),
      bottomNavigationBar: ClipRRect(
        borderRadius: const BorderRadius.only(
          topLeft: Radius.circular(24),
          topRight: Radius.circular(24),
        ),
        child: BackdropFilter(
          filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20),
          child: Container(
            padding: const EdgeInsets.symmetric(vertical: 8),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: mode == AppThemeMode.dark
                    ? [Colors.black.withOpacity(0.6), Colors.grey.shade900.withOpacity(0.5)]
                    : [cs.background.withOpacity(0.8), cs.surface.withOpacity(0.6)],
              ),
              border: Border.all(color: Colors.white24, width: 1),
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: List.generate(_tabs.length, (i) {
                final selected = i == _currentIndex;
                final String assetPath = 'assets/icons/${_iconNames[i]}_$themeSuffix.png';
                return GestureDetector(
                  onTap: () => _onItemTapped(i),
                  child: _buildNavIcon(
                    assetPath: assetPath,
                    label: labels[i],
                    selected: selected,
                    activeGradient: activeGradient,
                    inactiveGradient: inactiveGradient,
                  ),
                );
              }),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildNavIcon({
    required String assetPath,
    required String label,
    required bool selected,
    required Gradient activeGradient,
    required Gradient inactiveGradient,
  }) {
    final double size = selected ? 60 : 60;
    final double iconSize = size;
    final Color shadowColor =
        selected ? activeGradient.colors.first.withOpacity(0.4) : Colors.black26;
    const FontWeight labelWeight = FontWeight.bold;
    const double labelSize = 14;

    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        AnimatedContainer(
          duration: const Duration(milliseconds: 300),
          width: size,
          height: size,
          decoration: BoxDecoration(
            shape: BoxShape.circle,
            gradient: selected ? activeGradient : inactiveGradient,
            boxShadow: selected
                ? [
                    BoxShadow(
                      color: shadowColor,
                      blurRadius: 14,
                      offset: const Offset(0, 6),
                    ),
                  ]
                : null,
          ),
          child: Center(
            child: Image.asset(
              assetPath,
              width: iconSize,
              height: iconSize,
              fit: BoxFit.contain,
            ),
          ),
        ),
        const SizedBox(height: 4),
        Text(
          label,
          style: TextStyle(
            fontSize: labelSize,
            fontWeight: labelWeight,
            color: selected ? Colors.white : Colors.white70,
          ),
        ),
      ],
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/data/models/news_article.g.dart ===

// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'combined_dart_code.txt';

// **************************************************************************
// TypeAdapterGenerator
// **************************************************************************

class NewsArticleAdapter extends TypeAdapter<NewsArticle> {
  @override
  final int typeId = 0;

  @override
  NewsArticle read(BinaryReader reader) {
    final numOfFields = reader.readByte();
    final fields = <int, dynamic>{
      for (int i = 0; i < numOfFields; i++) reader.readByte(): reader.read(),
    };
    return NewsArticle(
      title: fields[0] as String,
      description: fields[1] as String,
      url: fields[2] as String,
      source: fields[3] as String,
      imageUrl: fields[4] as String?,
      language: fields[5] as String,
      snippet: fields[6] as String,
      fullContent: fields[7] as String,
      publishedAt: fields[8] as DateTime,
      isLive: fields[9] as bool,
      sourceOverride: fields[10] as String?,
      sourceLogo: fields[11] as String?,
      fromCache: fields[12] as bool, // ✅ added fromCache
    );
  }

  @override
  void write(BinaryWriter writer, NewsArticle obj) {
    writer
      ..writeByte(13) // ✅ total number of fields now
      ..writeByte(0)
      ..write(obj.title)
      ..writeByte(1)
      ..write(obj.description)
      ..writeByte(2)
      ..write(obj.url)
      ..writeByte(3)
      ..write(obj.source)
      ..writeByte(4)
      ..write(obj.imageUrl)
      ..writeByte(5)
      ..write(obj.language)
      ..writeByte(6)
      ..write(obj.snippet)
      ..writeByte(7)
      ..write(obj.fullContent)
      ..writeByte(8)
      ..write(obj.publishedAt)
      ..writeByte(9)
      ..write(obj.isLive)
      ..writeByte(10)
      ..write(obj.sourceOverride)
      ..writeByte(11)
      ..write(obj.sourceLogo)
      ..writeByte(12)
      ..write(obj.fromCache); // ✅ write fromCache
  }

  @override
  int get hashCode => typeId.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is NewsArticleAdapter &&
          runtimeType == other.runtimeType &&
          typeId == other.typeId;
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/data/models/news_article.dart ===

import 'package:hive/hive.dart';
import 'package:webfeed_revised/webfeed_revised.dart';

part 'news_article.g.dart';

@HiveType(typeId: 0)
class NewsArticle extends HiveObject {
  @HiveField(0)
  final String title;

  @HiveField(1)
  final String description;

  @HiveField(2)
  final String url;

  @HiveField(3)
  final String source;

  @HiveField(4)
  final String? imageUrl;

  @HiveField(5)
  final String language;

  @HiveField(6)
  final String snippet;

  @HiveField(7)
  final String fullContent;

  @HiveField(8)
  final DateTime publishedAt;

  @HiveField(9)
  final bool isLive;

  @HiveField(10)
  String? sourceOverride;

  @HiveField(11)
  String? sourceLogo;

  @HiveField(12)
  bool fromCache; // ✅ Add cache flag

  NewsArticle({
    required this.title,
    this.description = '',
    required this.url,
    required this.source,
    this.imageUrl,
    this.language = 'en',
    this.snippet = '',
    this.fullContent = '',
    required this.publishedAt,
    this.isLive = false,
    this.sourceOverride,
    this.sourceLogo,
    this.fromCache = false, // ✅ default false
  });

  factory NewsArticle.fromRssItem(RssItem item) {
    final mediaUrl = item.media?.thumbnails?.firstOrNull?.url ??
        item.media?.contents?.firstOrNull?.url ??
        _extractImageFromEnclosure(item) ??
        _extractImageFromHtml(item.content?.value ?? item.description ?? '');

    return NewsArticle(
      title: item.title ?? '',
      description: item.description ?? '',
      url: item.link ?? '',
      source: item.source?.value ?? '',
      imageUrl: mediaUrl,
      language: item.dc?.language ?? 'en',
      publishedAt: item.pubDate ?? DateTime.now(),
    );
  }

  factory NewsArticle.fromMap(Map<String, dynamic> map) => NewsArticle(
        title: map['title'] ?? '',
        description: map['description'] ?? '',
        url: map['url'] ?? '',
        source: map['source'] ?? '',
        imageUrl: map['imageUrl'],
        language: map['language'] ?? 'en',
        snippet: map['snippet'] ?? '',
        fullContent: map['fullContent'] ?? '',
        publishedAt: DateTime.tryParse(map['publishedAt'] ?? '') ?? DateTime.now(),
        isLive: map['isLive'] ?? false,
        sourceOverride: map['sourceOverride'],
        sourceLogo: map['sourceLogo'],
        fromCache: map['fromCache'] ?? false, // ✅ support map
      );

  Map<String, dynamic> toMap() => {
        'title': title,
        'description': description,
        'url': url,
        'source': source,
        'imageUrl': imageUrl,
        'language': language,
        'snippet': snippet,
        'fullContent': fullContent,
        'publishedAt': publishedAt.toIso8601String(),
        'isLive': isLive,
        'sourceOverride': sourceOverride,
        'sourceLogo': sourceLogo,
        'fromCache': fromCache, // ✅ include in export
      };

  static String? _extractImageFromEnclosure(RssItem item) {
    final url = item.enclosure?.url ?? '';
    return (url.endsWith('.jpg') || url.endsWith('.png')) ? url : null;
  }

  static String? _extractImageFromHtml(String html) {
    final RegExp imgTag = RegExp(r'<img[^>]+src="([^">]+)"');
    final match = imgTag.firstMatch(html);
    return match?.group(1);
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/data/services/news_service.dart ===

import '../models/news_article.dart';

class NewsService {
  // Example base URL for API, adjust if needed
  static const String _baseUrl = "https://api.yournewsprovider.com";

  Future<List<NewsArticle>> fetchLatestNews() async {
    return _fetchNewsByCategory('latest');
  }

  Future<List<NewsArticle>> fetchNationalNews() async {
    return _fetchNewsByCategory('national');
  }

  Future<List<NewsArticle>> fetchTrendingNews() async {
    return _fetchNewsByCategory('trending');
  }

  Future<List<NewsArticle>> fetchTechNews() async {
    return _fetchNewsByCategory('technology');
  }

  Future<List<NewsArticle>> fetchSportsNews() async {
    return _fetchNewsByCategory('sports');
  }

  Future<List<NewsArticle>> fetchEntertainmentNews() async {
    return _fetchNewsByCategory('entertainment');
  }

  Future<List<NewsArticle>> fetchHealthNews() async {
    return _fetchNewsByCategory('health');
  }

  // 🔥 Private helper method
  Future<List<NewsArticle>> _fetchNewsByCategory(String category) async {
    try {
      // TODO: Replace this with actual HTTP call using package:http or Dio
      await Future.delayed(Duration(milliseconds: 500)); // Simulate network delay

      // For now returning dummy list
      return <NewsArticle>[
  NewsArticle(
    title: 'Sample $category News Title',
    description: 'This is a sample description for $category news.',
    url: 'https://example.com/sample-$category-news',
    source: 'BD News Hub', // 👈 FIX: Add source here
    imageUrl: 'https://via.placeholder.com/150',
    publishedAt: DateTime.now(),
  ),
];
;
    } catch (e) {
      print('Error fetching $category news: $e');
      return []; // Return empty list on error
    }
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/data/services/hive_service.dart ===

// lib/data/services/hive_service.dart

import 'package:hive/hive.dart';
import 'package:hive_flutter/hive_flutter.dart';
import '../models/news_article.dart';

class HiveService {
  HiveService._();

  /// How long before cached articles expire.
  static const Duration cacheDuration = Duration(minutes: 30);

  /// Initialize Hive & open one articles‐box and one meta‐box per category.
  /// 
  /// Pass in exactly the list of category keys you're using (e.g. from
  /// your RSS service). Hive will register the adapter (once) and open
  /// two boxes for each category.
  static Future<void> init(List<String> categories) async {
    await Hive.initFlutter();

    // Register the adapter if not already done
    final adapterId = NewsArticleAdapter().typeId;
    if (!Hive.isAdapterRegistered(adapterId)) {
      Hive.registerAdapter(NewsArticleAdapter());
    }

    // Open a box for each category and its metadata
    for (final cat in categories) {
      final boxName = _boxName(cat);
      final metaName = _metaName(cat);

      if (!Hive.isBoxOpen(boxName)) {
        await Hive.openBox<NewsArticle>(boxName);
      }
      if (!Hive.isBoxOpen(metaName)) {
        // meta box holds a String under 'lastSaved'
        await Hive.openBox<String>(metaName);
      }
    }
  }

  static String _boxName(String category) => 'news_$category';
  static String _metaName(String category) => 'news_${category}_meta';

  static Box<NewsArticle> _articleBox(String category) =>
      Hive.box<NewsArticle>(_boxName(category));
  static Box<String> _metaBox(String category) =>
      Hive.box<String>(_metaName(category));

  /// Persist the list of articles, then stamp the time.
  static Future<void> saveArticles(
    String category,
    List<NewsArticle> articles,
  ) async {
    final box = _articleBox(category);
    await box.clear();
    for (final a in articles) {
      await box.put(a.url, a);
    }
    await _metaBox(category).put(
      'lastSaved',
      DateTime.now().toIso8601String(),
    );
  }

  /// Read back cached articles, marking them from cache.
  static List<NewsArticle> getArticles(String category) {
    return _articleBox(category)
        .values
        .map((a) => a..fromCache = true)
        .toList();
  }

  /// True if no saved timestamp or older than [cacheDuration].
  static bool isExpired(String category) {
    final savedStr = _metaBox(category).get('lastSaved');
    if (savedStr == null) return true;
    final saved = DateTime.tryParse(savedStr);
    if (saved == null) return true;
    return DateTime.now().difference(saved) > cacheDuration;
  }

  /// True if there are *any* cached articles.
  static bool hasArticles(String category) =>
      _articleBox(category).isNotEmpty;
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/data/services/rss_service.dart ===

// lib/data/services/rss_service.dart

import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:webfeed_revised/webfeed_revised.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';

import '../../core/env_keys.dart';
import '../models/news_article.dart';

class RssService {
  RssService._();

  static const _cacheDuration = Duration(minutes: 30);
  static const _cacheKeyPrefix = 'newsapi_cache';

  static final FlutterLocalNotificationsPlugin _notificationsPlugin =
      FlutterLocalNotificationsPlugin();

  /// Initialize once at app startup
  static Future<void> initializeNotifications() async {
    const androidInit = AndroidInitializationSettings('@mipmap/ic_launcher');
    const initSettings = InitializationSettings(android: androidInit);
    await _notificationsPlugin.initialize(initSettings);
  }

  /// Our four supported categories
  static const List<String> categories = [
    'latest',
    'national',
    'international',
    'education',
  ];

  /// A small fallback of RSS feeds, keyed by category.
  static const Map<String, List<Map<String,String>>> _rssFallback = {
    'latest': [
       {'name': 'প্রথম আলো', 'url': 'https://www.prothomalo.com/feed'},
       {'name': 'বিডিনিউজ২৪ ইংরেজি', 'url':'https://bdnews24.com/en/rss/en/latest/rss.xml'},
      {'name': 'সমকাল', 'url': 'https://samakal.com/feed'},
      {'name': 'বাংলাদেশ প্রতিদিন', 'url': 'https://www.bd-pratidin.com/rss.xml'},
      {'name': 'মানবজমিন', 'url': 'https://mzamin.com/rss.php'},
      {'name': 'আমাদের সময়', 'url': 'https://www.amadershomoy.com/rss.xml'},
      {'name': 'ইনকিলাব', 'url': 'https://www.dailyinqilab.com/rss.xml'},
      {'name': 'জাগো নিউজ ২৪', 'url': 'https://www.jagonews24.com/rss/rss.xml'},
      {'name': 'বাংলানিউজ২৪', 'url': 'https://www.banglanews24.com/rss/rss.xml'},
      {'name': 'ঢাকা পোস্ট', 'url': 'https://www.dhakapost.com/feed'},
      {'name': 'ইত্তেফাক', 'url': 'https://www.ittefaq.com.bd/feed'},
      {'name': 'কালের কণ্ঠ', 'url': 'https://www.kalerkantho.com/rss.xml'},
      {'name': 'বাংলাদেশ প্রতিদিন-জাতীয়', 'url': 'https://www.bd-pratidin.com/national/rss'},
      {'name': 'নয়া দিগন্ত-রাজনীতি', 'url': 'https://www.dailynayadiganta.com/politics/rss'},
      {'name':'বিবিসি-বাংলা','url': 'https://feeds.bbci.co.uk/bengali/bangladesh/rss.xml'},

    ],
    'national': [
      {'name': 'বাংলাদেশ প্রতিদিন-জাতীয়', 'url': 'https://www.bd-pratidin.com/national/rss'},
      {'name':'Cricbuzz BD','url':'https://www.cricbuzz.com/rss/BD.xml'},
      {'name': 'ক্রিকেটবাংলা', 'url': 'https://cricketbangla.com/feed/'},
      {'name': 'বিডিনিউজ২৪-ক্রীড়া', 'url': 'https://bangla.bdnews24.com/category/sport/feed/'},
      {'name':'বিবিসি-বাংলা','url': 'https://feeds.bbci.co.uk/bengali/bangladesh/rss.xml'},
      {'name': 'প্রথম আলো',    'url': 'https://www.prothomalo.com/feed'},
      {'name': 'ESPN CricInfo',  'url': 'https://www.espncricinfo.com/rss/content/story/feeds/0.xml'},
    ],
    'international': [
      {'name':'BBC World','url':'http://feeds.bbci.co.uk/news/world/rss.xml'},
      {'name':'DW News','url':'https://rss.dw.com/rdf/rss-en-all'},
      {'name':'বিবিসি-বাংলা বিশ্ব (World)','url': 'https://feeds.bbci.co.uk/bengali/world/rss.xml'},
    ],
    'education': [
      {'name':'EdTech Review','url':'https://edtechreview.in/feed'},
       {'name': 'শিক্ষা অধিদপ্তর', 'url': 'https://www.dshe.gov.bd/bn/feed'},
      {'name': 'ক্যাম্পাস টাইমস', 'url': 'https://www.campustimesbd.com/feed/'},
      {'name':'বিবিসি-বাংলা বিনোদন (Entertainment) ','url': 'https://feeds.bbci.co.uk/bengali/entertainment/rss.xml'},
    ],
  };

  /// Entry point: fetch for a given category & locale
  static Future<List<NewsArticle>> fetchNews({
    required String category,
    required Locale locale,
    BuildContext? context,
  }) async {
    assert(categories.contains(category),
        'Unsupported category: $category');

    // 1️⃣ Try NewsAPI
    final apiResults = await _fetchFromNewsApi(
      category: category,
      locale: locale,
      context: context,
    );
    if (apiResults.isNotEmpty) return apiResults;

    // 2️⃣ Fallback to RSS if empty
    final rssSources = _rssFallback[category]!;
    return _fetchFromRss(rssSources, context: context);
  }

  /// NewsAPI with caching
 static Future<List<NewsArticle>> _fetchFromNewsApi({
  required String category,
  required Locale locale,
  BuildContext? context,
}) async {
  final apiKey = EnvService.newsApiKey;
  final prefs = await SharedPreferences.getInstance();
  final now = DateTime.now();

  // Build a simple cache key per category+lang
  final lang = locale.languageCode;
  final cacheKey = '$_cacheKeyPrefix:$category:$lang';
  final cacheTimeKey = '$cacheKey:time';

  // Check cache
  final raw = prefs.getString(cacheKey);
  final rawTime = prefs.getString(cacheTimeKey);
  if (raw != null && rawTime != null) {
    final saved = DateTime.tryParse(rawTime);
    if (false) {
      final list = jsonDecode(raw) as List<dynamic>;
      return list
          .map((m) => NewsArticle.fromMap(m as Map<String, dynamic>))
          .toList();
    }
  }

  // Build NewsAPI query
  final isTopHeadlines = category == 'latest' || category == 'sports';
  final endpoint = isTopHeadlines ? 'top-headlines' : 'everything';
  final params = <String, String>{
    'apiKey': apiKey,
    'language': lang,
    if (isTopHeadlines && category == 'sports') 'category': 'sports',
    if (isTopHeadlines && category == 'latest') 'country': 'bd',
    if (!isTopHeadlines && category == 'international') 'q': 'international OR world',
    if (!isTopHeadlines && category == 'education') 'q': 'education OR শিক্ষা',
    'pageSize': '30',
  };

  final uri = Uri.https('newsapi.org', '/v2/$endpoint', params);

  // 👇 Add this to log the final request URL
  print('[DEBUG] Fetching NewsAPI URL: $uri');

  try {
    final res = await http.get(uri).timeout(const Duration(seconds: 10));
    if (res.statusCode == 200) {
      final body = jsonDecode(res.body) as Map<String, dynamic>;
      final rawArticles = (body['articles'] as List<dynamic>? ?? []);
      final articles = rawArticles
          .map((j) => NewsArticle.fromMap(j as Map<String, dynamic>))
          .where((a) => a.title.isNotEmpty)
          .toList();

      // Cache them
      await prefs.setString(cacheKey, jsonEncode(articles.map((a) => a.toMap()).toList()));
      await prefs.setString(cacheTimeKey, now.toIso8601String());

      // Precache images
      if (context != null) {
        for (final a in articles) {
          if (a.imageUrl?.isNotEmpty == true) {
            precacheImage(NetworkImage(a.imageUrl!), context);
          }
        }
      }

      return articles;
    }
  } catch (_) {
    // fail silently to fallback
  }
  return [];
}
/// Pure RSS fetch + dedupe
  static Future<List<NewsArticle>> _fetchFromRss(
    List<Map<String,String>> sources, {
    BuildContext? context,
  }) async {
    final client = http.Client();
    final all = <NewsArticle>[];
    try {
      final results = await Future.wait(sources.map((s){
        return _parseRss(client, s['url']!, s['name'], context);
      }));
      for (var l in results) all.addAll(l);
    } finally {
      client.close();
    }
    final seen = <String>{};
    return all.where((a) => seen.add(a.url)).toList();
  }

  static Future<List<NewsArticle>> _parseRss(
    http.Client client,
    String url,
    String? sourceName,
    BuildContext? context, {
    int retries=2,
  }) async {
    try {
      final res = await client.get(Uri.parse(url)).timeout(const Duration(seconds:15));
      if (res.statusCode!=200 && retries>0) {
        await Future.delayed(const Duration(seconds:2));
        return _parseRss(client,url,sourceName,context,retries:retries-1);
      }
      if (res.statusCode!=200) return [];

      final ct = res.headers['content-type'];
      final charset = ct?.split('charset=').last ?? 'utf-8';
      final body = Encoding.getByName(charset)!.decode(res.bodyBytes);

      final feed = RssFeed.parse(body);
      final items = feed.items
              ?.map(NewsArticle.fromRssItem)
              .where((a)=>a.title.isNotEmpty)
              .toList() ?? [];

      if (context!=null) {
        for (final a in items) {
          if (a.imageUrl?.isNotEmpty==true) {
            precacheImage(NetworkImage(a.imageUrl!), context);
          }
        }
      }
      if (sourceName!=null) {
        for (final a in items) a.sourceOverride = sourceName;
      }
      return items;
    } catch (_) {
      if (retries>0) {
        await Future.delayed(const Duration(seconds:2));
        return _parseRss(client,url,sourceName,context,retries:retries-1);
      }
      return [];
    }
  }

  /// Desktop notifications for new RSS‐only stories
  static Future<void> pollFeedsAndNotify(Locale locale) async {
    final prefs = await SharedPreferences.getInstance();
    final seen = prefs.getStringList('seenArticles') ?? [];
    final sources = _rssFallback['latest']!;
    final fresh = await _fetchFromRss(sources);
    for (final a in fresh) {
      if (!seen.contains(a.url)) {
        await _showNotification(a.title);
        seen.add(a.url);
      }
    }
    await prefs.setStringList('seenArticles', seen);
  }

  static Future<void> _showNotification(String title) async {
    const android = AndroidNotificationDetails(
      'rss_channel','RSS Updates',
      channelDescription:'New fallback RSS story',
      importance:Importance.max,priority:Priority.high
    );
    const pd = NotificationDetails(android:android);
    await _notificationsPlugin.show(
      DateTime.now().millisecondsSinceEpoch ~/1000,
      '📰 নতুন সংবাদ',
      title,
      pd,
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/data/services/iap_helper.dart ===

// File: lib/services/iap_helper.dart

import 'package:flutter/foundation.dart';
import 'package:purchases_flutter/purchases_flutter.dart';

class IAPHelper {
  static final IAPHelper _instance = IAPHelper._internal();
  factory IAPHelper() => _instance;
  IAPHelper._internal();

  Future<void> initRevenueCat(String apiKey) async {
    await Purchases.configure(PurchasesConfiguration(apiKey));
    if (kDebugMode) print('RevenueCat configured');
  }

  Future<List<Package>> getAvailablePackages() async {
    try {
      final offerings = await Purchases.getOfferings();
      return offerings.current?.availablePackages ?? [];
    } catch (e) {
      if (kDebugMode) print('Error getting offerings: \$e');
      return [];
    }
  }

  Future<bool> purchaseRemoveAds() async {
    try {
      final packages = await getAvailablePackages();
      if (packages.isEmpty) return false;

      final purchaserInfo = await Purchases.purchasePackage(packages.first);
      final entitlement = purchaserInfo.entitlements.all['remove_ads'];

      return entitlement?.isActive ?? false;
    } catch (e) {
      if (kDebugMode) print('Purchase error: \$e');
      return false;
    }
  }

  Future<bool> isUserPremium() async {
    try {
      final purchaserInfo = await Purchases.getCustomerInfo();
      final entitlement = purchaserInfo.entitlements.all['remove_ads'];
      return entitlement?.isActive ?? false;
    } catch (e) {
      if (kDebugMode) print('Check premium error: \$e');
      return false;
    }
  }

  Future<void> restorePurchases() async {
    try {
      await Purchases.restorePurchases();
      if (kDebugMode) print('Restored purchases');
    } catch (e) {
      if (kDebugMode) print('Restore error: \$e');
    }
  }
}

// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/widgets/fade_transition_wrapper.dart ===

// lib/widgets/fade_transition_wrapper.dart

import 'dart:ui';
import 'package:flutter/material.dart';

/// A page route that “crystalizes” the transition:
/// 1) Blurs the old page behind a frosted overlay.
/// 2) Fades and gently scales in the new page.
class FadeTransitionWrapper extends PageRouteBuilder {
  FadeTransitionWrapper({required this.child})
      : super(
          transitionDuration: const Duration(milliseconds: 800),
          reverseTransitionDuration: const Duration(milliseconds: 500),
          pageBuilder: (
            BuildContext context,
            Animation<double> animation,
            Animation<double> secondaryAnimation,
          ) =>
              child,
          transitionsBuilder: (
            BuildContext context,
            Animation<double> animation,
            Animation<double> secondaryAnimation,
            Widget child,
          ) {
            // 1) Frosted blur overlay on the old page:
            final blur = Tween<double>(begin: 0, end: 8).animate(
              CurvedAnimation(parent: animation, curve: const Interval(0, 0.5)),
            );
            final frostOpacity = Tween<double>(begin: 0, end: 0.1).animate(
              CurvedAnimation(parent: animation, curve: const Interval(0, 0.5)),
            );

            // 2) Fade and scale the incoming page:
            final fade = CurvedAnimation(parent: animation, curve: Curves.easeInOut);
            final scale = Tween<double>(begin: 0.95, end: 1.0).animate(
              CurvedAnimation(parent: animation, curve: Curves.easeOutBack),
            );

            return Stack(
              fit: StackFit.expand,
              children: [
                // The old page is still in the background; we just blur+frost it.
                BackdropFilter(
                  filter: ImageFilter.blur(sigmaX: blur.value, sigmaY: blur.value),
                  child: Container(color: Colors.white.withOpacity(frostOpacity.value)),
                ),

                // Then bring in the new child with fade+scale:
                FadeTransition(
                  opacity: fade,
                  child: ScaleTransition(
                    scale: scale,
                    alignment: Alignment.center,
                    child: child,
                  ),
                ),
              ],
            );
          },
        );

  final Widget child;
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/widgets/news_list_widget.dart ===

import 'package:flutter/material.dart';
import 'package:cached_network_image/cached_network_image.dart';
import '../../data/models/news_article.dart';

class NewsListWidget extends StatelessWidget {
  final List<NewsArticle> articles;
  final void Function(NewsArticle) onTap;

  const NewsListWidget({Key? key, required this.articles, required this.onTap}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    if (articles.isEmpty) {
      return const Center(
        child: Text('No articles available.', style: TextStyle(color: Colors.grey)),
      );
    }

    return RefreshIndicator(
      onRefresh: () async {
        // TODO: hook this to refresh logic
      },
      child: ListView.separated(
        itemCount: articles.length,
        physics: const AlwaysScrollableScrollPhysics(),
        padding: const EdgeInsets.symmetric(vertical: 12),
        separatorBuilder: (_, __) => const Divider(height: 0),
        itemBuilder: (context, index) {
          final article = articles[index];
          final isCached = article.fromCache;
          final isFresh = DateTime.now().difference(article.publishedAt).inMinutes < 30;

          return ListTile(
            contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
            leading: ClipRRect(
              borderRadius: BorderRadius.circular(10),
              child: CachedNetworkImage(
                imageUrl: article.imageUrl ?? '',
                placeholder: (context, url) => const SizedBox(
                  width: 56,
                  height: 56,
                  child: Center(child: CircularProgressIndicator(strokeWidth: 2)),
                ),
                errorWidget: (context, url, error) => Container(
                  width: 56,
                  height: 56,
                  color: Colors.grey[200],
                  alignment: Alignment.center,
                  child: const Icon(Icons.broken_image, size: 24),
                ),
                width: 56,
                height: 56,
                fit: BoxFit.cover,
              ),
            ),
            title: Text(
              article.title,
              maxLines: 2,
              overflow: TextOverflow.ellipsis,
              style: const TextStyle(fontWeight: FontWeight.bold),
            ),
            subtitle: Row(
              children: [
                Expanded(
                  child: Text(
                    article.sourceOverride ?? article.source,
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                    style: const TextStyle(color: Colors.grey),
                  ),
                ),
                if (isFresh)
                  _badge('NEW', Colors.blueAccent)
                else if (isCached)
                  _badge('CACHED', Colors.grey),
              ],
            ),
            onTap: () => onTap(article),
          );
        },
      ),
    );
  }

  Widget _badge(String label, Color color) {
    return Container(
      margin: const EdgeInsets.only(left: 8),
      padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
      decoration: BoxDecoration(
        color: color.withOpacity(0.9),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Text(
        label,
        style: const TextStyle(color: Colors.white, fontSize: 10, fontWeight: FontWeight.bold),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/widgets/app_drawer.dart ===

import 'dart:io';
import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';
import '../core/theme_provider.dart';
import '../core/theme.dart';
import '../features/profile/auth_service.dart';
import '/l10n/app_localizations.dart';

class _DrawerItem {
  final IconData icon;
  final String keyName;
  final String route;
  const _DrawerItem(this.icon, this.keyName, this.route);
}

class AppDrawer extends StatelessWidget {
  const AppDrawer({Key? key}) : super(key: key);

  static const List<_DrawerItem> _items = [
    _DrawerItem(Icons.home, 'home', '/home'),
    _DrawerItem(Icons.article, 'newspapers', '/newspaper'),
    _DrawerItem(Icons.favorite, 'favorites', '/favorites'),
    _DrawerItem(Icons.person, 'profile', '/profile'),
    _DrawerItem(Icons.info_outline, 'about', '/about'),
    _DrawerItem(Icons.support_agent, 'supports', '/supports'),
    _DrawerItem(Icons.search, 'search', '/search'),
  ];

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final prov = context.watch<ThemeProvider>();
    final theme = Theme.of(context);
    final textColor = theme.textTheme.bodyLarge?.color ?? Colors.white;

    final gradientColors = AppGradients.getGradientColors(prov.appThemeMode);

    return Drawer(
      backgroundColor: Colors.transparent,
      elevation: 0,
      child: ClipRRect(
        borderRadius: const BorderRadius.only(
          topRight: Radius.circular(28),
          bottomRight: Radius.circular(28),
        ),
        child: Stack(
          children: [
            Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                  colors: [
                    gradientColors[0].withOpacity(0.85),
                    gradientColors[1].withOpacity(0.85),
                  ],
                ),
              ),
            ),
            BackdropFilter(
              filter: ImageFilter.blur(sigmaX: 20, sigmaY: 20),
              child: Container(color: Colors.transparent),
            ),
            Column(
              children: [
                Container(
                  decoration: prov.glassDecoration(
                    borderRadius: const BorderRadius.vertical(top: Radius.circular(28)),
                  ),
                  child: const ProfileHeader(),
                ),
                _buildDivider(),
                Expanded(child: _buildMenu(context, loc, textColor)),
                _buildDivider(),
                // ✅ Original logout footer fully preserved
                Container(
                  decoration: prov.glassDecoration(borderRadius: BorderRadius.circular(20)),
                  margin: const EdgeInsets.all(16),
                  child: Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        ElevatedButton.icon(
                          style: ElevatedButton.styleFrom(
                            backgroundColor: prov.glassColor,
                            shadowColor: Colors.black26,
                          ),
                          onPressed: () {
                            Navigator.of(context).pop();
                            context.go('/login');
                          },
                          icon: Icon(Icons.logout, color: textColor),
                          label: Text(loc.logout, style: TextStyle(color: textColor)),
                        ),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildMenu(BuildContext context, AppLocalizations loc, Color textColor) {
    return ListView.builder(
      padding: const EdgeInsets.symmetric(vertical: 8),
      itemCount: _items.length,
      itemBuilder: (ctx, i) {
        final itm = _items[i];
        final title = _title(itm.keyName, loc);
        return _DrawerTile(
          icon: itm.icon,
          title: title,
          route: itm.route,
          textColor: textColor,
        );
      },
    );
  }

  String _title(String key, AppLocalizations loc) {
    switch (key) {
      case 'home': return loc.home;
      case 'newspapers': return loc.newspapers;
      case 'favorites': return loc.favorites;
      case 'profile': return loc.profile;
      case 'about': return loc.about;
      case 'supports': return loc.supports;
      case 'search': return loc.search;
      default: return key;
    }
  }

  static Widget _buildDivider() => Container(
    margin: const EdgeInsets.symmetric(vertical: 8),
    height: 5,
    decoration: BoxDecoration(
      gradient: LinearGradient(
        begin: Alignment.centerLeft,
        end: Alignment.centerRight,
        colors: [
          Colors.white.withOpacity(0.5),
          Colors.transparent,
          Colors.white.withOpacity(0.5),
        ],
      ),
    ),
  );
}

class ProfileHeader extends StatelessWidget {
  const ProfileHeader({Key? key}) : super(key: key);

  Future<Map<String, String>> _loadProfile() => AuthService().getProfile();

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final prov = context.watch<ThemeProvider>();
    final textStyle = prov.floatingTextStyle(fontSize: 18);
    return FutureBuilder<Map<String, String>>(
      future: _loadProfile(),
      builder: (ctx, snap) {
        final imageUrl = snap.data?['image'] ?? '';
        final name = snap.connectionState == ConnectionState.waiting
            ? loc.loading
            : (snap.hasData && snap.data!['name']?.isNotEmpty == true
                ? snap.data!['name']!
                : loc.guest);
        return Container(
          height: 220,
          width: double.infinity,
          alignment: Alignment.center,
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              CircleAvatar(
                radius: 40,
                backgroundColor: prov.glassColor,
                backgroundImage: imageUrl.isNotEmpty
                    ? (imageUrl.startsWith('http')
                        ? NetworkImage(imageUrl)
                        : FileImage(File(imageUrl))) as ImageProvider
                    : null,
                child: imageUrl.isEmpty
                    ? Icon(Icons.person, size: 40, color: Colors.grey)
                    : null,
              ),
              const SizedBox(height: 14),
              Text(name, style: textStyle),
            ],
          ),
        );
      },
    );
  }
}

class _DrawerTile extends StatelessWidget {
  final IconData icon;
  final String title;
  final String route;
  final Color textColor;

  const _DrawerTile({
    Key? key,
    required this.icon,
    required this.title,
    required this.route,
    required this.textColor,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final currentRoute = GoRouterState.of(context).uri.toString();
    final isSelected = currentRoute == route;

    return ListTile(
      leading: Icon(icon, color: textColor),
      title: Text(
        title,
        style: TextStyle(
          color: textColor,
          fontWeight: isSelected ? FontWeight.bold : FontWeight.w600,
        ),
      ),
      selected: isSelected,
      onTap: () {
        Navigator.of(context).pop();
        GoRouter.of(context).go(route);
      },
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/widgets/error_widget.dart ===

import 'package:flutter/material.dart';

class ErrorDisplay extends StatelessWidget {

  const ErrorDisplay({required this.message, required this.onRetry, super.key});
  final String message;
  final VoidCallback onRetry;

  @override
  Widget build(BuildContext context) {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(24.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            const Icon(Icons.error_outline, color: Colors.redAccent, size: 60),
            const SizedBox(height: 16),
            Text(
              message,
              textAlign: TextAlign.center,
              style: const TextStyle(fontSize: 18, fontWeight: FontWeight.w500),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: onRetry,
              child: const Text('Retry'),
            ),
          ],
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/widgets/favorite_button.dart ===

// lib/widgets/favorite_button.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import '../data/models/news_article.dart';
import '../core/utils/favorites_manager.dart';

class FavoriteButton extends StatefulWidget {
  const FavoriteButton({
    super.key,
    required this.article,
    this.onFavoriteChanged,
  });

  final NewsArticle article;
  final VoidCallback? onFavoriteChanged;

  @override
  State<FavoriteButton> createState() => _FavoriteButtonState();
}

class _FavoriteButtonState extends State<FavoriteButton>
    with SingleTickerProviderStateMixin {
  bool _isFavorite = false;
  late final AnimationController _animController;
  late final Animation<double> _scaleAnim;
  late final Animation<double> _flashAnim;

  @override
  void initState() {
    super.initState();
    _loadFavoriteStatus();

    _animController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 300),
    );

    _scaleAnim = TweenSequence<double>([
      TweenSequenceItem(tween: Tween(begin: 1.0, end: 1.3), weight: 50),
      TweenSequenceItem(tween: Tween(begin: 1.3, end: 1.0), weight: 50),
    ]).animate(
      CurvedAnimation(parent: _animController, curve: Curves.easeOutBack),
    );

    _flashAnim = Tween<double>(begin: 0.0, end: 0.3).animate(
      CurvedAnimation(parent: _animController, curve: const Interval(0, 0.5)),
    );
  }

  @override
  void dispose() {
    _animController.dispose();
    super.dispose();
  }

  Future<void> _loadFavoriteStatus() async {
    final articles = FavoritesManager.instance.favoriteArticles;
    final status =
        articles.any((a) => a.url == widget.article.url);
    setState(() => _isFavorite = status);
  }

  Future<void> _toggleFavorite() async {
    // Start the pop+flash
    _animController.forward(from: 0);
    if (_isFavorite) {
      await FavoritesManager.instance.removeFavorite(widget.article);
    } else {
      await FavoritesManager.instance.addFavorite(widget.article);
    }
    await _loadFavoriteStatus();
    widget.onFavoriteChanged?.call();
  }

  @override
  Widget build(BuildContext context) {
    final colorScheme = Theme.of(context).colorScheme;
    final heartColor = _isFavorite
        ? colorScheme.secondary
        : colorScheme.onSurface.withOpacity(0.6);

    return Semantics(
      label: _isFavorite ? 'Remove from favorites' : 'Add to favorites',
      button: true,
      child: GestureDetector(
        onTap: _toggleFavorite,
        child: AnimatedBuilder(
          animation: _animController,
          builder: (context, child) {
            return Stack(
              alignment: Alignment.center,
              children: [
                // Flashing frosted circle
                if (_flashAnim.value > 0)
                  BackdropFilter(
                    filter: ImageFilter.blur(
                      sigmaX: 12 * _flashAnim.value,
                      sigmaY: 12 * _flashAnim.value,
                    ),
                    child: Container(
                      width: 40 + 20 * _flashAnim.value,
                      height: 40 + 20 * _flashAnim.value,
                      decoration: BoxDecoration(
                        color:
                            Colors.white.withOpacity(_flashAnim.value * 0.2),
                        shape: BoxShape.circle,
                      ),
                    ),
                  ),
                // Scaled heart
                Transform.scale(
                  scale: _scaleAnim.value,
                  child: Icon(
                    _isFavorite ? Icons.favorite : Icons.favorite_border,
                    color: heartColor,
                    size: 28,
                  ),
                ),
              ],
            );
          },
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/widgets/category_chips_bar.dart ===

import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '/core/theme_provider.dart';

class ChipsBar extends StatelessWidget {
  final List<String> items;
  final int selectedIndex;
  final void Function(int index) onTap;
  final double height;
  final double fontSize;
  final EdgeInsetsGeometry padding;
  final bool glow;

  const ChipsBar({
    Key? key,
    required this.items,
    required this.selectedIndex,
    required this.onTap,
    this.height = 52,
    this.fontSize = 13,
    this.padding = const EdgeInsets.symmetric(horizontal: 12),
    this.glow = false,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final prov = context.watch<ThemeProvider>();
    final theme = Theme.of(context);

    final baseColor = prov.glassColor;
    final glowColor = prov.borderColor.withOpacity(0.3);
    final selectedColor = const Color(0xFFFFD700); // Gold

    return Padding(
      padding: padding,
      child: Container(
        height: height,
        decoration: BoxDecoration(
          color: baseColor,
          borderRadius: BorderRadius.circular(18),
          border: Border.all(color: glowColor, width: 1),
          boxShadow: glow
              ? [
                  BoxShadow(
                    color: glowColor.withOpacity(0.4),
                    blurRadius: 10,
                    offset: const Offset(0, 4),
                  ),
                ]
              : [],
        ),
        child: ListView.separated(
          scrollDirection: Axis.horizontal,
          padding: const EdgeInsets.symmetric(horizontal: 8),
          itemCount: items.length,
          separatorBuilder: (_, __) => const SizedBox(width: 6),
          itemBuilder: (context, i) {
            final selected = i == selectedIndex;
            return ChoiceChip(
              label: Text(
                items[i],
                style: theme.textTheme.labelLarge?.copyWith(
                  fontSize: fontSize,
                  fontWeight: selected ? FontWeight.bold : FontWeight.w500,
                  color: selected
                      ? Colors.black
                      : (prov.appThemeMode == AppThemeMode.light
                          ? Colors.black54
                          : Colors.white70),
                  shadows: selected
                      ? const [
                          Shadow(
                            blurRadius: 6,
                            color: Colors.black26,
                            offset: Offset(0, 2),
                          ),
                        ]
                      : [],
                ),
              ),
              selected: selected,
              onSelected: (_) => onTap(i),
              backgroundColor: baseColor,
              selectedColor: selectedColor,
              shape: StadiumBorder(
                side: BorderSide(
                  color: selected ? Colors.transparent : glowColor,
                  width: 1,
                ),
              ),
            );
          },
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/widgets/loading_widget.dart ===

import 'package:flutter/material.dart';
import 'package:shimmer/shimmer.dart';

class LoadingWidget extends StatelessWidget {
  const LoadingWidget({
    super.key,
    this.height = 150,
    this.width = double.infinity,
    this.radius = 16,
  });

  final double height;
  final double width;
  final double radius;

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final isDark = theme.brightness == Brightness.dark;

    return Semantics(
      label: 'Loading content',
      child: Shimmer.fromColors(
        baseColor: isDark ? Colors.grey.shade800 : Colors.grey.shade300,
        highlightColor: isDark ? Colors.grey.shade600 : Colors.grey.shade100,
        child: Container(
          height: height,
          width: width,
          decoration: BoxDecoration(
            color: theme.cardColor,
            borderRadius: BorderRadius.circular(radius),
          ),
        ),
      ),
    );
  }
}


