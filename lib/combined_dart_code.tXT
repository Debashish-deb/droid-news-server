// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/l10n/app_localizations.dart ===

import 'package:flutter/material.dart';

class AppLocalizations {
  final Locale locale;
  AppLocalizations(this.locale);

  static AppLocalizations of(BuildContext context) =>
      Localizations.of<AppLocalizations>(context, AppLocalizations)!;

  static const LocalizationsDelegate<AppLocalizations> delegate = _AppLocalizationsDelegate();

  // General UI
  String get close => _t('বন্ধ করুন', 'Close');
  String get home => _t('হোম', 'Home');
  String get profile => _t('প্রোফাইল', 'Profile');
  String get editProfile => _t('প্রোফাইল সম্পাদনা', 'Edit Profile');
  String get settings => _t('সেটিংস', 'Settings');
  String get theme => _t('থিম', 'Theme');
  String get language => _t('ভাষা', 'Language');
  String get darkMode => _t('ডার্ক মোড', 'Dark Mode');
  String get version => _t('সংস্করণ', 'Version');
  String get versionPrefix => _t('সংস্করণ', 'Version');
  String get bdNewsHub => _t('বিডিনিউজ হাব 📰', 'BDNews Hub 📰');

  // Auth
  String get login => _t('লগইন', 'Login');
  String get logout => _t('লগআউট', 'Logout');
  String get signup => _t('সাইন আপ', 'Sign Up');
  String get password => _t('পাসওয়ার্ড', 'Password');
  String get email => _t('ইমেইল', 'Email');
  String get fullName => _t('পুরো নাম', 'Full Name');
  String get forgotPassword => _t('পাসওয়ার্ড ভুলে গেছেন', 'Forgot Password');
  String get sendResetLink => _t('রিসেট লিঙ্ক পাঠান', 'Send Reset Link');
  String get enterEmailReset => _t('পাসওয়ার্ড রিসেট করতে আপনার ইমেল লিখুন:', 'Enter your email to reset your password:');
  String get alreadyHaveAccount => _t('ইতিমধ্যে একটি অ্যাকাউন্ট আছে?', 'Already have an account? Login');
  String get createAccount => _t('অ্যাকাউন্ট তৈরি করুন', 'Create account');
  String get invalidCredentials => _t('ভুল ইমেইল বা পাসওয়ার্ড।', 'Invalid email or password.');
  String get noAccountFound => _t('এই ইমেইলে কোন অ্যাকাউন্ট নেই।', 'No account found for this email.');
  String get accountExists => _t('এই ইমেইলে ইতিমধ্যে অ্যাকাউন্ট আছে।', 'An account already exists with this email.');
  String get resetEmailSent => _t('📧 পাসওয়ার্ড রিসেট ইমেইল পাঠানো হয়েছে!', '📧 Password reset email sent!');

  // Profile Fields
  String get phone => _t('ফোন', 'Phone');
  String get bio => _t('জীবন বৃত্তান্ত', 'Bio');
  String get address => _t('ঠিকানা', 'Address');
  String get website => _t('ওয়েবসাইট', 'Website');
  String get role => _t('ভূমিকা', 'Role');
  String get department => _t('বিভাগ', 'Department');
  String get changeImage => _t('ছবি পরিবর্তন করুন', 'Change Image');
  String get removeImage => _t('ছবি অপসারণ', 'Remove Image');

  // Editor Features
  String get saveChanges => _t('পরিবর্তনগুলি সংরক্ষণ করুন', 'Save Changes');
  String get profileSaved => _t('প্রোফাইল সংরক্ষিত', 'Profile saved');
  String get required => _t('আবশ্যক', 'Required');

  // News Categories
  String get latest => _t('সর্বশেষ', 'Latest');
  String get newspapers => _t('সংবাদপত্র', 'Newspapers');
  String get magazines => _t('ম্যাগাজিন', 'Magazines');
  String get favorites => _t('প্রিয়', 'Favorites');
  String get national => _t('জাতীয়', 'National');
  String get international => _t('আন্তর্জাতিক', 'International');
  String get businessFinance => _t('ব্যবসা ও অর্থনীতি', 'Business & Finance');
  String get digitalTech => _t('ডিজিটাল ও প্রযুক্তি', 'Digital & Technology');
  String get sportsNews => _t('খেলার খবর', 'Sports News');
  String get entertainmentArts => _t('বিনোদন ও শিল্প', 'Entertainment & Arts');
  String get worldPolitics => _t('বিশ্ব ও রাজনীতি', 'World & Politics');
  String get blog => _t('ব্লগ', 'Blog');
  String get business => _t('ব্যবসা', 'Business');
  String get sports => _t('খেলা', 'Sports');
  String get technology => _t('প্রযুক্তি', 'Technology');
  String get entertainment => _t('বিনোদন', 'Entertainment');
  String get lifestyle => _t('জীবনধারা', 'LifeStyle');

  // Premium Features
  String get bangladeshTheme => _t('দেশ 🇧🇩', 'Desh 🇧🇩');
  String get adFree => _t('বিজ্ঞাপনবিহীন অভিজ্ঞতা', 'Ad-Free Experience');
  String get adFreeHint => _t('পরিষ্কার পড়ার অভিজ্ঞতার জন্য বিজ্ঞাপন সরানো হয়।', 'Removes all ads for a clean reading experience.');
  String get offlineDownloads => _t('অফলাইন ডাউনলোড', 'Offline Downloads');
  String get offlineHint => _t('অফলাইনে দেখার জন্য কনটেন্ট সংরক্ষণ করুন।', 'Save content locally for offline viewing.');
  String get prioritySupport => _t('প্রাধান্য সহায়তা', 'Priority Support');
  String get prioritySupportHint => _t('সহায়তা টিম থেকে দ্রুত সহায়তা।', 'Get faster responses from our support team.');

  // Search and Empty States
  String get searchHint => _t('সন্ধান করুন...', 'Search...');
  String get searchPapers => _t('পত্রিকা খুঁজুন…', 'Search…');
  String get noMagazines => _t('কোন ম্যাগাজিন পাওয়া যায়নি', 'No magazines found');
  String get noPapersFound => _t('কোন সংবাদপত্র পাওয়া যায়নি', 'No papers found');
  String get allLanguages => _t('সব ভাষা', 'All Languages');

  // Categories for Magazines
  String get catFashion => _t('ফ্যাশন ও সৌন্দর্য', 'Fashion & Aesthetics');
  String get catScience => _t('বিজ্ঞান ও আবিষ্কার', 'Science & Discovery');
  String get catFinance => _t('অর্থনীতি ও অর্থ', 'Economics & Finance');
  String get catAffairs => _t('আন্তর্জাতিক সম্পর্ক', 'Global Affairs');
  String get catTech => _t('প্রযুক্তি', 'Emerging Technologies');
  String get catArts => _t('শিল্প ও মানবিকতা', 'Arts & Humanities');
  String get catLifestyle => _t('জীবনধারা ও বিলাসিতা', 'Lifestyle & Luxury');
  String get catSports => _t('খেলা ও পারফরম্যান্স', 'Sports & Performance');

  // Feedback
  String get feedback => _t('প্রতিক্রিয়া', 'Feedback');
  String get rateApp => _t('অ্যাপ রেট দিন', 'Rate this App');
  String get contactSupport => _t('সহায়তা যোগাযোগ', 'Contact Support');
  String get contactEmail => 'customerservice@dsmobiles.com';
  String get mailClientError => _t('মেইল ক্লায়েন্ট চালু করা যায়নি।', 'Could not launch mail client.');
  String get storeOpenError => _t('স্টোর খুলতে অক্ষম।', 'Unable to open store.');
  String get viewArticle => _t('নিবন্ধ দেখুন', 'View Article');
  String get loadError => _t('লোড করতে ব্যর্থ', 'Load failed');
  String get noUserConnected => _t('কোনো ব্যবহারকারী সংযুক্ত নেই', 'No user connected yet');
  String get enterEmail => _t('ইমেইল লিখুন', 'Enter your email');
String get save => _t('সংরক্ষণ করুন', 'Save');
String get getFullProfile => _t('পূর্ণ প্রোফাইল পান', 'Get Full Profile');
  String get bangla => _t('বাংলা', 'Bengali');
  String get english => _t('ইংরেজি', 'English');
  String get supports => _t('সাপোর্ট', 'Supports');
  String get health => _t('স্বাস্থ্য', 'Health');
  String get opinion => _t('মতামত', 'Opinion');
  String get about => _t('সম্পর্কে', 'About');
  String get education => _t('শিক্ষা', 'Education');

  // Dynamic Translation Helper
  String _t(String bn, String en) => locale.languageCode == 'bn' ? bn : en;
}

class _AppLocalizationsDelegate extends LocalizationsDelegate<AppLocalizations> {
  const _AppLocalizationsDelegate();

  @override
  bool isSupported(Locale locale) => ['en', 'bn'].contains(locale.languageCode);

  @override
  Future<AppLocalizations> load(Locale locale) async => AppLocalizations(locale);

  @override
  bool shouldReload(covariant LocalizationsDelegate<AppLocalizations> old) => false;
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/tools/upload_data_to_firestore.dart ===

// lib/tools/firebase_upload.dart
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart' show rootBundle;
import 'package:firebase_core/firebase_core.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../firebase_options.dart';

Future<void> uploadDataFromJson() async {
  final jsonString = await rootBundle.loadString('assets/data.json');
  final data = jsonDecode(jsonString);
  final newspapers = data['newspapers'] as List<dynamic>? ?? [];
  final magazines  = data['magazines']  as List<dynamic>? ?? [];

  final firestore = FirebaseFirestore.instance;
  final batch     = firestore.batch();

  for (var item in newspapers) {
    final id = item['id'] as String;
    batch.set(firestore.collection('newspapers').doc(id), item);
  }
  for (var item in magazines) {
    final id = item['id'] as String;
    batch.set(firestore.collection('magazines').doc(id), item);
  }

  await batch.commit();
  print('✅ Upload complete');
}

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  await uploadDataFromJson();
  // Exit the app after upload—no UI needed
  // On Android, this closes the process; on others it just ends.
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/tools/firebase_upload.dart ===

import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();

  final raw = await rootBundle.loadString('assets/data.json');
  final data = json.decode(raw) as Map<String, dynamic>;

  final firestore = FirebaseFirestore.instance;

  Future<void> upload(String key) async {
    final List items = data[key] ?? [];
    for (final item in items) {
      final id = item['id']?.toString() ?? DateTime.now().millisecondsSinceEpoch.toString();
      await firestore.collection(key).doc(id).set(item);
      print('✅ Uploaded $key/$id');
    }
  }

  await upload('newspapers');
  await upload('magazines');

  print('🎉 Upload complete!');
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/routes.dart ===

// path: lib/core/router/routes.dart

import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import '../../../features/splash/splash_screen.dart';
import '../../../features/onboarding/onboarding_screen.dart';
import '../../../features/profile/profile_screen.dart';
import '../../../features/profile/edit_profile_screen.dart';
import '../../../features/profile/signup_screen.dart';
import '../../../features/profile/login_screen.dart';
import '../../../features/profile/forgot_password_screen.dart';
import '../../../features/news/newspaper_screen.dart';
import '../../../features/magazine/magazine_screen.dart';
import '../../../features/favorites/favorites_screen.dart';
import '../../../features/about/about_screen.dart';
import '../../../features/help/help_screen.dart';
import '../../../features/search/search_screen.dart';
import '../../../features/settings/settings_screen.dart';
import '../../../features/news_detail/news_detail_screen.dart';
import '../../../features/common/webview_screen.dart';
import '../../../main_navigation_screen.dart';
import '../../../data/models/news_article.dart';

class AppRouter {
  static final GoRouter router = GoRouter(
    initialLocation: '/splash',
    errorBuilder: (context, state) => const ErrorScreen(),
    routes: [
      GoRoute(path: '/splash', builder: (_, __) => const SplashScreen()),
      GoRoute(path: '/onboarding', builder: (_, __) => const OnboardingScreen()),
      GoRoute(path: '/login', builder: (_, __) => const LoginScreen()),
      GoRoute(path: '/signup', builder: (_, __) => const SignupScreen()),
      GoRoute(path: '/forgot-password', builder: (_, __) => const ForgotPasswordScreen()),

      GoRoute(path: '/home', builder: (_, __) => const MainNavigationScreen(selectedTab: 0)),
      GoRoute(path: '/newspaper', builder: (_, __) => const MainNavigationScreen(selectedTab: 1)),
      GoRoute(path: '/magazines', builder: (_, __) => const MainNavigationScreen(selectedTab: 2)),
      GoRoute(path: '/settings', builder: (_, __) => const MainNavigationScreen(selectedTab: 3)),

      GoRoute(path: '/favorites', builder: (_, __) => const FavoritesScreen()),
      GoRoute(path: '/about', builder: (_, __) => const AboutScreen()),
      GoRoute(path: '/supports', builder: (_, __) => const HelpScreen()),
      GoRoute(path: '/search', builder: (_, __) => const SearchScreen()),
      GoRoute(path: '/profile', builder: (_, __) => const ProfileScreen()),
      GoRoute(path: '/edit_profile', builder: (_, __) => const EditProfileScreen()),

      GoRoute(
        path: '/news-detail',
        builder: (context, state) {
          final extra = state.extra;
          if (extra is NewsArticle) {
            return NewsDetailScreen(news: extra);
          } else {
            return const ErrorScreen();
          }
        },
      ),

      GoRoute(
        path: '/webview',
        name: 'webview',
        builder: (context, state) {
          final args = state.extra;
          if (args is Map<String, dynamic> && args.containsKey('url')) {
            return WebViewScreen(
              url: args['url'] as String,
              title: args['title'] as String? ?? 'Web View',
            );
          } else {
            return const ErrorScreen();
          }
        },
      ),
    ],
  );
}

class ErrorScreen extends StatelessWidget {
  const ErrorScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.error_outline, size: 80, color: Theme.of(context).colorScheme.error),
            const SizedBox(height: 16),
            Text(
              'Oops! Something went wrong.',
              style: Theme.of(context).textTheme.titleLarge,
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }
}

// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/utils.dart ===

// File: lib/utils/date_time_utils.dart

import 'package:intl/intl.dart';

class DateTimeUtils {
  /// Returns current date in format like: Monday, April 7, 2025
  static String getCurrentDate() {
    return DateFormat.yMMMMEEEEd().format(DateTime.now());
  }

  /// Returns current time in format like: 5:30 PM
  static String getCurrentTime() {
    return DateFormat.jm().format(DateTime.now());
  }

  /// Formats any DateTime object to a readable string.
  static String formatDateTime(DateTime dateTime, {String pattern = 'yMMMMEEEEd'}) {
    return DateFormat(pattern).format(dateTime);
  }

  /// Returns a human-readable "time ago" or "in time" format.
  static String timeAgo(
    DateTime dateTime, {
    String minute = 'minute',
    String hour = 'hour',
    String day = 'day',
    String week = 'week',
    String month = 'month',
    String year = 'year',
    String ago = 'ago',
    String inPrefix = 'In',
    String justNow = 'Just now',
    String fewSeconds = 'In a few seconds',
  }) {
    final Duration diff = DateTime.now().difference(dateTime);

    if (diff.inSeconds.abs() < 60) return diff.isNegative ? fewSeconds : justNow;
    if (diff.inMinutes.abs() < 60) {
      final int minutes = diff.inMinutes.abs();
      return diff.isNegative
          ? '$inPrefix $minutes $minute${minutes == 1 ? '' : 's'}'
          : '$minutes $minute${minutes == 1 ? '' : 's'} $ago';
    }
    if (diff.inHours.abs() < 24) {
      final int hours = diff.inHours.abs();
      return diff.isNegative
          ? '$inPrefix $hours $hour${hours == 1 ? '' : 's'}'
          : '$hours $hour${hours == 1 ? '' : 's'} $ago';
    }
    if (diff.inDays.abs() < 7) {
      final int days = diff.inDays.abs();
      return diff.isNegative
          ? '$inPrefix $days $day${days == 1 ? '' : 's'}'
          : '$days $day${days == 1 ? '' : 's'} $ago';
    }
    if (diff.inDays.abs() < 30) {
      final int weeks = (diff.inDays.abs() / 7).floor();
      return diff.isNegative
          ? '$inPrefix $weeks $week${weeks == 1 ? '' : 's'}'
          : '$weeks $week${weeks == 1 ? '' : 's'} $ago';
    }
    if (diff.inDays.abs() < 365) {
      final int months = (diff.inDays.abs() / 30).floor();
      return diff.isNegative
          ? '$inPrefix $months $month${months == 1 ? '' : 's'}'
          : '$months $month${months == 1 ? '' : 's'} $ago';
    }
    final int years = (diff.inDays.abs() / 365).floor();
    return diff.isNegative
        ? '$inPrefix $years $year${years == 1 ? '' : 's'}'
        : '$years $year${years == 1 ? '' : 's'} $ago';
  }
}

class StringUtils {
  /// Capitalizes the first letter of a string.
  static String capitalize(String text) {
    if (text.isEmpty) return text;
    return text[0].toUpperCase() + text.substring(1);
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/utils/favorites_manager.dart ===

import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import '../../data/models/news_article.dart';

class FavoritesManager {
  static final FavoritesManager _instance = FavoritesManager._internal();
  FavoritesManager._internal();
  static FavoritesManager get instance => _instance;

  static const String favoritesKey = 'favorites';
  static const String magazineFavoritesKey = 'magazine_favorites';
  static const String newspaperFavoritesKey = 'newspaper_favorites';

  List<NewsArticle> _favoriteArticles = [];
  List<Map<String, dynamic>> _favoriteMagazines = [];
  List<Map<String, dynamic>> _favoriteNewspapers = [];

  List<NewsArticle> get favoriteArticles => _favoriteArticles;
  List<Map<String, dynamic>> get favoriteMagazines => _favoriteMagazines;
  List<Map<String, dynamic>> get favoriteNewspapers => _favoriteNewspapers;

  Future<void> loadFavorites() async {
    final prefs = await SharedPreferences.getInstance();
    final List<String> articleJson = prefs.getStringList(favoritesKey) ?? [];
    final List<String> magazineJson = prefs.getStringList(magazineFavoritesKey) ?? [];
    final List<String> newspaperJson = prefs.getStringList(newspaperFavoritesKey) ?? [];

    _favoriteArticles = articleJson
        .map((String str) => NewsArticle.fromMap(json.decode(str)))
        .toList();

    _favoriteMagazines = magazineJson
        .map((String str) => Map<String, dynamic>.from(json.decode(str)))
        .toList();

    _favoriteNewspapers = newspaperJson
        .map((String str) => Map<String, dynamic>.from(json.decode(str)))
        .toList();
  }

  // -------------------------
  // Articles
  Future<void> addFavorite(NewsArticle article) async {
    final prefs = await SharedPreferences.getInstance();
    _favoriteArticles.add(article);
    await prefs.setStringList(
      favoritesKey,
      _favoriteArticles.map((e) => json.encode(e.toMap())).toList(),
    );
  }

  Future<void> removeFavorite(NewsArticle article) async {
    final prefs = await SharedPreferences.getInstance();
    _favoriteArticles.removeWhere((e) => e.url == article.url);
    await prefs.setStringList(
      favoritesKey,
      _favoriteArticles.map((e) => json.encode(e.toMap())).toList(),
    );
  }

  Future<bool> isFavorite(NewsArticle article) async {
    return _favoriteArticles.any((e) => e.url == article.url);
  }

  // -------------------------
  // Magazines
  Future<void> toggleMagazine(Map<String, dynamic> magazine) async {
    final prefs = await SharedPreferences.getInstance();
    final id = magazine['id'].toString();
    final isFav = _favoriteMagazines.any((m) => m['id'].toString() == id);

    if (isFav) {
      _favoriteMagazines.removeWhere((m) => m['id'].toString() == id);
    } else {
      _favoriteMagazines.add(magazine);
    }

    await prefs.setStringList(
      magazineFavoritesKey,
      _favoriteMagazines.map((m) => json.encode(m)).toList(),
    );
  }

  bool isFavoriteMagazine(String id) {
    return _favoriteMagazines.any((m) => m['id'].toString() == id);
  }

  // -------------------------
  // Newspapers (NEW)
  Future<void> toggleNewspaper(Map<String, dynamic> newspaper) async {
    final prefs = await SharedPreferences.getInstance();
    final id = newspaper['id'].toString();
    final isFav = _favoriteNewspapers.any((n) => n['id'].toString() == id);

    if (isFav) {
      _favoriteNewspapers.removeWhere((n) => n['id'].toString() == id);
    } else {
      _favoriteNewspapers.add(newspaper);
    }

    await prefs.setStringList(
      newspaperFavoritesKey,
      _favoriteNewspapers.map((n) => json.encode(n)).toList(),
    );
  }

  bool isFavoriteNewspaper(String id) {
    return _favoriteNewspapers.any((n) => n['id'].toString() == id);
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/utils/og_image_fetcher.dart ===

import 'package:html/dom.dart';
import 'package:http/http.dart' as http;
import 'package:html/parser.dart' as html_parser;

/// Fetches the best available image from a webpage (og:image or twitter:image).
Future<String?> fetchBestImageFromUrl(String url) async {
  try {
    final http.Response response = await http.get(Uri.parse(url));

    if (response.statusCode == 200) {
      final Document document = html_parser.parse(response.body);

      // Try Open Graph image first
      final Element? ogImageMeta = document.querySelector('meta[property="og:image"]');
      if (ogImageMeta != null && ogImageMeta.attributes['content'] != null) {
        return ogImageMeta.attributes['content'];
      }

      // Fallback: Try Twitter Card image
      final Element? twitterImageMeta = document.querySelector('meta[name="twitter:image"]');
      if (twitterImageMeta != null && twitterImageMeta.attributes['content'] != null) {
        return twitterImageMeta.attributes['content'];
      }
    }
    return null; // No image found
  } catch (e) {
    print('⚠️ Error fetching image: $e');
    return null;
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/navigation_helper.dart ===

import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';

class NavigationHelper {
  static void goHome(BuildContext context) {
    context.go('/home');
  }

  static void goNewspaper(BuildContext context) {
    context.go('/newspaper');
  }

  static void goMagazines(BuildContext context) {
    context.go('/magazines');
  }

  static void goSettings(BuildContext context) {
    context.go('/settings');
  }

  static void goFavorites(BuildContext context) {
    context.go('/favorites');
  }

  static void goAbout(BuildContext context) {
    context.go('/about');
  }

  static void goHelp(BuildContext context) {
    context.go('/supports');
  }

  static void goSearch(BuildContext context) {
    context.go('/search');
  }

  static void goProfile(BuildContext context) {
    context.go('/profile');
  }

  static void goEditProfile(BuildContext context) {
    context.go('/edit_profile');
  }

  static void goLogin(BuildContext context) {
    context.go('/login');
  }

  static void goSignup(BuildContext context) {
    context.go('/signup');
  }

  static void goForgotPassword(BuildContext context) {
    context.go('/forgot-password');
  }

  static void goWebView(BuildContext context, {required String url, String? title}) {
    context.go('/webview', extra: {'url': url, 'title': title ?? 'Web View'});
  }

  static void goNewsDetail(BuildContext context, dynamic article) {
    context.go('/news-detail', extra: article);
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/language_provider.dart ===

import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

class LanguageProvider extends ChangeNotifier {
  static const String _languageKey = 'languageCode';

  Locale _locale = const Locale('en');
  Locale get locale => _locale;

  LanguageProvider() {
    _loadLocale();
  }

  Future<void> _loadLocale() async {
    final prefs = await SharedPreferences.getInstance();
    final storedCode = prefs.getString(_languageKey);
    if (storedCode != null && storedCode != _locale.languageCode) {
      _locale = Locale(storedCode);
      notifyListeners();
    }
  }

  Future<void> setLocale(String code) async {
    if (code == _locale.languageCode) return;
    _locale = Locale(code);
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_languageKey, code);
    notifyListeners();
  }

  Future<void> resetLocale() async {
    _locale = const Locale('en');
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove(_languageKey);
    notifyListeners();
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/splash_service.dart ===

// lib/core/splash_service.dart
import 'package:shared_preferences/shared_preferences.dart';

class SplashService {
  Future<String> resolveInitialRoute() async {
    final prefs = await SharedPreferences.getInstance();
    final hasSeenOnboarding = prefs.getBool('onboardingCompleted') ?? false;
    final isLoggedIn = prefs.getBool('isLoggedIn') ?? false;

    if (!hasSeenOnboarding) {
      return '/onboarding';
    } else if (!isLoggedIn) {
      return '/login';
    } else {
      return '/home';
    }
  }
}

// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/theme_provider.dart ===

import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'theme.dart';

enum AppThemeMode { system, light, dark, bangladesh }

class ThemeProvider extends ChangeNotifier {
  AppThemeMode _mode = AppThemeMode.system;

  AppThemeMode get appThemeMode => _mode;

  ThemeMode get themeMode {
    switch (_mode) {
      case AppThemeMode.light:
        return ThemeMode.light;
      case AppThemeMode.dark:
      case AppThemeMode.bangladesh:
        return ThemeMode.dark;
      case AppThemeMode.system:
      default:
        return ThemeMode.system;
    }
  }

  ThemeData get lightTheme => AppTheme.buildLightTheme();

  ThemeData get darkTheme =>
      _mode == AppThemeMode.bangladesh
          ? AppTheme.buildBangladeshTheme()
          : AppTheme.buildDarkTheme();

  ThemeProvider() {
    _loadThemePreference();
  }

  void toggleTheme(AppThemeMode mode) {
    if (_mode == mode) return;
    _mode = mode;
    _saveThemePreference();
    notifyListeners();
  }

  void setSystemTheme() => toggleTheme(AppThemeMode.system);

  Future<void> _loadThemePreference() async {
    final prefs = await SharedPreferences.getInstance();
    final saved = prefs.getString('app_theme_mode');
    switch (saved) {
      case 'light':
        _mode = AppThemeMode.light;
        break;
      case 'dark':
        _mode = AppThemeMode.dark;
        break;
      case 'bangladesh':
        _mode = AppThemeMode.bangladesh;
        break;
      default:
        _mode = AppThemeMode.system;
    }
    notifyListeners();
  }

  Future<void> _saveThemePreference() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('app_theme_mode', _mode.name);
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/constants.dart ===

import 'package:flutter/material.dart';

// Goku Siyan Mode Activated!
// Unleash the energy with these legendary constants for colors, sizes, and icons.

// AppColors: Our palette of super-powered hues.
class AppColors {
  // A dazzling light primary color, like the flash of a Kamehameha!
  static const Color primaryLight = Color(0xFF007BFF);
  // A deep, mysterious dark primary color, perfect for intense battles.
  static const Color primaryDark = Color(0xFF121212);
  // An accent color that sparks energy and power—unleash your inner spirit!
  static const Color accent = Color(0xFF00C853);
  // Error color that signals a fight must be won—fight through any challenge!
  static const Color error = Color(0xFFD32F2F);
  // A light background color to illuminate your UI like a Super Saiyan aura.
  static const Color backgroundLight = Color(0xFFF5F5F5);
  // A dark background color to ground your design with powerful depth.
  static const Color backgroundDark = Color(0xFF181818);
}

// AppSizes: The precise measurements that define your battle-ready layout.
class AppSizes {
  // Small padding for those quick, agile moves.
  static const double paddingSmall = 8.0;
  // Medium padding – balanced and steady like a well-trained fighter.
  static const double paddingMedium = 16.0;
  // Large padding to dominate the field, giving you room to shine.
  static const double paddingLarge = 24.0;

  // Corner radius to soften edges—because even warriors need a bit of style.
  static const double cornerRadius = 16.0;
}

// AppIcons: The iconic symbols that drive your UI energy.
class AppIcons {
  // The app's emblem, as bold as a freshly forged legend.
  static const IconData appIcon = Icons.newspaper;
  // Settings icon to fine-tune your Super Saiyan power.
  static const IconData settingsIcon = Icons.settings;
  // Share icon to spread the energy far and wide.
  static const IconData shareIcon = Icons.share;
  // Favorite icon to mark your most epic moments.
  static const IconData favoriteIcon = Icons.favorite;
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/user_service.dart ===

import 'package:cloud_firestore/cloud_firestore.dart';

class UserService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  Future<void> saveUserProfile({
    required String email,
    required String name,
    required String avatarUrl,
  }) async {
    final userDoc = _firestore.collection('users').doc(email);
    await userDoc.set({
      'name': name,
      'email': email,
      'avatar': avatarUrl,
      'updatedAt': FieldValue.serverTimestamp(),
    }, SetOptions(merge: true));
  }

  Future<Map<String, dynamic>?> getUserProfile(String email) async {
    final userDoc = await _firestore.collection('users').doc(email).get();
    return userDoc.exists ? userDoc.data() : null;
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/core/theme.dart ===

// path: lib/theme.dart
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';

class AppTheme {
  static final lightColorScheme = ColorScheme.fromSeed(
    seedColor: const Color.fromARGB(255, 24, 45, 64),
    secondary: const Color(0xFFC89B3C),
    tertiary: const Color.fromARGB(255, 70, 58, 80),
    brightness: Brightness.light,
  );

  static final darkColorScheme = ColorScheme.fromSeed(
    seedColor: const Color(0xFF0A0F1F),
    secondary: const Color.fromARGB(255, 0, 0, 0),
    tertiary: const Color.fromARGB(255, 98, 39, 59),
    brightness: Brightness.dark,
  );

  static ThemeData buildLightTheme() => ThemeData(
        useMaterial3: true,
        colorScheme: lightColorScheme,
        brightness: Brightness.light,
        scaffoldBackgroundColor: const Color.fromARGB(255, 129, 146, 181),
        textTheme: GoogleFonts.poppinsTextTheme(),
        appBarTheme: AppBarTheme(
          backgroundColor: lightColorScheme.primary,
          foregroundColor: Colors.white,
        ),
        inputDecorationTheme: InputDecorationTheme(
          filled: true,
          fillColor: Colors.white,
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(12),
            borderSide: BorderSide.none,
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(12),
            borderSide: BorderSide(color: lightColorScheme.secondary, width: 2),
          ),
        ),
      );

  static ThemeData buildDarkTheme() => ThemeData(
  useMaterial3: true,
  colorScheme: darkColorScheme.copyWith(
    background: const Color(0xFF121417), // dark ash background
    surface: const Color(0xFF1A1D20),
  ),
  brightness: Brightness.dark,
  scaffoldBackgroundColor: const Color(0xFF121417),
  cardColor: const Color(0xFF1C1F22),
  appBarTheme: const AppBarTheme(
    backgroundColor: Color(0xFF181B1E),
    foregroundColor: Colors.white,
  ),
  textTheme: GoogleFonts.poppinsTextTheme().apply(
    bodyColor: Colors.white,
    displayColor: Colors.white,
  ),
  inputDecorationTheme: InputDecorationTheme(
    filled: true,
    fillColor: const Color(0xFF202326),
    border: OutlineInputBorder(
      borderRadius: BorderRadius.circular(12),
      borderSide: BorderSide.none,
    ),
    focusedBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(12),
      borderSide: const BorderSide(color: Colors.tealAccent, width: 2),
    ),
    hintStyle: const TextStyle(color: Colors.white60),
    labelStyle: const TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
    floatingLabelStyle: const TextStyle(color: Colors.white),
  ),
  dropdownMenuTheme: const DropdownMenuThemeData(
    textStyle: TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
  ),
  iconTheme: const IconThemeData(color: Colors.white70),
);

static ThemeData buildBangladeshTheme() => ThemeData(
  useMaterial3: true,
  brightness: Brightness.dark,
  colorScheme: ColorScheme.fromSeed(
    seedColor: const Color(0xFF006A4E), // Flag green
    primary: const Color(0xFF006A4E),
    secondary: const Color(0xFFF42A41), // Red circle
    brightness: Brightness.dark,
  ),
  scaffoldBackgroundColor: const Color(0xFF022d1e),
  textTheme: GoogleFonts.poppinsTextTheme().apply(
    bodyColor: Colors.white,
    displayColor: Colors.white,
  ),
  appBarTheme: const AppBarTheme(
    backgroundColor: Color(0xFF006A4E),
    foregroundColor: Colors.white,
  ),
  inputDecorationTheme: InputDecorationTheme(
    filled: true,
    fillColor: const Color(0xFF0c4634),
    border: OutlineInputBorder(
      borderRadius: BorderRadius.circular(12),
      borderSide: BorderSide.none,
    ),
    focusedBorder: OutlineInputBorder(
      borderRadius: BorderRadius.circular(12),
      borderSide: const BorderSide(color: Color(0xFFF42A41), width: 2),
    ),
    hintStyle: const TextStyle(color: Colors.white70),
    labelStyle: const TextStyle(color: Colors.white),
    floatingLabelStyle: const TextStyle(color: Colors.white),
  ),
);
}

// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/settings/settings_screen.dart ===

// path: features/settings/settings_screen.dart
import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:package_info_plus/package_info_plus.dart';
import 'package:flutter_cache_manager/flutter_cache_manager.dart';
import 'package:go_router/go_router.dart';

import '../../core/theme_provider.dart';
import '../../core/language_provider.dart';
import '../../localization/l10n/app_localizations.dart';
import '../news/widgets/animated_background.dart';
import '../../widgets/app_drawer.dart';

class SettingsScreen extends StatefulWidget {
  const SettingsScreen({super.key});

  @override
  State<SettingsScreen> createState() => _SettingsScreenState();
}

class _SettingsScreenState extends State<SettingsScreen> {
  String _version = '';
  bool _isClearingCache = false;

  @override
  void initState() {
    super.initState();
    _loadVersion();
  }

  Future<void> _loadVersion() async {
    final info = await PackageInfo.fromPlatform();
    setState(() => _version = info.version);
  }

  Future<void> _rateApp() async {
    final uri = Uri.parse('https://play.google.com/store/apps/details?id=com.example.droid');
    if (!await launchUrl(uri)) {
      final loc = AppLocalizations.of(context)!;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(loc.storeOpenError)),
      );
    }
  }

  Future<void> _clearCache() async {
    setState(() => _isClearingCache = true);
    await DefaultCacheManager().emptyCache();
    setState(() => _isClearingCache = false);
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Cache cleared successfully')),
    );
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final themeProvider = context.watch<ThemeProvider>();
    final loc = AppLocalizations.of(context)!;
    final selectedTheme = themeProvider.appThemeMode;

    return Scaffold(
      drawer: const AppDrawer(),
      appBar: AppBar(
        centerTitle: true,
        title: Text(loc.settings, style: const TextStyle(fontWeight: FontWeight.bold)),
      ),
      body: AnimatedBackground(
        child: Center(
          child: ClipRRect(
            borderRadius: BorderRadius.circular(28),
            child: BackdropFilter(
              filter: ImageFilter.blur(sigmaX: 18, sigmaY: 18),
              child: Container(
                margin: const EdgeInsets.all(24),
                padding: const EdgeInsets.all(24),
                decoration: BoxDecoration(
                  color: theme.cardColor.withOpacity(0.7),
                  borderRadius: BorderRadius.circular(28),
                  boxShadow: [
                    BoxShadow(
                      color: theme.primaryColor.withOpacity(0.1),
                      blurRadius: 10,
                      offset: const Offset(0, 5),
                    ),
                  ],
                ),
                child: ListView(
                  children: [
                    _buildSectionTitle(context, loc.theme),
                    _buildThemeSelector(themeProvider, selectedTheme),
                    const SizedBox(height: 24),
                    _buildSectionTitle(context, loc.language),
                    _buildLanguageSelector(),
                    const SizedBox(height: 24),
                    _buildSettingsOption(
                      icon: Icons.cleaning_services,
                      title: 'Clear Cache',
                      onTap: _isClearingCache ? null : _clearCache,
                      trailing: _isClearingCache ? const CircularProgressIndicator() : const Icon(Icons.chevron_right),
                    ),
                    _buildSettingsOption(
                      icon: Icons.star_rate,
                      title: loc.rateApp,
                      onTap: _rateApp,
                    ),
                    _buildSettingsOption(
                      icon: Icons.support_agent,
                      title: loc.contactSupport,
                      subtitle: loc.contactEmail,
                      onTap: _contactSupport,
                    ),
                    const SizedBox(height: 16),
                    Center(
                      child: Text(
                        '${loc.versionPrefix} $_version',
                        style: theme.textTheme.bodySmall?.copyWith(
                          fontStyle: FontStyle.italic,
                          color: theme.hintColor,
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildSectionTitle(BuildContext context, String title) {
    return Text(
      title,
      style: Theme.of(context).textTheme.headlineSmall?.copyWith(
        fontWeight: FontWeight.bold,
      ),
    );
  }

  Widget _buildThemeSelector(ThemeProvider provider, AppThemeMode selected) {
    return Card(
      margin: const EdgeInsets.symmetric(vertical: 8),
      child: Column(
        children: [
          RadioListTile<AppThemeMode>(
            title: const Text('Light'),
            value: AppThemeMode.light,
            groupValue: selected,
            onChanged: (v) => provider.toggleTheme(v!),
          ),
          RadioListTile<AppThemeMode>(
            title: const Text('Dark'),
            value: AppThemeMode.dark,
            groupValue: selected,
            onChanged: (v) => provider.toggleTheme(v!),
          ),
          RadioListTile<AppThemeMode>(
            title: const Text('Desh 🇧🇩'),
            value: AppThemeMode.bangladesh,
            groupValue: selected,
            onChanged: (v) => provider.toggleTheme(v!),
          ),
        ],
      ),
    );
  }

  Widget _buildLanguageSelector() {
    return Card(
      margin: const EdgeInsets.symmetric(vertical: 8),
      child: Container(
        height: 56,
        alignment: Alignment.centerLeft,
        padding: const EdgeInsets.symmetric(horizontal: 16),
        child: Consumer<LanguageProvider>(
          builder: (context, languageProvider, _) {
            return DropdownButton<String>(
              value: languageProvider.locale.languageCode,
              underline: const SizedBox(),
              onChanged: (lang) => languageProvider.setLocale(lang!),
              items: const [
                DropdownMenuItem(value: 'en', child: Text('English')),
                DropdownMenuItem(value: 'bn', child: Text('বাংলা')),
              ],
            );
          },
        ),
      ),
    );
  }

  Widget _buildSettingsOption({
    required IconData icon,
    required String title,
    String? subtitle,
    VoidCallback? onTap,
    Widget? trailing,
  }) {
    return ListTile(
      leading: Icon(icon),
      title: Text(title),
      subtitle: subtitle != null ? Text(subtitle) : null,
      onTap: onTap,
      trailing: trailing ?? const Icon(Icons.chevron_right),
    );
  }

  Future<void> _contactSupport() async {
    final loc = AppLocalizations.of(context)!;
    final uri = Uri.parse('mailto:${loc.contactEmail}');
    if (!await launchUrl(uri)) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(loc.mailClientError)),
      );
    }
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/home/home_screen.dart ===

// path: features/home/home_screen.dart
import 'package:flutter/material.dart';
import '/features/home/widgets/news_card.dart';
import '/features/home/widgets/shimmer_loading.dart';
import '/data/models/news_article.dart';
import '../../data/services/rss_service.dart';
import '/widgets/app_drawer.dart';
import '../../localization/l10n/app_localizations.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> with TickerProviderStateMixin {
  late TabController _tabController;
  final ScrollController _scrollController = ScrollController();

  late List<String> _categoryKeys;
  final Map<String, List<NewsArticle>> _articles = {};
  final Map<String, bool> _loadingStatus = {};
  late Map<String, List<String>> _rssFeeds;
  late Map<String, String> _localizedLabels;
  Locale? _lastLocale;

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();

    final locale = Localizations.localeOf(context);
    if (_lastLocale == locale) return;

    _lastLocale = locale;
    final loc = AppLocalizations.of(context)!;

    _rssFeeds = RssService.getSafeFeeds(locale) ?? {};
    _categoryKeys = _rssFeeds.keys.toList();

    _localizedLabels = {
      'latest': loc.latest,
      'national': loc.national,
      'business': loc.business,
      'sports': loc.sports,
      'technology': loc.technology,
      'entertainment': loc.entertainment,
      'lifestyle': loc.lifestyle,
      'blog': loc.blog,
    };

    _tabController = TabController(length: _categoryKeys.length, vsync: this);
    _tabController.addListener(() {
      _scrollController.jumpTo(0);
      setState(() {});
    });

    _articles.clear();
    _loadingStatus.clear();
    _loadAllFeeds();
  }

  Future<void> _loadAllFeeds() async {
    for (String category in _categoryKeys) {
      setState(() => _loadingStatus[category] = true);
      try {
        final List<NewsArticle> news =
            await RssService.fetchRssFeeds(_rssFeeds[category]!);
        setState(() {
          _articles[category] = news;
          _loadingStatus[category] = false;
        });
      } catch (e) {
        setState(() => _loadingStatus[category] = false);
        debugPrint('Error loading $category feeds: $e');
      }
    }
  }

  @override
  void dispose() {
    _tabController.dispose();
    _scrollController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    if (_categoryKeys.isEmpty) {
      return const Scaffold(
        body: Center(child: CircularProgressIndicator()),
      );
    }

    final currentKey = _categoryKeys[_tabController.index];
    final isLoading = _loadingStatus[currentKey] ?? true;
    final newsList = _articles[currentKey] ?? [];

    return Scaffold(
      appBar: AppBar(
        title: const Text('BDNewsHub 📰'),
        centerTitle: true,
        bottom: PreferredSize(
          preferredSize: const Size.fromHeight(48),
          child: SizedBox(
            height: 40,
            child: ListView.builder(
              scrollDirection: Axis.horizontal,
              padding: const EdgeInsets.symmetric(horizontal: 8),
              itemCount: _categoryKeys.length,
              itemBuilder: (_, i) {
                final key = _categoryKeys[i];
                final label = _localizedLabels[key] ?? key;
                return Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 4),
                  child: ChoiceChip(
                    label: Text(label),
                    selected: _tabController.index == i,
                    onSelected: (_) => _tabController.animateTo(i),
                  ),
                );
              },
            ),
          ),
        ),
      ),
      drawer: const AppDrawer(),
      body: isLoading
          ? const ShimmerLoading()
          : RefreshIndicator(
              onRefresh: _loadAllFeeds,
              child: ListView.builder(
                controller: _scrollController,
                padding: const EdgeInsets.all(8),
                itemCount: newsList.length,
                itemBuilder: (context, index) {
                  return NewsCard(article: newsList[index]);
                },
              ),
            ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/home/widgets/shimmer_list_loader.dart ===

import 'package:flutter/material.dart';
import 'package:shimmer/shimmer.dart';

class ShimmerLoading extends StatelessWidget {
  const ShimmerLoading({super.key});

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final isDark = theme.brightness == Brightness.dark;

    return ListView.builder(
      itemCount: 6,
      padding: const EdgeInsets.all(16),
      itemBuilder: (_, __) {
        return Shimmer.fromColors(
          baseColor: isDark ? Colors.grey.shade800 : Colors.grey.shade300,
          highlightColor: isDark ? Colors.grey.shade600 : Colors.grey.shade100,
          child: Container(
            margin: const EdgeInsets.only(bottom: 16),
            height: 180,
            decoration: BoxDecoration(
              color: isDark ? Colors.grey.shade900 : Colors.white,
              borderRadius: BorderRadius.circular(16),
            ),
          ),
        );
      },
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/home/widgets/shimmer_loading.dart ===

import 'package:flutter/material.dart';
import 'package:shimmer/shimmer.dart';

class ShimmerLoading extends StatelessWidget {
  const ShimmerLoading({
    super.key,
    this.height = 150,
    this.width = double.infinity,
    this.borderRadius = 16.0,
    this.margin = const EdgeInsets.all(8.0),
    this.period = const Duration(milliseconds: 1500),
  });

  final double height;
  final double width;
  final double borderRadius;
  final EdgeInsetsGeometry margin;
  final Duration period;

  @override
  Widget build(BuildContext context) {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    final baseColor = isDark ? Colors.grey.shade800 : Colors.grey.shade300;
    final highlightColor = isDark ? Colors.grey.shade700 : Colors.grey.shade100;

    return Card(
      elevation: 6,
      margin: margin,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(borderRadius),
      ),
      child: Shimmer.fromColors(
        baseColor: baseColor,
        highlightColor: highlightColor,
        period: period,
        child: Container(
          width: width,
          height: height,
          decoration: BoxDecoration(
            color: baseColor,
            borderRadius: BorderRadius.circular(borderRadius),
          ),
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/home/widgets/webview_screen.dart ===

import 'package:flutter/material.dart';
import 'package:flutter_inappwebview/flutter_inappwebview.dart';

class WebViewScreen extends StatefulWidget {
  const WebViewScreen({super.key, required this.url});
  final String url;

  @override
  State<WebViewScreen> createState() => _WebViewScreenState();
}

class _WebViewScreenState extends State<WebViewScreen> {
  InAppWebViewController? webViewController;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('View Article')),
      body: InAppWebView(
        initialUrlRequest: URLRequest(url: WebUri(widget.url)),
        onWebViewCreated: (InAppWebViewController controller) => webViewController = controller,
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/home/widgets/news_card.dart ===

// path: lib/widgets/news_card.dart

import 'package:flutter/material.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:go_router/go_router.dart';
import 'package:share_plus/share_plus.dart';
import '/data/models/news_article.dart';

class NewsCard extends StatelessWidget {
  const NewsCard({
    super.key,
    this.article,
    this.news,
    this.searchQuery = '',
    this.isFavorite = false,
    this.onFavoriteToggle,
  }) : assert(article != null || news != null);

  final NewsArticle? article;
  final Map<String, dynamic>? news;
  final String searchQuery;
  final bool isFavorite;
  final VoidCallback? onFavoriteToggle;

  void _open(BuildContext context) {
    final url = article?.url ?? news?['contact']?['website'] ?? '';
    final title = article?.title ?? news?['name'] ?? 'News';

    if (url.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('No URL available')),
      );
      return;
    }

    try {
      context.pushNamed('webview', extra: {'url': url, 'title': title});
    } catch (_) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Failed to open URL')),
      );
    }
  }

  void _share(BuildContext context) {
    final url = article?.url ?? news?['contact']?['website'] ?? '';
    if (url.isNotEmpty) {
      Share.share(url);
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Nothing to share')),
      );
    }
  }

  String _getImageUrl() {
    if (article?.imageUrl?.isNotEmpty == true) {
      return article!.imageUrl!;
    } else if (news?['imageUrl']?.isNotEmpty == true) {
      return news!['imageUrl'];
    }
    return '';
  }

  bool _isBanglaNews() {
    final lang = news?['language'] ?? article?.language ?? '';
    return lang.toLowerCase().contains('bn');
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final isDark = theme.brightness == Brightness.dark;
    final glowColor = theme.colorScheme.primary.withOpacity(isDark ? 0.1 : 0.4);
    final String logoUrl = _getImageUrl();
    final String name = article?.title ?? news?['name'] ?? 'Untitled';

    return Card(
      elevation: 6,
      margin: const EdgeInsets.symmetric(vertical: 10, horizontal: 8),
      color: theme.cardColor,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(18)),
      shadowColor: glowColor,
      child: InkWell(
        borderRadius: BorderRadius.circular(18),
        onTap: () => _open(context),
        splashColor: theme.colorScheme.primary.withOpacity(0.2),
        highlightColor: theme.colorScheme.primary.withOpacity(0.1),
        child: Padding(
          padding: const EdgeInsets.all(14),
          child: Row(
            children: [
              ClipRRect(
                borderRadius: BorderRadius.circular(10),
                child: logoUrl.isNotEmpty
                    ? CachedNetworkImage(
                        imageUrl: logoUrl,
                        width: 55,
                        height: 55,
                        fit: BoxFit.cover,
                        placeholder: (_, __) => Image.asset(
                          'assets/icons/app-icon.png',
                          width: 55,
                          height: 55,
                          fit: BoxFit.cover,
                        ),
                        errorWidget: (_, __, ___) => Image.asset(
                          'assets/icons/app-icon.png',
                          width: 55,
                          height: 55,
                          fit: BoxFit.cover,
                        ),
                      )
                    : Image.asset(
                        'assets/icons/app-icon.png',
                        width: 55,
                        height: 55,
                        fit: BoxFit.cover,
                      ),
              ),
              const SizedBox(width: 14),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Expanded(
                          child: Text(
                            name,
                            maxLines: 1,
                            overflow: TextOverflow.ellipsis,
                            style: theme.textTheme.titleMedium?.copyWith(
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                        if (_isBanglaNews())
                          const Padding(
                            padding: EdgeInsets.only(left: 4.0),
                            child: Icon(Icons.flag, size: 16, color: Colors.green),
                          ),
                      ],
                    ),
                  ],
                ),
              ),
              Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  if (onFavoriteToggle != null)
                    IconButton(
                      icon: Icon(
                        isFavorite ? Icons.favorite : Icons.favorite_border,
                        color: isFavorite ? Colors.red : Colors.grey,
                      ),
                      onPressed: onFavoriteToggle,
                    ),
                  IconButton(
                    icon: const Icon(Icons.share, color: Colors.blueGrey),
                    onPressed: () => _share(context),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/splash/splash_screen.dart ===

// splash_screen.dart
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import '../../core/splash_service.dart';

class SplashScreen extends StatefulWidget {
  const SplashScreen({super.key});

  @override
  State<SplashScreen> createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen> with TickerProviderStateMixin {
  bool _showLogo = false;
  bool _showText = false;
  late AnimationController _zoomController;
  late Animation<double> _zoomAnimation;

  @override
  void initState() {
    super.initState();

    _zoomController = AnimationController(
      duration: const Duration(milliseconds: 1600),
      vsync: this,
    );
    _zoomAnimation = Tween<double>(begin: 0.7, end: 1.4).animate(
      CurvedAnimation(parent: _zoomController, curve: Curves.easeInOutBack),
    );

    _runAnimations();
    _navigateToNext();
  }

  @override
  void dispose() {
    _zoomController.dispose();
    super.dispose();
  }

  Future<void> _runAnimations() async {
    await Future.delayed(const Duration(milliseconds: 300));
    if (!mounted) return;
    setState(() => _showLogo = true);
    _zoomController.forward();
    await Future.delayed(const Duration(milliseconds: 800));
    if (!mounted) return;
    setState(() => _showText = true);
  }

  Future<void> _navigateToNext() async {
    await Future.delayed(const Duration(seconds: 2));

    final splashService = SplashService();
    final nextRoute = await splashService.resolveInitialRoute();

    if (!mounted) return;
    context.go(nextRoute);
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return Scaffold(
      backgroundColor: theme.colorScheme.background,
      body: Center(
        child: AnimatedOpacity(
          opacity: _showLogo ? 1 : 0,
          duration: const Duration(milliseconds: 800),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              ScaleTransition(
                scale: _zoomAnimation,
                child: ClipRRect(
                  borderRadius: BorderRadius.circular(24),
                  child: Image.asset(
                    'assets/app-icon.png',
                    width: 120,
                    height: 120,
                    fit: BoxFit.cover,
                  ),
                ),
              ),
              const SizedBox(height: 24),
              AnimatedOpacity(
                opacity: _showText ? 1 : 0,
                duration: const Duration(milliseconds: 600),
                child: Column(
                  children: [
                    Text(
                      'BDNews',
                      style: theme.textTheme.headlineMedium?.copyWith(
                        fontWeight: FontWeight.bold,
                        letterSpacing: 1.2,
                      ),
                    ),
                    const SizedBox(height: 12),
                    const CircularProgressIndicator(strokeWidth: 2),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/news_detail/news_detail_screen.dart ===

import 'package:flutter/material.dart';
import 'package:share_plus/share_plus.dart';
import '../../data/models/news_article.dart';
import '../../core/utils/favorites_manager.dart';

class NewsDetailScreen extends StatefulWidget {
  const NewsDetailScreen({super.key, required this.news});
  final NewsArticle news;

  @override
  State<NewsDetailScreen> createState() => _NewsDetailScreenState();
}

class _NewsDetailScreenState extends State<NewsDetailScreen> {
  bool isFavorite = false;

  @override
  void initState() {
    super.initState();
    _checkFavorite();
  }

  Future<void> _checkFavorite() async {
    final bool favorite = FavoritesManager.instance.favoriteArticles
        .any((article) => article.url == widget.news.url);
    setState(() {
      isFavorite = favorite;
    });
  }

  Future<void> _toggleFavorite() async {
    if (isFavorite) {
      await FavoritesManager.instance.removeFavorite(widget.news);
    } else {
      await FavoritesManager.instance.addFavorite(widget.news);
    }
    _checkFavorite();
  }

  void _shareNews() {
    Share.share('${widget.news.title}\n\n${widget.news.url}');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.news.source),
        actions: <Widget>[
          IconButton(
            icon: const Icon(Icons.share),
            onPressed: _shareNews,
          ),
          IconButton(
            icon: Icon(isFavorite ? Icons.favorite : Icons.favorite_border),
            onPressed: _toggleFavorite,
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: ListView(
          children: <Widget>[
            Text(
              widget.news.title,
              style: Theme.of(context).textTheme.headlineSmall,
            ),
            const SizedBox(height: 10),
            Text(
              widget.news.fullContent.isNotEmpty
                  ? widget.news.fullContent
                  : widget.news.snippet,
              style: Theme.of(context).textTheme.bodyLarge,
            ),
          ],
        ),
      ),
    );
  }
}

// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/favorites/favorites_screen.dart ===

import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import '../../core/utils/favorites_manager.dart';
import '../../localization/l10n/app_localizations.dart';
import '../../data/models/news_article.dart';
import '../../widgets/app_drawer.dart';

class FavoritesScreen extends StatefulWidget {
  const FavoritesScreen({super.key});

  @override
  State<FavoritesScreen> createState() => _FavoritesScreenState();
}

class _FavoritesScreenState extends State<FavoritesScreen> {
  String _filter = 'All';
  late FavoritesManager favoritesManager;

  @override
  void initState() {
    super.initState();
    favoritesManager = FavoritesManager.instance;
    favoritesManager.loadFavorites().then((_) => setState(() {}));
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final isDark = Theme.of(context).brightness == Brightness.dark;
    final categories = ['All', 'Articles', 'Magazines', 'Newspapers'];

    return Scaffold(
      drawer: const AppDrawer(),
      appBar: AppBar(
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => GoRouter.of(context).pop(),
        ),
        title: Text(loc.favorites),
      ),
      body: Stack(
        fit: StackFit.expand,
        children: [
          Image.asset(
            'assets/theme/image.png',
            fit: BoxFit.cover,
            color: isDark
                ? Colors.black.withOpacity(0.6)
                : Colors.white.withOpacity(0.4),
            colorBlendMode: BlendMode.darken,
          ),
          Column(
            children: [
              Padding(
                padding: const EdgeInsets.all(12.0),
                child: DropdownButton<String>(
                  value: _filter,
                  isExpanded: true,
                  items: categories
                      .map((cat) => DropdownMenuItem(
                            value: cat,
                            child: Text(cat,
                                style:
                                    Theme.of(context).textTheme.bodyLarge),
                          ))
                      .toList(),
                  onChanged: (value) {
                    if (value != null) setState(() => _filter = value);
                  },
                ),
              ),
              Expanded(
                child: RefreshIndicator(
                  onRefresh: () async {
                    await favoritesManager.loadFavorites();
                    setState(() {});
                  },
                  child: ListView(
                    padding: const EdgeInsets.all(16),
                    children: [
                      if ((_filter == 'All' ||
                              _filter == 'Articles') &&
                          favoritesManager.favoriteArticles.isNotEmpty)
                        _buildSection(
                          context,
                          title: loc.favoriteArticles,
                          items: favoritesManager.favoriteArticles
                              .map((article) =>
                                  _buildArticleCard(context, article))
                              .toList(),
                        ),

                      if ((_filter == 'All' ||
                              _filter == 'Magazines') &&
                          favoritesManager.favoriteMagazines.isNotEmpty)
                        _buildSection(
                          context,
                          title: loc.favoriteMagazines,
                          items: favoritesManager.favoriteMagazines
                              .map((magazine) =>
                                  _buildMagazineCard(context, magazine))
                              .toList(),
                        ),

                      if ((_filter == 'All' ||
                              _filter == 'Newspapers') &&
                          favoritesManager.favoriteNewspapers.isNotEmpty)
                        _buildSection(
                          context,
                          title: loc.favoriteNewspapers,
                          items: favoritesManager.favoriteNewspapers
                              .map((paper) =>
                                  _buildNewspaperCard(context, paper))
                              .toList(),
                        ),

                      if (favoritesManager.favoriteArticles.isEmpty &&
                          favoritesManager.favoriteMagazines.isEmpty &&
                          favoritesManager.favoriteNewspapers.isEmpty)
                        _buildEmptyState(context),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildSection(BuildContext context,
      {required String title, required List<Widget> items}) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(title,
            style: Theme.of(context)
                .textTheme
                .headlineSmall
                ?.copyWith(fontWeight: FontWeight.bold)),
        const SizedBox(height: 8),
        ...items,
        const SizedBox(height: 24),
      ],
    );
  }

  Widget _buildArticleCard(BuildContext context, NewsArticle article) {
    final loc = AppLocalizations.of(context)!;
    return Card(
      margin: const EdgeInsets.symmetric(vertical: 8),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      elevation: 5,
      child: ListTile(
        leading: article.imageUrl != null
            ? ClipRRect(
                borderRadius: BorderRadius.circular(8),
                child: Image.network(article.imageUrl!,
                    width: 50, height: 50, fit: BoxFit.cover),
              )
            : null,
        title: Text(article.title,
            maxLines: 2, overflow: TextOverflow.ellipsis),
        subtitle:
            Text(article.source, style: Theme.of(context).textTheme.labelSmall),
        onTap: () => GoRouter.of(context)
            .go('/news-detail', extra: article),
      ),
    );
  }

  Widget _buildMagazineCard(
      BuildContext context, Map<String, dynamic> magazine) {
    return Card(
      margin: const EdgeInsets.symmetric(vertical: 8),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      elevation: 5,
      child: ListTile(
        leading: magazine['cover'] != null
            ? ClipRRect(
                borderRadius: BorderRadius.circular(8),
                child: Image.network(magazine['cover'],
                    width: 50, height: 50, fit: BoxFit.cover),
              )
            : null,
        title: Text(magazine['name'] ?? '',
            maxLines: 2, overflow: TextOverflow.ellipsis),
        subtitle: Text(magazine['description'] ?? '',
            maxLines: 2, overflow: TextOverflow.ellipsis),
        onTap: () {},
      ),
    );
  }

  Widget _buildNewspaperCard(
      BuildContext context, Map<String, dynamic> newspaper) {
    return Card(
      margin: const EdgeInsets.symmetric(vertical: 8),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      elevation: 5,
      child: ListTile(
        leading: newspaper['cover'] != null
            ? ClipRRect(
                borderRadius: BorderRadius.circular(8),
                child: Image.network(newspaper['cover'],
                    width: 50, height: 50, fit: BoxFit.cover),
              )
            : null,
        title: Text(newspaper['name'] ?? '',
            maxLines: 2, overflow: TextOverflow.ellipsis),
        subtitle: Text(newspaper['description'] ?? '',
            maxLines: 2, overflow: TextOverflow.ellipsis),
        onTap: () {},
      ),
    );
  }

  Widget _buildEmptyState(BuildContext context) {
    return Center(
      child: Padding(
        padding: const EdgeInsets.only(top: 100),
        child: Text(
          AppLocalizations.of(context)!.noFavoritesYet,
          style: Theme.of(context).textTheme.bodyLarge,
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/favorites/widgets/animated_background.dart ===

// TODO Implement this library.

// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/about/about_screen.dart ===

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:package_info_plus/package_info_plus.dart';
import 'package:go_router/go_router.dart';

class AboutScreen extends StatefulWidget {
  const AboutScreen({super.key});

  @override
  State<AboutScreen> createState() => _AboutScreenState();
}

class _AboutScreenState extends State<AboutScreen> {
  String _appVersion = '';

  @override
  void initState() {
    super.initState();
    _loadAppInfo();
  }

  Future<void> _loadAppInfo() async {
    final PackageInfo info = await PackageInfo.fromPlatform();
    setState(() {
      _appVersion = '${info.version} (Build ${info.buildNumber})';
    });
  }

  Future<void> _launchEmail() async {
    final Uri emailUri = Uri(
      scheme: 'mailto',
      path: 'customerservice@dsmobiles.com',
      queryParameters: {'subject': 'BDNewsHub App Inquiry'},
    );
    if (await canLaunchUrl(emailUri)) await launchUrl(emailUri);
  }

  Future<void> _launchWebsite() async {
    final Uri uri = Uri.parse('https://www.dsmobiles.com');
    if (await canLaunchUrl(uri)) await launchUrl(uri, mode: LaunchMode.externalApplication);
  }

  void _copyToClipboard(String text, String label) {
    Clipboard.setData(ClipboardData(text: text));
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('$label copied to clipboard'),
        backgroundColor: Theme.of(context).colorScheme.secondary,
        duration: const Duration(seconds: 2),
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        margin: const EdgeInsets.all(16),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final colorScheme = theme.colorScheme;

    return Scaffold(
      appBar: AppBar(
        title: const Text('About Us'),
        centerTitle: true,
        elevation: 2,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => context.go('/home'),
        ),
      ),
      body: ListView(
        padding: const EdgeInsets.all(20),
        children: [
          Column(
            children: [
              Container(
                height: 100,
                width: 100,
                margin: const EdgeInsets.only(bottom: 12),
                decoration: BoxDecoration(
                  shape: BoxShape.circle,
                  border: Border.all(color: colorScheme.primary, width: 2),
                  boxShadow: [
                    BoxShadow(color: colorScheme.primary.withOpacity(0.2), blurRadius: 10)
                  ],
                  image: const DecorationImage(
                    image: AssetImage('assets/logo.png'),
                    fit: BoxFit.cover,
                  ),
                ),
              ),
              Text('BDNewsHub',
                  style: theme.textTheme.headlineSmall?.copyWith(fontWeight: FontWeight.bold)),
              const SizedBox(height: 6),
              Text(
                'Real-time News at Your Fingertips',
                style: theme.textTheme.bodyMedium?.copyWith(
                  color: theme.colorScheme.onSurface.withOpacity(0.7),
                ),
              ),
            ],
          ),
          const SizedBox(height: 30),
          _buildThemeCard(
            icon: Icons.auto_stories,
            title: 'Our Story',
            content:
                'BDNewsHub is the first mobile app by DSMobiles Group, delivering fast and reliable news updates. Our mission is to create free, high-quality apps that inform and empower.',
          ),
          _buildThemeCard(
            icon: Icons.track_changes,
            title: 'Our Vision',
            content:
                'We envision a world where information is free and universal. Through user-first design and innovative tools, we aim to create digital experiences that inspire.',
          ),
          _buildThemeCard(
            icon: Icons.mail,
            title: 'Contact Us',
            contentWidget: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                _buildContactTile(
                  label: 'support@dsmobiles.com',
                  icon: Icons.email,
                  onTap: _launchEmail,
                  onLongPress: () => _copyToClipboard('support@dsmobiles.com', 'Email'),
                ),
                const SizedBox(height: 12),
                _buildContactTile(
                  label: 'www.dsmobiles.com',
                  icon: Icons.language,
                  onTap: _launchWebsite,
                  onLongPress: () => _copyToClipboard('https://www.dsmobiles.com', 'Website'),
                ),
              ],
            ),
          ),
          const SizedBox(height: 20),
          Center(
            child: Column(
              children: [
                Text('Version $_appVersion', style: theme.textTheme.bodySmall),
                const SizedBox(height: 4),
                Text(
                  '© ${DateTime.now().year} DreamSD Group',
                  style: theme.textTheme.labelSmall?.copyWith(
                    color: theme.colorScheme.onSurface.withOpacity(0.5),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildThemeCard({
    required IconData icon,
    required String title,
    String? content,
    Widget? contentWidget,
  }) {
    final theme = Theme.of(context);
    return Container(
      margin: const EdgeInsets.symmetric(vertical: 10),
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(18),
        color: theme.cardColor,
        boxShadow: [BoxShadow(color: theme.shadowColor.withOpacity(0.05), blurRadius: 12)],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Icon(icon, color: theme.colorScheme.primary, size: 32),
          const SizedBox(height: 16),
          Text(
            title,
            style: theme.textTheme.titleMedium?.copyWith(fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 10),
          if (content != null)
            Text(
              content,
              style: theme.textTheme.bodyMedium?.copyWith(height: 1.5),
              textAlign: TextAlign.justify,
            ),
          if (contentWidget != null) contentWidget,
        ],
      ),
    );
  }

  Widget _buildContactTile({
    required String label,
    required IconData icon,
    required VoidCallback onTap,
    required VoidCallback onLongPress,
  }) {
    final theme = Theme.of(context);
    return InkWell(
      borderRadius: BorderRadius.circular(12),
      onTap: onTap,
      onLongPress: onLongPress,
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 14),
        decoration: BoxDecoration(
          color: theme.cardColor.withOpacity(0.95),
          borderRadius: BorderRadius.circular(12),
          border: Border.all(color: theme.colorScheme.outline.withOpacity(0.1)),
        ),
        child: Row(
          children: [
            Icon(icon, color: theme.colorScheme.primary),
            const SizedBox(width: 14),
            Expanded(
              child: Text(
                label,
                style: theme.textTheme.bodyMedium?.copyWith(fontWeight: FontWeight.w600),
              ),
            ),
            const Icon(Icons.copy, size: 18, color: Colors.grey),
          ],
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/search/search_screen.dart ===

// Updated lib/features/search/search_screen.dart

import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../../core/navigation_helper.dart';
import '../../localization/l10n/app_localizations.dart';

class SearchScreen extends StatefulWidget {
  const SearchScreen({super.key});

  @override
  State<SearchScreen> createState() => _SearchScreenState();
}

class _SearchScreenState extends State<SearchScreen> {
  final TextEditingController _searchController = TextEditingController();
  final GlobalKey<AnimatedListState> _listKey = GlobalKey<AnimatedListState>();

  List<String> _searchResults = [];
  List<String> _recentSearches = [];
  bool _isSearching = false;

  @override
  void initState() {
    super.initState();
    _loadRecentSearches();
  }

  Future<void> _loadRecentSearches() async {
    final prefs = await SharedPreferences.getInstance();
    final history = prefs.getStringList('recent_searches') ?? [];
    setState(() => _recentSearches = history);
  }

  Future<void> _saveSearchQuery(String query) async {
    final prefs = await SharedPreferences.getInstance();
    final history = prefs.getStringList('recent_searches') ?? [];
    if (history.contains(query)) history.remove(query);
    history.insert(0, query);
    if (history.length > 10) history.removeLast();
    await prefs.setStringList('recent_searches', history);
  }

  void _onSearch(String query) async {
    if (query.trim().isEmpty) return;

    setState(() => _isSearching = true);
    await Future.delayed(const Duration(milliseconds: 600));

    setState(() {
      _searchResults.clear();
      _isSearching = false;
    });

    final newResults = List.generate(
      5,
      (index) => 'Result for "$query" - Article ${index + 1}',
    );

    for (var result in newResults) {
      _searchResults.add(result);
      _listKey.currentState?.insertItem(_searchResults.length - 1, duration: const Duration(milliseconds: 400));
    }

    await _saveSearchQuery(query);
    await _loadRecentSearches();
  }

  void _clearSearch() {
    for (var i = _searchResults.length - 1; i >= 0; i--) {
      _listKey.currentState?.removeItem(
        i,
        (context, animation) => _buildAnimatedItem(_searchResults[i], animation),
        duration: const Duration(milliseconds: 400),
      );
    }
    _searchResults.clear();
    _searchController.clear();
  }

  Widget _buildAnimatedItem(String item, Animation<double> animation) {
    return SizeTransition(
      sizeFactor: animation,
      child: ListTile(
        leading: const Icon(Icons.article_outlined),
        title: Text(item),
        onTap: () {
          // TODO: Navigate to article detail
        },
      ),
    );
  }

  Widget _buildRecentTile(String query) {
    return ListTile(
      leading: const Icon(Icons.history),
      title: Text(query),
      onTap: () {
        _searchController.text = query;
        _onSearch(query);
      },
    );
  }

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final theme = Theme.of(context);

    return Scaffold(
      appBar: AppBar(
        title: Text(loc.searchHint),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => NavigationHelper.goHome(context),
        ),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            TextField(
              controller: _searchController,
              textInputAction: TextInputAction.search,
              onSubmitted: _onSearch,
              decoration: InputDecoration(
                hintText: loc.searchHint,
                prefixIcon: const Icon(Icons.search),
                suffixIcon: _searchController.text.isNotEmpty
                    ? IconButton(
                        icon: const Icon(Icons.clear),
                        onPressed: _clearSearch,
                      )
                    : null,
                border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),
              ),
            ),
            const SizedBox(height: 20),
            Expanded(
              child: _isSearching
                  ? const Center(child: CircularProgressIndicator())
                  : _searchResults.isNotEmpty
                      ? AnimatedList(
                          key: _listKey,
                          initialItemCount: _searchResults.length,
                          itemBuilder: (context, index, animation) {
                            final item = _searchResults[index];
                            return _buildAnimatedItem(item, animation);
                          },
                        )
                      : ListView(
                          children: [
                            Text(
                              'Recent Searches',
                              style: theme.textTheme.titleMedium,
                            ),
                            const SizedBox(height: 8),
                            ..._recentSearches.map(_buildRecentTile),
                          ],
                        ),
            ),
          ],
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/common/webview_screen.dart ===


import 'package:flutter/material.dart';
import 'package:flutter_inappwebview/flutter_inappwebview.dart';

class WebViewScreen extends StatefulWidget {
  const WebViewScreen({super.key, required this.url, this.title = 'Web View'});
  final String url;
  final String title;

  @override
  State<WebViewScreen> createState() => _WebViewScreenState();
}

class _WebViewScreenState extends State<WebViewScreen> {
  InAppWebViewController? webViewController;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text(widget.title)),
      body: InAppWebView(
        initialUrlRequest: URLRequest(url: WebUri(widget.url)),
        onWebViewCreated: (InAppWebViewController controller) => webViewController = controller,
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/magazine/magazine_screen.dart ===

import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:go_router/go_router.dart';
import 'package:shared_preferences/shared_preferences.dart';

import '../../localization/l10n/app_localizations.dart';
import '../../widgets/app_drawer.dart';
import '../../core/utils/favorites_manager.dart';
import '../magazine/widgets/animated_background.dart';
import '../magazine/widgets/magazine_card.dart';

class MagazineScreen extends StatefulWidget {
  const MagazineScreen({super.key});

  @override
  State<MagazineScreen> createState() => _MagazineScreenState();
}

class _MagazineScreenState extends State<MagazineScreen>
    with SingleTickerProviderStateMixin {
  final List<dynamic> magazines = [];
  bool _isLoading = true;
  late final TabController _tabController;
  final ScrollController _scrollController = ScrollController();
  final ScrollController _listController = ScrollController();
  final TextEditingController _searchController = TextEditingController();
  String _searchQuery = '';

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 9, vsync: this)
      ..addListener(() {
        setState(() {});
        _listController.jumpTo(0);
      });
    _loadMagazines();
  }

  Future<void> _loadMagazines() async {
    setState(() => _isLoading = true);
    try {
      final raw = await rootBundle.loadString('assets/data.json');
      final data = json.decode(raw);
      setState(() {
        magazines
          ..clear()
          ..addAll(data['magazines'] ?? []);
        _isLoading = false;
      });
    } catch (e) {
      setState(() => _isLoading = false);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Load failed: $e')),
      );
    }
  }

  Future<void> _toggleFavorite(dynamic m) async {
    await FavoritesManager.instance.toggleMagazine(m);
    setState(() {});
  }

  List<dynamic> getFilteredMagazines() {
    final loc = AppLocalizations.of(context)!;
    final categories = [
      loc.favorites,
      loc.catFashion,
      loc.catScience,
      loc.catFinance,
      loc.catAffairs,
      loc.catTech,
      loc.catArts,
      loc.catLifestyle,
      loc.catSports,
    ];

    final categoryKeywords = {
      loc.catFashion: ['fashion', 'style', 'aesthetics'],
      loc.catScience: ['science', 'discovery', 'research'],
      loc.catFinance: ['finance', 'economics', 'business'],
      loc.catAffairs: ['global', 'politics', 'world', 'international', 'defense'],
      loc.catTech: ['technology', 'innovation', 'tech'],
      loc.catArts: ['arts', 'culture', 'humanities', 'literature'],
      loc.catLifestyle: ['lifestyle', 'luxury', 'travel'],
      loc.catSports: ['sports', 'athletics', 'performance'],
    };

    final sel = categories[_tabController.index];
    List<dynamic> filtered;

    if (sel == loc.favorites) {
      final favIds = FavoritesManager.instance.favoriteMagazines.map((m) => m['id'].toString()).toSet();
      filtered = magazines.where((m) => favIds.contains(m['id'].toString())).toList();
    } else {
      final keys = categoryKeywords[sel] ?? [];
      filtered = magazines.where((m) {
        final tags = List<String>.from(m['tags'] ?? []);
        return tags.any((t) => keys.any((kw) => t.toLowerCase().contains(kw)));
      }).toList();
    }

    if (_searchQuery.isNotEmpty) {
      final q = _searchQuery.toLowerCase();
      filtered = filtered.where((m) {
        final name = (m['name'] ?? '').toString().toLowerCase();
        final desc = (m['description'] ?? '').toString().toLowerCase();
        return name.contains(q) || desc.contains(q);
      }).toList();
    }

    return filtered;
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final categories = [
      loc.favorites,
      loc.catFashion,
      loc.catScience,
      loc.catFinance,
      loc.catAffairs,
      loc.catTech,
      loc.catArts,
      loc.catLifestyle,
      loc.catSports,
    ];

    return WillPopScope(
      onWillPop: () async {
        context.go('/home');
        return false;
      },
      child: Scaffold(
        drawer: const AppDrawer(),
        appBar: AppBar(
          automaticallyImplyLeading: false,
          centerTitle: true,
          title: Text(loc.magazines),
          bottom: PreferredSize(
            preferredSize: const Size.fromHeight(40),
            child: Padding(
              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
              child: TextField(
                controller: _searchController,
                onChanged: (v) => setState(() => _searchQuery = v),
                style: Theme.of(context).textTheme.bodyMedium,
                decoration: InputDecoration(
                  isDense: true,
                  contentPadding: const EdgeInsets.symmetric(vertical: 8, horizontal: 12),
                  hintText: loc.searchHint,
                  prefixIcon: const Icon(Icons.search, size: 20),
                ),
              ),
            ),
          ),
        ),
        body: Column(
          children: [
            SizedBox(
              height: 40,
              child: ListView.builder(
                scrollDirection: Axis.horizontal,
                controller: _scrollController,
                padding: const EdgeInsets.symmetric(horizontal: 8),
                itemCount: categories.length,
                itemBuilder: (ctx, i) {
                  return Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 4),
                    child: ChoiceChip(
                      label: Text(categories[i]),
                      selected: i == _tabController.index,
                      onSelected: (_) => _tabController.animateTo(i),
                    ),
                  );
                },
              ),
            ),
            Expanded(
              child: AnimatedBackground(
                duration: const Duration(seconds: 30),
                child: _isLoading
                    ? const Center(child: CircularProgressIndicator())
                    : getFilteredMagazines().isEmpty
                        ? Center(child: Text(loc.noMagazines))
                        : RefreshIndicator(
                            onRefresh: _loadMagazines,
                            child: ListView.builder(
                              controller: _listController,
                              padding: const EdgeInsets.all(16),
                              itemCount: getFilteredMagazines().length,
                              itemBuilder: (_, idx) {
                                final m = getFilteredMagazines()[idx];
                                final id = m['id'].toString();
                                return Padding(
                                  padding: const EdgeInsets.only(bottom: 16),
                                  child: MagazineCard(
                                    magazine: m,
                                    isFavorite: FavoritesManager.instance.isFavoriteMagazine(id),
                                    onFavoriteToggle: () => _toggleFavorite(m),
                                  ),
                                );
                              },
                            ),
                          ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/magazine/widgets/magazine_card.dart ===

import 'package:flutter/material.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:go_router/go_router.dart';

class MagazineCard extends StatelessWidget {
  const MagazineCard({
    required this.magazine,
    required this.isFavorite,
    required this.onFavoriteToggle,
    super.key,
  });

  final Map<String, dynamic> magazine;
  final bool isFavorite;
  final VoidCallback onFavoriteToggle;

  void _openMagazine(BuildContext context) {
    final String url = magazine['contact']?['website'] ?? '';
    final String title = magazine['name'] ?? 'Magazine';

    final Uri? parsed = Uri.tryParse(url);
    if (parsed == null || !(parsed.scheme == 'http' || parsed.scheme == 'https')) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Invalid or missing website URL')),
      );
      return;
    }

    context.pushNamed('webview', extra: {'url': url, 'title': title});
  }

  String _getDescription() {
    final String desc = magazine['description'] ?? '';
    if (desc.isNotEmpty) return desc;
    final String country = magazine['country'] ?? 'Unknown Country';
    final String language = magazine['language'] ?? 'Unknown Language';
    return '$country • $language';
  }

  String _getLogoUrl() {
    final String? website = magazine['contact']?['website'] as String?;
    if (website != null && website.isNotEmpty) {
      try {
        final host = Uri.parse(website).host;
        return 'https://logo.clearbit.com/$host';
      } catch (_) {}
    }
    return '';
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final isDark = theme.brightness == Brightness.dark;
    final glowColor = theme.colorScheme.primary.withOpacity(isDark ? 0.1 : 0.4);

    final String logoUrl = _getLogoUrl();
    final String name = magazine['name'] ?? 'Unknown Magazine';
    final String description = _getDescription();
    final String fallbackText = (magazine['name'] as String?)?.substring(0, 2).toUpperCase() ?? 'MG';

    return InkWell(
      onTap: () => _openMagazine(context),
      child: Card(
        elevation: 6,
        margin: const EdgeInsets.symmetric(vertical: 10, horizontal: 8),
        color: theme.cardColor,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(18)),
        shadowColor: glowColor,
        child: Container(
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(18),
            boxShadow: [
              BoxShadow(
                color: glowColor,
                blurRadius: 8,
                offset: const Offset(0, 4),
              ),
            ],
          ),
          child: Padding(
            padding: const EdgeInsets.all(14),
            child: Row(
              children: [
                ClipRRect(
                  borderRadius: BorderRadius.circular(10),
                  child: CachedNetworkImage(
                    imageUrl: logoUrl,
                    width: 55,
                    height: 55,
                    fit: BoxFit.cover,
                    placeholder: (_, __) => const Center(
                      child: SizedBox(
                        width: 20,
                        height: 20,
                        child: CircularProgressIndicator(strokeWidth: 2),
                      ),
                    ),
                    errorWidget: (_, __, ___) => Image.asset(
                      isDark
                          ? 'assets/imageplaceHolder_dark.png'
                          : 'assets/imageplaceHolder.png',
                      width: 55,
                      height: 55,
                      fit: BoxFit.cover,
                    ),
                  ),
                ),
                const SizedBox(width: 14),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        name,
                        maxLines: 1,
                        overflow: TextOverflow.ellipsis,
                        style: theme.textTheme.titleMedium?.copyWith(
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      const SizedBox(height: 6),
                      Text(
                        description,
                        maxLines: 2,
                        overflow: TextOverflow.ellipsis,
                        style: theme.textTheme.bodyMedium?.copyWith(
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                    ],
                  ),
                ),
                IconButton(
                  icon: Icon(
                    isFavorite ? Icons.favorite : Icons.favorite_border,
                    color: isFavorite ? Colors.redAccent : Colors.grey,
                  ),
                  onPressed: onFavoriteToggle,
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/magazine/widgets/webview_screen.dart ===

// lib/features/common/webview_screen.dart

import 'dart:io';
import 'package:flutter/material.dart';
import 'package:webview_flutter/webview_flutter.dart';
import '../../news/widgets/animated_background.dart';

class WebViewScreen extends StatefulWidget {
  const WebViewScreen({
    required this.url,
    required this.title,
    super.key,
  });

  final String url;
  final String title;

  @override
  State<WebViewScreen> createState() => _WebViewScreenState();
}

class _WebViewScreenState extends State<WebViewScreen> {
  late final WebViewController _controller;
  bool _isLoading = true;
  int _progress = 0;

  @override
  void initState() {
    super.initState();

    // Initialize the WebView controller
    _controller = WebViewController()
      ..setJavaScriptMode(JavaScriptMode.unrestricted)
      ..setBackgroundColor(Colors.transparent)
      ..setNavigationDelegate(
        NavigationDelegate(
          onNavigationRequest: (NavigationRequest request) {
            final uri = Uri.tryParse(request.url);
            // Enforce HTTPS
            if (uri == null || uri.scheme != 'https') {
              return NavigationDecision.prevent;
            }
            return NavigationDecision.navigate;
          },
          onProgress: (progress) => setState(() {
            _progress = progress;
          }),
          onPageStarted: (_) => setState(() => _isLoading = true),
          onPageFinished: (_) async {
            setState(() => _isLoading = false);
            // Inject viewport meta and custom CSS for magazine layout
            const css = '''
              body { margin: 0; padding: 16px; font-family: -apple-system, BlinkMacSystemFont, sans-serif; line-height: 1.6; }
              img { max-width: 100% !important; height: auto !important; display: block; margin: 8px auto; }
              header, footer, nav, .sidebar, .ads { display: none !important; }
              article { max-width: 600px; margin: auto; }
            ''';
            final script = '''
              (function() {
                if (!document.querySelector('meta[name="viewport"]')) {
                  var meta = document.createElement('meta');
                  meta.name = 'viewport';
                  meta.content = 'width=device-width, initial-scale=1.0';
                  document.head.appendChild(meta);
                }
                var style = document.createElement('style');
                style.textContent = ${css.replaceAll("'", "\\'")};
                document.head.appendChild(style);
              })();
            ''';
            await _controller.runJavaScript(script);
          },
          onWebResourceError: (error) => ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Failed to load: \${error.description}')),
          ),
        ),
      )
      ..loadRequest(Uri.parse(widget.url));
  }

  Future<void> _refresh() async {
    await _controller.reload();
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: AppBar(
        elevation: 0,
        backgroundColor: theme.colorScheme.primary.withOpacity(0.95),
        centerTitle: true,
        title: Text(
          widget.title,
          style: theme.textTheme.titleLarge?.copyWith(
            color: Colors.white,
            fontWeight: FontWeight.w800,
          ),
          overflow: TextOverflow.ellipsis,
        ),
        bottom: PreferredSize(
          preferredSize: const Size.fromHeight(4.0),
          child: _isLoading
              ? LinearProgressIndicator(
                  value: _progress / 100.0,
                  backgroundColor: Colors.white24,
                  valueColor: const AlwaysStoppedAnimation<Color>(Colors.white),
                )
              : const SizedBox.shrink(),
        ),
      ),
      body: AnimatedBackground(
        child: RefreshIndicator(
          onRefresh: _refresh,
          child: ClipRRect(
            borderRadius: const BorderRadius.vertical(top: Radius.circular(24)),
            child: WebViewWidget(controller: _controller),
          ),
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/magazine/widgets/animated_background.dart ===

import 'package:flutter/material.dart';

class AnimatedBackground extends StatefulWidget {
  const AnimatedBackground({
    super.key,
    this.duration = const Duration(seconds: 20),
    this.child,
    this.overlayOpacity = 0.3,
  });

  final Duration duration;
  final Widget? child;
  final double overlayOpacity;

  @override
  State<AnimatedBackground> createState() => _AnimatedBackgroundState();
}

class _AnimatedBackgroundState extends State<AnimatedBackground>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;

  List<double> getAnimatedStops(double value) {
    return <double>[
      0.1 + value * 0.3,
      0.3 + value * 0.2,
      0.6 - value * 0.2,
      0.9 - value * 0.3,
    ];
  }

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: widget.duration,
      vsync: this,
    )..repeat(reverse: true);
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  List<Color> _buildDynamicGradient(ColorScheme colorScheme) {
    return [
      colorScheme.primary.withOpacity(0.6),
      colorScheme.secondary.withOpacity(0.5),
      colorScheme.tertiary.withOpacity(0.4),
      colorScheme.primaryContainer.withOpacity(0.3),
    ];
  }

  @override
  Widget build(BuildContext context) {
    final colorScheme = Theme.of(context).colorScheme;
    final gradientColors = _buildDynamicGradient(colorScheme);

    return AnimatedBuilder(
      animation: _controller,
      builder: (context, child) {
        return Stack(
          fit: StackFit.expand,
          children: [
            Image.asset(
              'assets/theme/image2.png',
              fit: BoxFit.cover,
            ),
            Container(
              color: Colors.black.withOpacity(widget.overlayOpacity),
            ),
            Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: gradientColors,
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                  stops: getAnimatedStops(_controller.value),
                  tileMode: TileMode.mirror,
                ),
              ),
            ),
            if (widget.child != null) widget.child!,
          ],
        );
      },
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/profile/signup_screen.dart ===

// signup_screen.dart with Google Sign-In button
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'auth_service.dart';
import '../../../../localization/l10n/app_localizations.dart';

class SignupScreen extends StatefulWidget {
  const SignupScreen({super.key});
  @override
  State<SignupScreen> createState() => _SignupScreenState();
}

class _SignupScreenState extends State<SignupScreen> {
  final _nameCtl = TextEditingController();
  final _emailCtl = TextEditingController();
  final _passCtl = TextEditingController();
  String? _error;

  void _signup() async {
    final msg = await AuthService().signUp(
      _nameCtl.text.trim(),
      _emailCtl.text.trim(),
      _passCtl.text.trim(),
    );

    if (msg != null) {
      setState(() => _error = msg);
    } else {
      context.go('/home');
    }
  }

  void _signupWithGoogle() async {
    final result = await AuthService().signInWithGoogle();
    if (result != null) {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(result)));
    } else {
      context.go('/home');
    }
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;

    return Scaffold(
      appBar: AppBar(title: Text(loc.signup)),
      body: Padding(
        padding: const EdgeInsets.all(24),
        child: Column(
          children: [
            if (_error != null) ...[
              Text(
                _localizedError(loc, _error!),
                style: const TextStyle(color: Colors.red),
              ),
              const SizedBox(height: 16),
            ],
            TextField(
              controller: _nameCtl,
              decoration: InputDecoration(labelText: loc.fullName),
            ),
            const SizedBox(height: 12),
            TextField(
              controller: _emailCtl,
              decoration: InputDecoration(labelText: loc.email),
            ),
            const SizedBox(height: 12),
            TextField(
              controller: _passCtl,
              decoration: InputDecoration(labelText: loc.password),
              obscureText: true,
            ),
            const SizedBox(height: 24),
            ElevatedButton(onPressed: _signup, child: Text(loc.signup)),
            const SizedBox(height: 12),
            ElevatedButton.icon(
              icon: Image.asset('assets/google_logo.png', height: 24),
              label: const Text('Continue with Google'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.white,
                foregroundColor: Colors.black87,
                minimumSize: const Size.fromHeight(50),
              ),
              onPressed: _signupWithGoogle,
            ),
            const SizedBox(height: 12),
            TextButton(
              onPressed: () => context.go('/login'),
              child: Text(loc.alreadyHaveAccount),
            ),
          ],
        ),
      ),
    );
  }

  String _localizedError(AppLocalizations loc, String msg) {
    switch (msg) {
      case 'Invalid email or password.':
        return loc.invalidCredentials;
      case 'No account found. Please sign up first.':
        return loc.noAccountFound;
      case 'Account already exists. Please log in.':
        return loc.accountExists;
      default:
        return msg;
    }
  }
}

// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/profile/profile_screen.dart ===

import 'dart:io';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:provider/provider.dart';
import '../../localization/l10n/app_localizations.dart';
import 'auth_service.dart';
import 'edit_profile_screen.dart';
import 'animated_background.dart';

class ProfileScreen extends StatefulWidget {
  const ProfileScreen({super.key});

  @override
  State<ProfileScreen> createState() => _ProfileScreenState();
}

class _ProfileScreenState extends State<ProfileScreen> {
  Map<String, String>? _profile;

  @override
  void initState() {
    super.initState();
    _loadProfile();
  }

  Future<void> _loadProfile() async {
    _profile = await AuthService().getProfile();
    if (mounted) setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;

    // Redirect if not authenticated
    if (FirebaseAuth.instance.currentUser == null) {
      Future.microtask(() => context.go('/login'));
      return const SizedBox.shrink();
    }

    // Show loading until profile is fetched
    if (_profile == null) {
      return const Scaffold(
        backgroundColor: Colors.transparent,
        body: Center(child: CircularProgressIndicator()),
      );
    }

    final imagePath = _profile!['image'] ?? '';
    final hasImage = imagePath.isNotEmpty && File(imagePath).existsSync();
    final name = _profile!['name'] ?? loc.name;

    return Scaffold(
      extendBodyBehindAppBar: true,
      backgroundColor: Colors.transparent,
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        title: Text(loc.profile),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => context.go('/home'),
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.edit_outlined),
            tooltip: loc.editProfile,
            onPressed: () {
              Navigator.of(context).push(
                MaterialPageRoute(builder: (_) => const EditProfileScreen()),
              );
            },
          ),
        ],
      ),
      floatingActionButton: FloatingActionButton.extended(
        onPressed: () async {
          await FirebaseAuth.instance.signOut();
          if (context.mounted) context.go('/login');
        },
        label: Text(loc.logout),
        icon: const Icon(Icons.logout),
      ),
      body: Stack(
        fit: StackFit.expand,
        children: [
          // Animated background with static dim light and glass effect
          const AnimatedBackground(),

          // Profile content
          SafeArea(
            child: ListView(
              padding: const EdgeInsets.all(16),
              children: [
                Center(
                  child: CircleAvatar(
                    radius: 50,
                    backgroundColor: Colors.white.withOpacity(0.2),
                    backgroundImage: hasImage
                        ? FileImage(File(imagePath))
                        : const AssetImage('assets/default_avatar.png') as ImageProvider,
                  ),
                ),
                const SizedBox(height: 16),
                Center(
                  child: Text(
                    name,
                    style: Theme.of(context)
                        .textTheme
                        .headlineSmall
                        ?.copyWith(
                          fontWeight: FontWeight.bold,
                          color: Colors.white,
                          shadows: const [
                            Shadow(
                              color: Colors.black45,
                              offset: Offset(1, 1),
                              blurRadius: 2,
                            ),
                          ],
                        ),
                  ),
                ),
                const SizedBox(height: 16),
                Card(
                  color: Colors.white.withOpacity(0.2),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: ExpansionTile(
                    tilePadding: const EdgeInsets.symmetric(
                        horizontal: 16, vertical: 8),
                    collapsedBackgroundColor: Colors.white.withOpacity(0.1),
                    backgroundColor: Colors.white.withOpacity(0.2),
                    title: Text(
                      loc.details,
                      style: const TextStyle(
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                      ),
                    ),
                    iconColor: Colors.white,
                    collapsedIconColor: Colors.white70,
                    childrenPadding: const EdgeInsets.symmetric(
                        horizontal: 16, vertical: 8),
                    children: [
                      if ((_profile!['email'] ?? '').isNotEmpty)
                        _buildDetailRow(loc.email, _profile!['email']!),
                      if ((_profile!['phone'] ?? '').isNotEmpty)
                        _buildDetailRow(loc.phone, _profile!['phone']!),
                      if ((_profile!['role'] ?? '').isNotEmpty)
                        _buildDetailRow('Role', _profile!['role']!),
                      if ((_profile!['department'] ?? '').isNotEmpty)
                        _buildDetailRow('Department', _profile!['department']!),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildDetailRow(String title, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Icon(Icons.circle, size: 8, color: Colors.white70),
          const SizedBox(width: 8),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  title,
                  style: const TextStyle(
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
                const SizedBox(height: 2),
                Text(
                  value,
                  style: const TextStyle(color: Colors.white70),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/profile/auth_service.dart ===


import 'package:firebase_auth/firebase_auth.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:google_sign_in/google_sign_in.dart';

class AuthService {
  static final AuthService _instance = AuthService._internal();
  factory AuthService() => _instance;
  AuthService._internal();

  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  User? get currentUser => _auth.currentUser;

  bool get isLoggedIn => _auth.currentUser != null;

  Future<String?> signUp(String name, String email, String password) async {
    try {
      final userCredential = await _auth.createUserWithEmailAndPassword(
        email: email.trim(),
        password: password,
      );
      final uid = userCredential.user!.uid;

      await _firestore.collection('users').doc(uid).set({
        'name': name,
        'email': email,
        'phone': '',
        'role': '',
        'department': '',
        'image': '',
      });

      await _cacheProfile(name: name, email: email);
      return null;
    } on FirebaseAuthException catch (e) {
      return e.message;
    }
  }

  Future<String?> login(String email, String password) async {
    try {
      final userCredential = await _auth.signInWithEmailAndPassword(
        email: email.trim(),
        password: password,
      );

      final uid = userCredential.user!.uid;
      final doc = await _firestore.collection('users').doc(uid).get();
      if (doc.exists) {
        await _cacheProfileMap(doc.data()!);
      }
      return null;
    } on FirebaseAuthException catch (e) {
      return e.message;
    }
  }

  Future<String?> signInWithGoogle() async {
    try {
      final googleUser = await GoogleSignIn().signIn();
      if (googleUser == null) return 'Google sign-in cancelled.';

      final googleAuth = await googleUser.authentication;
      final credential = GoogleAuthProvider.credential(
        accessToken: googleAuth.accessToken,
        idToken: googleAuth.idToken,
      );

      final userCredential = await _auth.signInWithCredential(credential);
      final user = userCredential.user!;

      final doc = await _firestore.collection('users').doc(user.uid).get();
      if (!doc.exists) {
        await _firestore.collection('users').doc(user.uid).set({
          'name': user.displayName ?? 'User',
          'email': user.email ?? '',
          'phone': '',
          'role': '',
          'department': '',
          'image': user.photoURL ?? '',
        });
      }

      await _cacheProfile(
        name: user.displayName ?? 'User',
        email: user.email ?? '',
        imagePath: user.photoURL ?? '',
      );

      return null;
    } catch (e) {
      return 'Google Sign-in error: ${e.toString()}';
    }
  }

  Future<void> logout() async {
    await _auth.signOut();
    await GoogleSignIn().signOut();
    final prefs = await SharedPreferences.getInstance();
    await prefs.clear();
  }

  Future<Map<String, String>> getProfile() async {
    final prefs = await SharedPreferences.getInstance();
    return {
      'name': prefs.getString('user_name') ?? '',
      'email': prefs.getString('user_email') ?? '',
      'phone': prefs.getString('user_phone') ?? '',
      'role': prefs.getString('user_role') ?? '',
      'department': prefs.getString('user_department') ?? '',
      'image': prefs.getString('user_image') ?? '',
    };
  }

  Future<void> updateProfile({
    required String name,
    required String email,
    String phone = '',
    String role = '',
    String department = '',
    String imagePath = '',
  }) async {
    final uid = _auth.currentUser?.uid;
    if (uid != null) {
      await _firestore.collection('users').doc(uid).update({
        'name': name,
        'email': email,
        'phone': phone,
        'role': role,
        'department': department,
        'image': imagePath,
      });
    }

    await _cacheProfile(
      name: name,
      email: email,
      phone: phone,
      role: role,
      department: department,
      imagePath: imagePath,
    );
  }

  Future<void> _cacheProfile({
    required String name,
    required String email,
    String phone = '',
    String role = '',
    String department = '',
    String imagePath = '',
  }) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('user_name', name);
    await prefs.setString('user_email', email);
    await prefs.setString('user_phone', phone);
    await prefs.setString('user_role', role);
    await prefs.setString('user_department', department);
    await prefs.setString('user_image', imagePath);
    await prefs.setBool('isLoggedIn', true);
  }

  Future<void> _cacheProfileMap(Map<String, dynamic> data) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString('user_name', data['name'] ?? '');
    await prefs.setString('user_email', data['email'] ?? '');
    await prefs.setString('user_phone', data['phone'] ?? '');
    await prefs.setString('user_role', data['role'] ?? '');
    await prefs.setString('user_department', data['department'] ?? '');
    await prefs.setString('user_image', data['image'] ?? '');
    await prefs.setBool('isLoggedIn', true);
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/profile/login_screen.dart ===

import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import '../../../features/profile/auth_service.dart';
import '../../../localization/l10n/app_localizations.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final TextEditingController _emailCtl = TextEditingController();
  final TextEditingController _passCtl = TextEditingController();
  String? _error;

  @override
  void dispose() {
    _emailCtl.dispose();
    _passCtl.dispose();
    super.dispose();
  }

  void _login() async {
    final msg = await AuthService().login(
      _emailCtl.text.trim(),
      _passCtl.text.trim(),
    );

    if (msg != null) {
      setState(() => _error = msg);
    } else {
      if (!mounted) return;
      context.go('/home');
    }
  }

  void _loginWithGoogle() async {
    final result = await AuthService().signInWithGoogle();
    if (!mounted) return;
    if (result != null) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(result)),
      );
    } else {
      context.go('/home');
    }
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;

    return Scaffold(
      appBar: AppBar(
        title: Text(loc.login),
        automaticallyImplyLeading: false,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => context.go('/home'),
        ),
      ),
      body: Padding(
        padding: const EdgeInsets.all(24),
        child: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              if (_error != null) ...[
                Text(
                  _localizedError(loc, _error!),
                  style: const TextStyle(color: Colors.red),
                ),
                const SizedBox(height: 16),
              ],
              TextField(
                controller: _emailCtl,
                decoration: InputDecoration(labelText: loc.email),
                keyboardType: TextInputType.emailAddress,
              ),
              const SizedBox(height: 12),
              TextField(
                controller: _passCtl,
                decoration: InputDecoration(labelText: loc.password),
                obscureText: true,
              ),
              const SizedBox(height: 24),
              ElevatedButton(
                onPressed: _login,
                style: ElevatedButton.styleFrom(minimumSize: const Size.fromHeight(50)),
                child: Text(loc.login),
              ),
              const SizedBox(height: 12),
              ElevatedButton.icon(
                icon: Image.asset('assets/google_logo.png', height: 24),
                label: const Text('Continue with Google'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.white,
                  foregroundColor: Colors.black87,
                  minimumSize: const Size.fromHeight(50),
                ),
                onPressed: _loginWithGoogle,
              ),
              const SizedBox(height: 12),
              Center(
                child: TextButton(
                  onPressed: () => context.go('/signup'),
                  child: Text(loc.createAccount),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  String _localizedError(AppLocalizations loc, String msg) {
    switch (msg) {
      case 'Invalid email or password.':
        return loc.invalidCredentials;
      case 'No account found. Please sign up first.':
        return loc.noAccountFound;
      case 'Account already exists. Please log in.':
        return loc.accountExists;
      default:
        return msg;
    }
  }
}

// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/profile/forgot_password_screen.dart ===

import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../../../../localization/l10n/app_localizations.dart';

class ForgotPasswordScreen extends StatefulWidget {
  const ForgotPasswordScreen({super.key});

  @override
  State<ForgotPasswordScreen> createState() => _ForgotPasswordScreenState();
}

class _ForgotPasswordScreenState extends State<ForgotPasswordScreen> {
  final TextEditingController emailController = TextEditingController();
  String? message;

  Future<void> _resetPassword() async {
    final loc = AppLocalizations.of(context)!;
    try {
      await FirebaseAuth.instance
          .sendPasswordResetEmail(email: emailController.text.trim());
      setState(() => message = loc.resetEmailSent);
    } on FirebaseAuthException catch (e) {
      setState(() => message = e.message);
    }
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;

    return Scaffold(
      appBar: AppBar(
        title: Text(loc.forgotPassword),
        centerTitle: true,
      ),
      body: Padding(
        padding: const EdgeInsets.all(24),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Text(loc.enterEmailReset),
            const SizedBox(height: 12),
            TextField(
              controller: emailController,
              keyboardType: TextInputType.emailAddress,
              decoration: InputDecoration(
                labelText: loc.email,
                border: const OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: _resetPassword,
              child: Text(loc.sendResetLink),
            ),
            if (message != null) ...[
              const SizedBox(height: 20),
              Text(
                message!,
                style: TextStyle(
                  color: message!.contains('sent') ? Colors.green : Colors.red,
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/profile/edit_profile_screen.dart ===

// lib/features/profile/edit_profile_screen.dart

import 'dart:io';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:provider/provider.dart';
import '../../core/theme_provider.dart';
import '../../localization/l10n/app_localizations.dart';
import 'auth_service.dart';

class EditProfileScreen extends StatefulWidget {
  const EditProfileScreen({super.key});

  @override
  State<EditProfileScreen> createState() => _EditProfileScreenState();
}

class _EditProfileScreenState extends State<EditProfileScreen> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _emailController = TextEditingController();
  final _phoneController = TextEditingController();
  final _roleController = TextEditingController();
  final _departmentController = TextEditingController();

  String? _imagePath;
  bool _isSaving = false;

  @override
  void initState() {
    super.initState();
    _loadProfile();
  }

  Future<void> _loadProfile() async {
    final profile = await AuthService().getProfile();
    if (mounted) {
      setState(() {
        _nameController.text = profile['name'] ?? '';
        _emailController.text = profile['email'] ?? '';
        _phoneController.text = profile['phone'] ?? '';
        _roleController.text = profile['role'] ?? '';
        _departmentController.text = profile['department'] ?? '';
        _imagePath = profile['image'];
      });
    }
  }

  Future<void> _pickImage() async {
    final picked = await ImagePicker().pickImage(source: ImageSource.gallery);
    if (picked != null) {
      setState(() => _imagePath = picked.path);
    }
  }

  Future<void> _saveProfile() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => _isSaving = true);

    await AuthService().updateProfile(
      name: _nameController.text.trim(),
      email: _emailController.text.trim(),
      phone: _phoneController.text.trim(),
      role: _roleController.text.trim(),
      department: _departmentController.text.trim(),
      imagePath: _imagePath ?? '',
    );

    if (mounted) {
      Navigator.of(context).pop(true);
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final loc = AppLocalizations.of(context)!;

    return Scaffold(
      appBar: AppBar(title: Text(loc.editProfile)),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              GestureDetector(
                onTap: _pickImage,
                child: CircleAvatar(
                  radius: 50,
                  backgroundImage: _imagePath != null ? FileImage(File(_imagePath!)) : null,
                  child: _imagePath == null ? const Icon(Icons.camera_alt, size: 40) : null,
                ),
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _nameController,
                decoration: InputDecoration(labelText: loc.name),
                validator: (v) => v!.isEmpty ? loc.enterName : null,
              ),
              TextFormField(
                controller: _emailController,
                decoration: InputDecoration(labelText: loc.email),
                validator: (v) => v!.isEmpty ? loc.enterEmail : null,
              ),
              TextFormField(
                controller: _phoneController,
                decoration: InputDecoration(labelText: loc.phone),
              ),
              TextFormField(
                controller: _roleController,
                decoration: InputDecoration(labelText: loc.role),
              ),
              TextFormField(
                controller: _departmentController,
                decoration: InputDecoration(labelText: loc.department),
              ),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: _isSaving ? null : _saveProfile,
                child: _isSaving ? const CircularProgressIndicator() : Text(loc.save),
              )
            ],
          ),
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/profile/animated_background.dart ===

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '/core/theme_provider.dart';

class AnimatedBackground extends StatelessWidget {
  const AnimatedBackground({super.key});

  Color _getGlassColor(BuildContext context) {
    final mode = Provider.of<ThemeProvider>(context).appThemeMode;
    switch (mode) {
      case AppThemeMode.light:
        return const Color(0xFF002B5B).withOpacity(0.1);
      case AppThemeMode.dark:
        return const Color(0xFF121417).withOpacity(0.1);
      case AppThemeMode.bangladesh:
        return const Color(0xFF006A4E).withOpacity(0.1);
      case AppThemeMode.system:
      default:
        final brightness = Theme.of(context).brightness;
        return brightness == Brightness.dark
            ? const Color(0xFF121417).withOpacity(0.1)
            : const Color(0xFF002B5B).withOpacity(0.1);
    }
  }

  @override
  Widget build(BuildContext context) {
    final glassColor = _getGlassColor(context);

    // Static dim light gradient overlay colors
    final themeMode = Provider.of<ThemeProvider>(context).appThemeMode;
    List<Color> lightColors;
    switch (themeMode) {
      case AppThemeMode.light:
        lightColors = [Color(0xFF8EC5FC).withOpacity(0.05), Color(0xFFE0C3FC).withOpacity(0.05)];
        break;
      case AppThemeMode.dark:
        lightColors = [Color(0xFF0A0F1F).withOpacity(0.05), Color(0xFF1A1D20).withOpacity(0.05)];
        break;
      case AppThemeMode.bangladesh:
        lightColors = [Color(0xFF006A4E).withOpacity(0.05), Color(0xFFF42A41).withOpacity(0.05)];
        break;
      case AppThemeMode.system:
      default:
        final brightness = Theme.of(context).brightness;
        lightColors = brightness == Brightness.dark
            ? [Color(0xFF0A0F1F).withOpacity(0.05), Color(0xFF1A1D20).withOpacity(0.05)]
            : [Color(0xFF8EC5FC).withOpacity(0.05), Color(0xFFE0C3FC).withOpacity(0.05)];
    }

    return Stack(
      fit: StackFit.expand,
      children: [
        // Background image
        Image.asset(
          'assets/theme/river.png',
          fit: BoxFit.cover,
        ),
        // Static 90% transparent glass effect
        BackdropFilter(
          filter: ImageFilter.blur(sigmaX: 10, sigmaY: 10),
          child: Container(color: glassColor),
        ),
        // Static dim light gradient overlay
        Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: lightColors,
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
          ),
        ),
      ],
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/news/newspaper_screen.dart ===

import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:go_router/go_router.dart';

import '../../core/utils/favorites_manager.dart';
import '../../widgets/app_drawer.dart';
import '../../localization/l10n/app_localizations.dart';
import 'widgets/animated_background.dart';
import 'widgets/news_card.dart';

class NewspaperScreen extends StatefulWidget {
  const NewspaperScreen({super.key});

  @override
  State<NewspaperScreen> createState() => _NewspaperScreenState();
}

class _NewspaperScreenState extends State<NewspaperScreen> with SingleTickerProviderStateMixin {
  final List<dynamic> _papers = [];
  bool _isLoading = true;
  final ScrollController _listController = ScrollController();
  final TextEditingController _searchController = TextEditingController();
  String _searchQuery = '';
  String _langFilter = 'All';
  late TabController _tabController;

  FavoritesManager favoritesManager = FavoritesManager.instance;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: _categories.length, vsync: this)
      ..addListener(() {
        setState(() => _langFilter = 'All');
        _listController.jumpTo(0);
      });
    favoritesManager.loadFavorites();
    _loadPapers();
  }

  Future<void> _loadPapers() async {
    setState(() => _isLoading = true);
    try {
      final raw = await rootBundle.loadString('assets/data.json');
      final jsonData = jsonDecode(raw) as Map<String, dynamic>;
      setState(() {
        _papers
          ..clear()
          ..addAll(jsonData['newspapers'] as List<dynamic>);
        _isLoading = false;
      });
    } catch (e) {
      setState(() => _isLoading = false);
      final loc = AppLocalizations.of(context)!;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(loc.loadError.replaceFirst('{message}', '$e'))),
      );
    }
  }

  List<String> get _categories {
    final loc = AppLocalizations.of(context)!;
    return [
      loc.favorites,
      loc.national,
      loc.international,
      loc.businessFinance,
      loc.digitalTech,
      loc.sportsNews,
      loc.entertainmentArts,
      loc.worldPolitics,
      loc.blog,
    ];
  }

  List<dynamic> get _filteredPapers {
    final loc = AppLocalizations.of(context)!;
    final selCategory = _categories[_tabController.index];
    final map = {
      loc.businessFinance: 'business',
      loc.digitalTech: 'tech',
      loc.sportsNews: 'sports',
      loc.entertainmentArts: 'entertainment',
      loc.worldPolitics: 'defense',
      loc.blog: 'blog',
      loc.national: 'national',
      loc.international: 'international',
    };
    var filtered = <dynamic>[];
    if (selCategory == loc.favorites) {
      final favIds = favoritesManager.favoriteNewspapers.map((n) => n['id'].toString()).toSet();
      filtered = _papers.where((p) => favIds.contains(p['id'].toString())).toList();
    } else {
      filtered = _papers.where((p) {
        final region = (p['region'] ?? '').toString().toLowerCase();
        final key = map[selCategory];
        if (selCategory == loc.national || selCategory == loc.international) {
          if (region != key) return false;
          if (_langFilter == 'All') return true;
          final lang = (p['language'] ?? '').toString().toLowerCase();
          return (_langFilter == loc.bangla && lang == 'bn') ||
                 (_langFilter == loc.english && lang == 'en');
        }
        return key != null && region == key;
      }).toList();
    }
    if (_searchQuery.isNotEmpty) {
      final query = _searchQuery.toLowerCase();
      filtered = filtered.where((p) {
        final name = (p['name'] ?? '').toString().toLowerCase();
        final desc = (p['description'] ?? '').toString().toLowerCase();
        return name.contains(query) || desc.contains(query);
      }).toList();
    }
    return filtered;
  }

  Future<bool> _onWillPop() async {
    context.go('/home');
    return false;
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;

    return WillPopScope(
      onWillPop: _onWillPop,
      child: Scaffold(
        drawer: const AppDrawer(),
        appBar: AppBar(
          centerTitle: true,
          title: Text(loc.newspapers, style: const TextStyle(fontWeight: FontWeight.bold)),
          bottom: PreferredSize(
            preferredSize: const Size.fromHeight(48),
            child: Padding(
              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
              child: TextField(
                controller: _searchController,
                onChanged: (val) => setState(() => _searchQuery = val),
                style: Theme.of(context).textTheme.bodyMedium,
                decoration: InputDecoration(
                  isDense: true,
                  hintText: loc.searchPapers,
                  prefixIcon: const Icon(Icons.search),
                  border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),
                  filled: true,
                ),
              ),
            ),
          ),
        ),
        body: Column(
          children: [
            SizedBox(
              height: 48,
              child: ListView.builder(
                scrollDirection: Axis.horizontal,
                itemCount: _categories.length,
                itemBuilder: (ctx, i) => Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 4),
                  child: ChoiceChip(
                    label: Text(_categories[i]),
                    selected: _tabController.index == i,
                    onSelected: (_) => _tabController.animateTo(i),
                  ),
                ),
              ),
            ),
            if ([_categories[1], _categories[2]].contains(_categories[_tabController.index]))
              Padding(
                padding: const EdgeInsets.symmetric(vertical: 8),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [loc.allLanguages, loc.bangla, loc.english]
                      .map((lang) => Padding(
                            padding: const EdgeInsets.symmetric(horizontal: 6),
                            child: ChoiceChip(
                              label: Text(lang),
                              selected: _langFilter == lang,
                              onSelected: (_) => setState(() => _langFilter = lang),
                            ),
                          ))
                      .toList(),
                ),
              ),
            Expanded(
              child: AnimatedBackground(
                child: _isLoading
                    ? const Center(child: CircularProgressIndicator())
                    : _filteredPapers.isEmpty
                        ? Center(child: Text(loc.noPapersFound))
                        : RefreshIndicator(
                            onRefresh: _loadPapers,
                            child: ListView.builder(
                              controller: _listController,
                              padding: const EdgeInsets.all(16),
                              itemCount: _filteredPapers.length,
                              itemBuilder: (_, idx) {
                                final paper = _filteredPapers[idx];
                                final id = paper['id'].toString();
                                return NewsCard(
                                  news: paper,
                                  searchQuery: _searchQuery,
                                  isFavorite: favoritesManager.isFavoriteNewspaper(id),
                                  onFavoriteToggle: () => setState(() {
                                    favoritesManager.toggleNewspaper(paper);
                                  }),
                                );
                              },
                            ),
                          ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/news/widgets/news_card.dart ===

// lib/features/news/widgets/news_card.dart

import 'dart:io';
import 'package:flutter/material.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:go_router/go_router.dart';

class NewsCard extends StatelessWidget {
  final Map<String, dynamic> news;
  final String searchQuery;
  final bool isFavorite;
  final VoidCallback onFavoriteToggle;

  const NewsCard({
    super.key,
    required this.news,
    required this.searchQuery,
    required this.isFavorite,
    required this.onFavoriteToggle,
  });

  void _open(BuildContext context) {
    // Try both fields: contact.website or top-level url / link
    final dynamic maybeWebsite = news['contact']?['website'];
    final dynamic maybeUrl     = news['url'] ?? news['link'];
    final String url = (maybeWebsite is String && maybeWebsite.isNotEmpty)
        ? maybeWebsite
        : (maybeUrl is String ? maybeUrl : '');

    final String title = news['name'] ?? 'News';

    if (url.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('No URL available')),
      );
      return;
    }

    // Push the WebView route, passing URL + title as extra
    context.push(
      '/webview',
      extra: <String, String>{ 'url': url, 'title': title },
    );
  }

  String _getDescription() {
    final desc    = news['description'] ?? '';
    if (desc.toString().trim().isNotEmpty) return desc;
    final country = news['country'] ?? '';
    final lang    = news['language'] ?? '';
    return '$country • $lang';
  }

  String _getImageUrl() {
    final website = (news['contact']?['website'] ?? news['url'] ?? '') as String;
    if (website.isNotEmpty) {
      try {
        final uri = Uri.parse(website);
        return 'https://logo.clearbit.com/${uri.host}';
      } catch (_) {}
    }
    return '';
  }

  @override
  Widget build(BuildContext context) {
    final theme   = Theme.of(context);
    final isDark  = theme.brightness == Brightness.dark;
    final glowCol = theme.colorScheme.primary.withOpacity(isDark ? 0.1 : 0.4);

    final String logoUrl     = _getImageUrl();
    final String fallbackTxt = (news['name']?.substring(0,2).toUpperCase() ?? 'NP');
    final String name        = news['name'] ?? 'Untitled';
    final String description = _getDescription();

    return InkWell(
      onTap: () => _open(context),
      child: Card(
        elevation: 6,
        margin: const EdgeInsets.symmetric(vertical: 10, horizontal: 8),
        color: theme.cardColor,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(18)),
        shadowColor: glowCol,
        child: Container(
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(18),
            boxShadow: [
              BoxShadow(color: glowCol, blurRadius: 8, offset: const Offset(0,4)),
            ],
          ),
          child: Padding(
            padding: const EdgeInsets.all(14),
            child: Row(
              children: [
                ClipRRect(
                  borderRadius: BorderRadius.circular(10),
                  child: logoUrl.isNotEmpty
                      ? CachedNetworkImage(
                          imageUrl: logoUrl,
                          width: 55,
                          height: 55,
                          fit: BoxFit.cover,
                          placeholder: (_,__) => const SizedBox(
                            width: 20, height: 20,
                            child: CircularProgressIndicator(strokeWidth: 2),
                          ),
                          errorWidget: (_,__,___) => _fallbackAvatar(fallbackTxt),
                        )
                      : _fallbackAvatar(fallbackTxt),
                ),
                const SizedBox(width: 14),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        name,
                        maxLines: 1,
                        overflow: TextOverflow.ellipsis,
                        style: theme.textTheme.titleMedium?.copyWith(
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      const SizedBox(height: 6),
                      Text(
                        description,
                        maxLines: 2,
                        overflow: TextOverflow.ellipsis,
                        style: theme.textTheme.bodyMedium?.copyWith(
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                    ],
                  ),
                ),
                IconButton(
                  icon: Icon(
                    isFavorite ? Icons.favorite : Icons.favorite_border,
                    color: isFavorite ? Colors.red : Colors.grey,
                  ),
                  onPressed: onFavoriteToggle,
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  /// Fallback when no logo URL
  Widget _fallbackAvatar(String text) {
    return Container(
      width: 55,
      height: 55,
      color: Colors.grey[300],
      alignment: Alignment.center,
      child: Text(
        text,
        style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/news/widgets/animated_background.dart ===

import 'package:flutter/material.dart';

class AnimatedBackground extends StatefulWidget {
  const AnimatedBackground({
    super.key,
    this.duration = const Duration(seconds: 20),
    this.child,
    this.overlayOpacity = 0.3,
  });

  final Duration duration;
  final Widget? child;
  final double overlayOpacity;

  @override
  State<AnimatedBackground> createState() => _AnimatedBackgroundState();
}

class _AnimatedBackgroundState extends State<AnimatedBackground>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;

  List<double> getAnimatedStops(double value) {
    return <double>[
      0.1 + value * 0.3,
      0.3 + value * 0.2,
      0.6 - value * 0.2,
      0.9 - value * 0.3,
    ];
  }

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: widget.duration,
      vsync: this,
    )..repeat(reverse: true);
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  List<Color> _buildDynamicGradient(ColorScheme colorScheme) {
    return [
      colorScheme.primary.withOpacity(0.6),
      colorScheme.secondary.withOpacity(0.5),
      colorScheme.tertiary.withOpacity(0.4),
      colorScheme.primaryContainer.withOpacity(0.3),
    ];
  }

  @override
  Widget build(BuildContext context) {
    final colorScheme = Theme.of(context).colorScheme;
    final gradientColors = _buildDynamicGradient(colorScheme);

    return AnimatedBuilder(
      animation: _controller,
      builder: (context, child) {
        return Stack(
          fit: StackFit.expand,
          children: [
            Image.asset(
              'assets/theme/image1.png',
              fit: BoxFit.cover,
            ),
            Container(
              color: Colors.black.withOpacity(widget.overlayOpacity),
            ),
            Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: gradientColors,
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                  stops: getAnimatedStops(_controller.value),
                  tileMode: TileMode.mirror,
                ),
              ),
            ),
            if (widget.child != null) widget.child!,
          ],
        );
      },
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/login/login_screen.dart ===

import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import '../../../features/profile/auth_service.dart';
import '../../../localization/l10n/app_localizations.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final TextEditingController _emailCtl = TextEditingController();
  final TextEditingController _passCtl = TextEditingController();
  String? _error;

  @override
  void dispose() {
    _emailCtl.dispose();
    _passCtl.dispose();
    super.dispose();
  }

  void _login() async {
    final msg = await AuthService().login(
      _emailCtl.text.trim(),
      _passCtl.text.trim(),
    );

    if (msg != null) {
      setState(() => _error = msg);
    } else {
      if (!mounted) return;
      context.go('/home');
    }
  }

  void _loginWithGoogle() async {
    final result = await AuthService().signInWithGoogle();
    if (!mounted) return;
    if (result != null) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(result)),
      );
    } else {
      context.go('/home');
    }
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;

    return Scaffold(
      appBar: AppBar(
        title: Text(loc.login),
        automaticallyImplyLeading: false,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => context.go('/home'),
        ),
      ),
      body: Padding(
        padding: const EdgeInsets.all(24),
        child: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              if (_error != null) ...[
                Text(
                  _localizedError(loc, _error!),
                  style: const TextStyle(color: Colors.red),
                ),
                const SizedBox(height: 16),
              ],
              TextField(
                controller: _emailCtl,
                decoration: InputDecoration(labelText: loc.email),
                keyboardType: TextInputType.emailAddress,
              ),
              const SizedBox(height: 12),
              TextField(
                controller: _passCtl,
                decoration: InputDecoration(labelText: loc.password),
                obscureText: true,
              ),
              const SizedBox(height: 24),
              ElevatedButton(
                onPressed: _login,
                style: ElevatedButton.styleFrom(minimumSize: const Size.fromHeight(50)),
                child: Text(loc.login),
              ),
              const SizedBox(height: 12),
              ElevatedButton.icon(
                icon: Image.asset('assets/google_logo.png', height: 24),
                label: const Text('Continue with Google'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.white,
                  foregroundColor: Colors.black87,
                  minimumSize: const Size.fromHeight(50),
                ),
                onPressed: _loginWithGoogle,
              ),
              const SizedBox(height: 12),
              Center(
                child: TextButton(
                  onPressed: () => context.go('/signup'),
                  child: Text(loc.createAccount),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  String _localizedError(AppLocalizations loc, String msg) {
    switch (msg) {
      case 'Invalid email or password.':
        return loc.invalidCredentials;
      case 'No account found. Please sign up first.':
        return loc.noAccountFound;
      case 'Account already exists. Please log in.':
        return loc.accountExists;
      default:
        return msg;
    }
  }
}

// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/onboarding/onboarding_screen.dart ===

// path: lib/features/onboarding/onboarding_screen.dart

import 'package:flutter/material.dart';
import 'package:lottie/lottie.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:go_router/go_router.dart';
import '../../localization/l10n/app_localizations.dart';

class OnboardingScreen extends StatefulWidget {
  const OnboardingScreen({Key? key}) : super(key: key);

  @override
  State<OnboardingScreen> createState() => _OnboardingScreenState();
}

class _OnboardingScreenState extends State<OnboardingScreen> {
  final PageController _controller = PageController();
  int _currentIndex = 0;

  final List<_OnboardingPage> _pages = [
    _OnboardingPage(
      titleBuilder: (loc) => loc.bdNewsHub,
      descriptionBuilder: (loc) => loc.latest,
      animationAsset: 'assets/lottie/news.json',
    ),
    _OnboardingPage(
      titleBuilder: (loc) => loc.fastReliable ?? 'Fast & Reliable',
      descriptionBuilder: (loc) => loc.digitalTech,
      animationAsset: 'assets/lottie/rocket.json',
    ),
    _OnboardingPage(
      titleBuilder: (loc) => loc.personalizedExperience ?? 'Personalized Experience',
      descriptionBuilder: (loc) => loc.settings,
      animationAsset: 'assets/lottie/settings.json',
    ),
  ];

  Future<void> _completeOnboarding() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('onboardingCompleted', true);
    context.go('/login');
  }

  void _nextPage() {
    if (_currentIndex < _pages.length - 1) {
      _controller.nextPage(duration: const Duration(milliseconds: 400), curve: Curves.ease);
    } else {
      _completeOnboarding();
    }
  }

  void _skipToLast() {
    _controller.animateToPage(
      _pages.length - 1,
      duration: const Duration(milliseconds: 400),
      curve: Curves.ease,
    );
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final theme = Theme.of(context);

    return Scaffold(
      body: SafeArea(
        child: Stack(
          children: [
            PageView.builder(
              controller: _controller,
              itemCount: _pages.length,
              onPageChanged: (index) => setState(() => _currentIndex = index),
              itemBuilder: (context, index) {
                final page = _pages[index];
                return Padding(
                  padding: const EdgeInsets.all(24.0),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    children: [
                      // App icon at top
                      Image.asset(
                        'assets/app-icon.png',
                        width: 96,
                        height: 96,
                      ),
                      const SizedBox(height: 24),
                      Expanded(
                        child: Lottie.asset(
                          page.animationAsset,
                          repeat: true,
                          fit: BoxFit.contain,
                        ),
                      ),
                      const SizedBox(height: 24),
                      Text(
                        page.titleBuilder(loc),
                        textAlign: TextAlign.center,
                        style: theme.textTheme.headlineSmall?.copyWith(
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      const SizedBox(height: 16),
                      Text(
                        page.descriptionBuilder(loc),
                        textAlign: TextAlign.center,
                        style: theme.textTheme.bodyLarge,
                      ),
                      const SizedBox(height: 32),
                    ],
                  ),
                );
              },
            ),
            // Skip button
            if (_currentIndex < _pages.length - 1)
              Positioned(
                right: 16,
                top: 16,
                child: TextButton(
                  onPressed: _skipToLast,
                  child: Text(
                    loc.close,
                    style: theme.textTheme.bodyMedium,
                  ),
                ),
              ),
            // Page indicators + Next
            Positioned(
              bottom: 24,
              left: 24,
              right: 24,
              child: Column(
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: List.generate(
                      _pages.length,
                      (idx) {
                        final selected = idx == _currentIndex;
                        return AnimatedContainer(
                          duration: const Duration(milliseconds: 300),
                          margin: const EdgeInsets.symmetric(horizontal: 4),
                          width: selected ? 24 : 8,
                          height: 8,
                          decoration: BoxDecoration(
                            color: selected
                                ? theme.colorScheme.primary
                                : theme.disabledColor,
                            borderRadius: BorderRadius.circular(6),
                          ),
                        );
                      },
                    ),
                  ),
                  const SizedBox(height: 16),
                  ElevatedButton(
                    onPressed: _nextPage,
                    style: ElevatedButton.styleFrom(
                      minimumSize: const Size.fromHeight(48),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    child: Text(
                      _currentIndex == _pages.length - 1
                          ? loc.getStarted
                          : loc.next,
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}

/// A model for each onboarding page, with localized getters.
class _OnboardingPage {
  final String Function(AppLocalizations) titleBuilder;
  final String Function(AppLocalizations) descriptionBuilder;
  final String animationAsset;

  const _OnboardingPage({
    required this.titleBuilder,
    required this.descriptionBuilder,
    required this.animationAsset,
  });
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/features/help/help_screen.dart ===

import 'package:flutter/material.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:go_router/go_router.dart';

class HelpScreen extends StatelessWidget {
  const HelpScreen({super.key});

  Future<void> _launchEmail() async {
    final Uri emailUri = Uri(
      scheme: 'mailto',
      path: 'support@dsmobiles.com',
      queryParameters: {'subject': 'Help & Support Inquiry'},
    );
    if (await canLaunchUrl(emailUri)) {
      await launchUrl(emailUri);
    }
  }

  Future<void> _launchWebsite() async {
    final Uri websiteUri = Uri.parse('https://www.dsmobiles.com');
    if (await canLaunchUrl(websiteUri)) {
      await launchUrl(websiteUri, mode: LaunchMode.externalApplication);
    }
  }

  Future<void> _launchRateUs() async {
    final Uri rateUri = Uri.parse('https://play.google.com/store/apps/details?id=com.example.app');
    if (await canLaunchUrl(rateUri)) {
      await launchUrl(rateUri, mode: LaunchMode.externalApplication);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Help & Support'),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => context.go('/home'),
        ),
      ),
      body: ListView(
        padding: const EdgeInsets.all(16),
        children: [
          const ListTile(
            leading: Icon(Icons.question_answer),
            title: Text('How to use BDNewspaper?'),
            subtitle: Text('Navigate news categories from the homepage.'),
          ),
          const ListTile(
            leading: Icon(Icons.lock),
            title: Text('Is my data secure?'),
            subtitle: Text('Yes, we respect your privacy and do not store personal data.'),
          ),
          const ListTile(
            leading: Icon(Icons.update),
            title: Text('How to get latest updates?'),
            subtitle: Text('Updates are pushed automatically via Play Store.'),
          ),
          const Divider(height: 32),
          ElevatedButton.icon(
            onPressed: _launchEmail,
            icon: const Icon(Icons.email_outlined),
            label: const Text('Email Support'),
            style: ElevatedButton.styleFrom(minimumSize: const Size.fromHeight(50)),
          ),
          const SizedBox(height: 16),
          OutlinedButton.icon(
            onPressed: _launchWebsite,
            icon: const Icon(Icons.language),
            label: const Text('Visit Website'),
            style: OutlinedButton.styleFrom(minimumSize: const Size.fromHeight(50)),
          ),
          const SizedBox(height: 16),
          OutlinedButton.icon(
            onPressed: _launchRateUs,
            icon: const Icon(Icons.star_rate_outlined),
            label: const Text('Rate Us'),
            style: OutlinedButton.styleFrom(minimumSize: const Size.fromHeight(50)),
          ),
        ],
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/firebase_options.dart ===

// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'AIzaSyDHaDNvv-pLn4NYcpS139J2Bv6r2VQDA-g',
    appId: '1:92831175770:web:c9f2352eb095beec93f463',
    messagingSenderId: '92831175770',
    projectId: 'droid-e9db9',
    authDomain: 'droid-e9db9.firebaseapp.com',
    storageBucket: 'droid-e9db9.firebasestorage.app',
    measurementId: 'G-LKZEDMNFX6',
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyCeSxbjb0TIYG0kWuLMm-j7TdbZ0nXt8go',
    appId: '1:92831175770:android:40fc17be01d7222293f463',
    messagingSenderId: '92831175770',
    projectId: 'droid-e9db9',
    storageBucket: 'droid-e9db9.firebasestorage.app',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIzaSyA0Vsaayr2jDfB_FEyHQ7PCJ30A51WUsc8',
    appId: '1:92831175770:ios:b69407f94ea150b993f463',
    messagingSenderId: '92831175770',
    projectId: 'droid-e9db9',
    storageBucket: 'droid-e9db9.firebasestorage.app',
    iosBundleId: 'com.example.droid',
  );

  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: 'AIzaSyA0Vsaayr2jDfB_FEyHQ7PCJ30A51WUsc8',
    appId: '1:92831175770:ios:b69407f94ea150b993f463',
    messagingSenderId: '92831175770',
    projectId: 'droid-e9db9',
    storageBucket: 'droid-e9db9.firebasestorage.app',
    iosBundleId: 'com.example.droid',
  );
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/main.dart ===

// Starting applying full hardening fixes across your app...

// I'll update and split them carefully file by file.
// First file: main.dart

import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:provider/provider.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'core/theme_provider.dart';
import 'core/language_provider.dart';
import 'localization/l10n/app_localizations.dart';
import 'core/routes.dart';
import 'firebase_options.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  try {
    await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  } catch (e) {
    debugPrint('Firebase init failed: \$e');
  }
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => ThemeProvider()),
        ChangeNotifierProvider(create: (_) => LanguageProvider()),
      ],
      child: Consumer2<ThemeProvider, LanguageProvider>(
        builder: (context, themeProvider, languageProvider, _) {
          return MaterialApp.router(
            debugShowCheckedModeBanner: false,
            title: 'DSMobiles',
            themeMode: themeProvider.themeMode,
            theme: themeProvider.lightTheme,
            darkTheme: themeProvider.darkTheme,
            routerConfig: AppRouter.router,
            locale: languageProvider.locale,
            supportedLocales: const [Locale('en'), Locale('bn')],
            localizationsDelegates: const [
              AppLocalizations.delegate,
              GlobalMaterialLocalizations.delegate,
              GlobalWidgetsLocalizations.delegate,
              GlobalCupertinoLocalizations.delegate,
            ],
          );
        },
      ),
    );
  }
}



// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/news/widgets/animated_background.dart ===

// TODO Implement this library.

// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/main_navigation_screen.dart ===

// path: lib/main_navigation_screen.dart

import 'package:flutter/material.dart';
import 'features/home/home_screen.dart';
import 'features/magazine/magazine_screen.dart';
import 'features/news/newspaper_screen.dart';
import 'features/settings/settings_screen.dart';
import 'widgets/app_drawer.dart';
import 'localization/l10n/app_localizations.dart';

class MainNavigationScreen extends StatefulWidget {
  final int selectedTab;
  const MainNavigationScreen({super.key, this.selectedTab = 0});

  @override
  State<MainNavigationScreen> createState() => _MainNavigationScreenState();
}

class _MainNavigationScreenState extends State<MainNavigationScreen> {
  late int _currentIndex;

  static final List<Widget> _tabs = [
    const HomeScreen(),
    const NewspaperScreen(),
    const MagazineScreen(),
    const SettingsScreen(),
  ];

  @override
  void initState() {
    super.initState();
    _currentIndex = widget.selectedTab;
  }

  void _onItemTapped(int index) {
    if (_currentIndex != index) {
      setState(() => _currentIndex = index);
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final loc = AppLocalizations.of(context)!;

    // Define dynamic colors for each tab
    final List<Color> tabColors = [
      theme.colorScheme.primary,
      theme.colorScheme.secondary,
      theme.colorScheme.tertiary,
      theme.colorScheme.primary.withOpacity(0.8),
    ];

    final labels = [loc.home, loc.newspapers, loc.magazines, loc.settings];
    final icons = [
      Icons.home, Icons.article, Icons.book, Icons.settings,
    ];

    return Scaffold(
      drawer: const AppDrawer(),
      body: _tabs[_currentIndex],
      bottomNavigationBar: Container(
        decoration: BoxDecoration(
          color: theme.bottomNavigationBarTheme.backgroundColor ?? theme.colorScheme.surface,
          borderRadius: const BorderRadius.only(
            topLeft: Radius.circular(20),
            topRight: Radius.circular(20),
          ),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.05),
              blurRadius: 8,
              offset: const Offset(0, -2),
            ),
          ],
        ),
        child: BottomNavigationBar(
          backgroundColor: Colors.transparent,
          elevation: 0,
          currentIndex: _currentIndex,
          onTap: _onItemTapped,
          type: BottomNavigationBarType.fixed,
          showUnselectedLabels: true,
          selectedItemColor: tabColors[_currentIndex],
          unselectedItemColor: theme.colorScheme.onSurface.withOpacity(0.6),
          items: List.generate(_tabs.length, (index) {
            final isSelected = index == _currentIndex;
            final color = tabColors[index];
            return BottomNavigationBarItem(
              icon: AnimatedContainer(
                duration: const Duration(milliseconds: 300),
                padding: const EdgeInsets.all(6),
                decoration: isSelected
                    ? BoxDecoration(
                        shape: BoxShape.circle,
                        gradient: LinearGradient(
                          colors: [color.withOpacity(0.7), color],
                          begin: Alignment.topLeft,
                          end: Alignment.bottomRight,
                        ),
                        boxShadow: [
                          BoxShadow(
                            color: color.withOpacity(0.4),
                            blurRadius: 12,
                            offset: const Offset(0, 4),
                          ),
                        ],
                      )
                    : null,
                child: Icon(
                  icons[index],
                  size: isSelected ? 30 : 24,
                  color: isSelected ? Colors.white : null,
                ),
              ),
              label: labels[index],
            );
          }),
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/data/repositories/news_repository.dart ===

// lib/data/repositories/news_repository.dart

import '../services/news_service.dart';
import '../models/news_article.dart';

class NewsRepository {
  factory NewsRepository() => _instance;
  NewsRepository._internal();
  static final NewsRepository _instance = NewsRepository._internal();

  final NewsService _newsService = NewsService();

  /// ✅ Fetch latest news from RSS feeds
  Future<List<NewsArticle>> fetchLatestNews() async {
    return await _newsService.fetchLatestNews();
  }

  /// ✅ Fetch national news from RSS feeds
  Future<List<NewsArticle>> fetchNationalNews() async {
    return await _newsService.fetchNationalNews();
  }

  /// ✅ Fetch trending news from RSS feeds
  Future<List<NewsArticle>> fetchTrendingNews() async {
    return await _newsService.fetchTrendingNews();
  }

  /// ✅ Fetch technology news from RSS feeds
  Future<List<NewsArticle>> fetchTechNews() async {
    return await _newsService.fetchTechNews();
  }

  /// ✅ Fetch sports news from RSS feeds
  Future<List<NewsArticle>> fetchSportsNews() async {
    return await _newsService.fetchSportsNews();
  }

  /// ✅ Fetch entertainment news from RSS feeds
  Future<List<NewsArticle>> fetchEntertainmentNews() async {
    return await _newsService.fetchEntertainmentNews();
  }

  /// ✅ Fetch health news from RSS feeds
  Future<List<NewsArticle>> fetchHealthNews() async {
    return await _newsService.fetchHealthNews();
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/data/models/news_article.dart ===

// path: lib/data/models/news_article.dart

import 'package:webfeed_revised/webfeed_revised.dart';

class NewsArticle {
  NewsArticle({
    required this.title,
    this.description = '',
    required this.url,
    required this.source,
    this.imageUrl,
    this.language = 'en', // Default to English
    this.snippet = '',
    this.fullContent = '',
    required this.publishedAt,
    this.isLive = false,
  });

  final String title;
  final String description;
  final String url;
  final String source;
  final String? imageUrl;
  final String language;
  final String snippet;
  final String fullContent;
  final DateTime publishedAt;
  final bool isLive;

  /// Create from RSS item
  factory NewsArticle.fromRssItem(RssItem item) {
    final mediaUrl = item.media?.thumbnails?.firstOrNull?.url ??
        item.media?.contents?.firstOrNull?.url ??
        _extractImageFromEnclosure(item) ??
        _extractImageFromHtml(item.content?.value ?? item.description ?? '');

    return NewsArticle(
      title: item.title ?? '',
      description: item.description ?? '',
      url: item.link ?? '',
      source: item.source?.value ?? '',
      imageUrl: mediaUrl,
      language: item.dc?.language ?? 'en',
      publishedAt: item.pubDate ?? DateTime.now(),
    );
  }

  /// Create from Firebase or other JSON Map
  factory NewsArticle.fromMap(Map<String, dynamic> map) {
    return NewsArticle(
      title: map['title'] ?? '',
      description: map['description'] ?? '',
      url: map['url'] ?? '',
      source: map['source'] ?? '',
      imageUrl: map['imageUrl'],
      language: map['language'] ?? 'en',
      snippet: map['snippet'] ?? '',
      fullContent: map['fullContent'] ?? '',
      publishedAt: DateTime.tryParse(map['publishedAt'] ?? '') ?? DateTime.now(),
      isLive: map['isLive'] ?? false,
    );
  }

  /// Convert to JSON Map
  Map<String, dynamic> toMap() {
    return {
      'title': title,
      'description': description,
      'url': url,
      'source': source,
      'imageUrl': imageUrl,
      'language': language,
      'snippet': snippet,
      'fullContent': fullContent,
      'publishedAt': publishedAt.toIso8601String(),
      'isLive': isLive,
    };
  }

  static String? _extractImageFromEnclosure(RssItem item) {
    final url = item.enclosure?.url ?? '';
    return (url.endsWith('.jpg') || url.endsWith('.png')) ? url : null;
  }

  static String? _extractImageFromHtml(String html) {
    final RegExp imgTag = RegExp(r'<img[^>]+src="([^">]+)"');
    final match = imgTag.firstMatch(html);
    return match?.group(1);
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/data/services/news_service.dart ===

import '../models/news_article.dart';

class NewsService {
  Future<List<NewsArticle>> fetchLatestNews() async {
    // TODO: Implement real fetching logic.
    return <NewsArticle>[];
  }

  Future<List<NewsArticle>> fetchNationalNews() async {
    return <NewsArticle>[];
  }

  Future<List<NewsArticle>> fetchTrendingNews() async {
    return <NewsArticle>[];
  }

  Future<List<NewsArticle>> fetchTechNews() async {
    return <NewsArticle>[];
  }

  Future<List<NewsArticle>> fetchSportsNews() async {
    return <NewsArticle>[];
  }

  Future<List<NewsArticle>> fetchEntertainmentNews() async {
    return <NewsArticle>[];
  }

  Future<List<NewsArticle>> fetchHealthNews() async {
    return <NewsArticle>[];
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/data/services/socket_service.dart ===

// ignore: library_prefixes
import 'package:socket_io_client/socket_io_client.dart' as IO;
import 'package:flutter/material.dart';

class SocketService with ChangeNotifier {
  factory SocketService() => _instance;

  SocketService._internal();
  static final SocketService _instance = SocketService._internal();

  late IO.Socket socket;
  bool _connected = false;
  bool get connected => _connected;

  static const String serverUrl = 'https://droid-news-server.onrender.com'; // 🌐 Your deployed server

  void connect(Function(dynamic) onNewsReceived) {
    debugPrint('🚀 Attempting to connect to $serverUrl');

    socket = IO.io(
      serverUrl,
      <String, dynamic>{
        'transports': <String>['websocket', 'polling'], // Allow websocket + fallback
        'autoConnect': false,
        'reconnection': true,
        'reconnectionAttempts': 5,
        'reconnectionDelay': 2000, // 2 seconds
        'timeout': 5000, // 5 seconds timeout
      },
    );

    socket.connect();

    socket.onConnect((_) {
      _connected = true;
      notifyListeners();
      debugPrint('✅ Connected to Droid server!');
    });

    socket.on('news_update', (data) {
      debugPrint('📰 News received: $data');
      onNewsReceived(data);
    });

    socket.onDisconnect((reason) {
      _connected = false;
      notifyListeners();
      debugPrint('❌ Disconnected: $reason');
      reconnect(); // 💥 Auto Reconnect on disconnect
    });

    socket.onConnectError((err) {
      _connected = false;
      notifyListeners();
      debugPrint('⚠️ Connect Error: $err');
    });

    socket.onError((error) {
      debugPrint('🚨 General Socket Error: $error');
    });

    socket.onReconnectAttempt((attempt) {
      debugPrint('🔄 Attempting to reconnect... (Attempt #$attempt)');
    });

    socket.onReconnect((_) {
      _connected = true;
      notifyListeners();
      debugPrint('🔗 Successfully reconnected to server!');
    });

    socket.onReconnectFailed((_) {
      _connected = false;
      notifyListeners();
      debugPrint('🚫 Failed to reconnect after multiple attempts.');
    });
  }

  void disconnect() {
    if (socket.connected) {
      socket.disconnect();
      debugPrint('🔌 Manually disconnected from server.');
    }
    _connected = false;
    notifyListeners();
  }

  void reconnect() {
    if (!_connected) {
      debugPrint('♻️ Auto-reconnecting...');
      socket.connect();
    }
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/data/services/rss_service.dart ===

import 'dart:convert';
import 'package:webfeed_revised/webfeed_revised.dart';
import 'package:http/http.dart' as http;
import 'package:flutter/material.dart';

import '../models/news_article.dart';

class RssService {
  static const Map<String, Map<String, List<String>>> _feeds = {
    'bn': {
      'latest': [
        'https://www.prothomalo.com/feed',
        'https://www.kalerkantho.com/rss.xml',
        'https://bangla.bdnews24.com/rss/bangla.xml',
        'https://www.jugantor.com/rss.xml',
        'https://www.ittefaq.com.bd/rss.xml',
        'https://mzamin.com/rss.xml',
        'https://www.bhorerkagoj.com/feed',
        'https://www.dailynayadiganta.com/rss.xml',
        'https://www.samakal.com/rss.xml',
      ],
      'national': [
        'https://www.ittefaq.com.bd/rss.xml',
        'https://www.jugantor.com/rss.xml',
        'https://mzamin.com/rss.xml',
        'https://www.dailynayadiganta.com/rss.xml',
        'https://www.samakal.com/rss.xml',
        'https://www.kalerkantho.com/rss.xml',
        'https://www.bhorerkagoj.com/feed',
      ],
      'business': [
        'https://bangla.bdnews24.com/economy/rss.xml',
        'https://www.dhakatimes24.com/business/rss.xml',
        'https://www.arthosuchak.com/feed',
        'https://bonikbarta.net/rss.xml',
      ],
      'sports': [
        'https://www.prothomalo.com/sports/feed',
        'https://bangla.bdnews24.com/sport/rss.xml',
        'https://www.jugantor.com/sports/rss.xml',
        'https://mzamin.com/rss.xml',
      ],
      'technology': [
        'https://bangla.bdnews24.com/tech/rss.xml',
        'https://www.jugantor.com/technology/rss.xml',
        'https://techshohor.com/feed/',
        'https://trickbd.com/feed',
        'https://www.priyo.com/tech/rss.xml',
      ],
      'entertainment': [
        'https://bangla.bdnews24.com/entertainment/rss.xml',
        'https://www.prothomalo.com/entertainment/feed',
        'https://mzamin.com/rss.xml',
        'https://www.jugantor.com/entertainment/rss.xml',
      ],
      'lifestyle': [
        'https://roar.media/bangla/feed',
        'https://www.priyo.com/lifestyle/rss.xml',
        'https://www.sahos24.com/rss.xml',
      ],
      'blog': [
        'https://roar.media/bangla/feed',
        'https://www.priyo.com/blog/rss.xml',
      ]
    },
    'en': {
      'latest': [
        'https://rss.cnn.com/rss/edition.rss',
        'https://feeds.bbci.co.uk/news/rss.xml',
        'https://www.thedailystar.net/frontpage/rss.xml',
        'https://www.dhakatribune.com/feed',
      ],
      'national': [
        'https://www.dhakatribune.com/feed',
        'https://www.thedailystar.net/frontpage/rss.xml',
      ],
      'business': [
        'https://feeds.a.dj.com/rss/RSSMarketsMain.xml',
        'https://www.forbes.com/business/feed/',
        'https://www.ft.com/?format=rss',
        'https://www.businesstoday.in/rssfeedstopstories.cms',
      ],
      'sports': [
        'https://www.espn.com/espn/rss/news',
        'https://www.skysports.com/rss/12040',
        'https://www.sportingnews.com/us/rss',
      ],
      'technology': [
        'https://www.techradar.com/rss',
        'https://feeds.arstechnica.com/arstechnica/index',
        'https://thenextweb.com/feed',
      ],
      'entertainment': [
        'https://www.billboard.com/feed/',
        'https://variety.com/feed/',
        'https://www.hollywoodreporter.com/t/feed/',
      ],
      'lifestyle': [
        'https://www.lifehack.org/feed',
        'https://www.mindbodygreen.com/rss',
        'https://www.wellandgood.com/feed/',
      ],
      'blog': [
        'https://medium.com/feed/tag/technology',
        'https://daringfireball.net/feeds/main',
      ]
    },
  };

  static Map<String, List<String>>? getSafeFeeds(Locale locale) {
    final lang = locale.languageCode.split('-').first;
    return _feeds[lang];
  }

  static Future<List<NewsArticle>> fetchRssFeeds(List<String> urls) async {
    final client = http.Client();
    try {
      final responses = await Future.wait(urls.map((url) => _fetch(client, url)));
      return responses.expand((x) => x).toList();
    } finally {
      client.close();
    }
  }

  static Future<List<NewsArticle>> _fetch(http.Client client, String url) async {
    try {
      final response = await client.get(Uri.parse(url), headers: {
        'User-Agent': 'Mozilla/5.0'
      }).timeout(const Duration(seconds: 10));

      if (response.statusCode != 200) return [];

      final encoding = _extractEncoding(response.headers['content-type']);
      final body = encoding.decode(response.bodyBytes);
      final feed = RssFeed.parse(body);

      return feed.items
              ?.map((item) => NewsArticle.fromRssItem(item))
              .where((a) => a.title.isNotEmpty)
              .toList() ??
          [];
    } catch (_) {
      return [];
    }
  }

  static Encoding _extractEncoding(String? contentType) {
    final charset = contentType?.split('charset=').last ?? 'utf-8';
    return Encoding.getByName(charset) ?? utf8;
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/widgets/fade_transition_wrapper.dart ===

// lib/widgets/fade_transition_wrapper.dart

import 'package:flutter/material.dart';

class FadeTransitionWrapper extends PageRouteBuilder {
  
  FadeTransitionWrapper({required this.child})
      : super(
          transitionDuration: const Duration(milliseconds: 800),
          pageBuilder: (BuildContext context, Animation<double> animation, Animation<double> secondaryAnimation) => child,
          transitionsBuilder: (BuildContext context, Animation<double> animation, Animation<double> secondaryAnimation, Widget child) {
            return FadeTransition(
              opacity: animation,
              child: child,
            );
          },
        );
  final Widget child;
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/widgets/app_drawer.dart ===

import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:lottie/lottie.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';
import 'package:audioplayers/audioplayers.dart';

import '../core/theme_provider.dart';
import '../features/profile/auth_service.dart';
import '../localization/l10n/app_localizations.dart';

class AppDrawer extends StatefulWidget {
  const AppDrawer({super.key});

  @override
  State<AppDrawer> createState() => _AppDrawerState();
}

class _AppDrawerState extends State<AppDrawer> with TickerProviderStateMixin {
  late AnimationController _flagController;
  late AnimationController _flagFadeController;
  late Animation<double> _flagFadeAnimation;
  late AnimationController _tigerController;
  late Animation<Offset> _tigerAnimation;
  late AnimationController _avatarGlowController;
  late Animation<double> _avatarGlowAnimation;
  late final AudioPlayer _audioPlayer;

  Map<String, String>? _profile;
  bool _isLoadingProfile = true;

  @override
  void initState() {
    super.initState();
    _loadProfile();
    _flagController = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 3),
    )..repeat(reverse: true);
    _flagFadeController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 1200),
    );
    _flagFadeAnimation = CurvedAnimation(
      parent: _flagFadeController,
      curve: Curves.easeIn,
    );
    _flagFadeController.forward();
    _tigerController = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 1),
    )..repeat(reverse: true);
    _tigerAnimation = Tween<Offset>(
      begin: const Offset(0, 0),
      end: const Offset(0, -0.03),
    ).animate(
      CurvedAnimation(parent: _tigerController, curve: Curves.easeInOut),
    );
    _audioPlayer = AudioPlayer();
    Future.delayed(const Duration(seconds: 2), _playTigerRoar);
    _avatarGlowController = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 3),
    )..repeat(reverse: true);
    _avatarGlowAnimation = Tween<double>(begin: 10, end: 25).animate(
      CurvedAnimation(parent: _avatarGlowController, curve: Curves.easeInOut),
    );
  }

  @override
  void dispose() {
    _flagController.dispose();
    _flagFadeController.dispose();
    _tigerController.dispose();
    _avatarGlowController.dispose();
    _audioPlayer.dispose();
    super.dispose();
  }

  Future<void> _playTigerRoar() async {
    try {
      await _audioPlayer.play(AssetSource('sounds/tiger_roar.mp3'));
    } catch (e) {
      debugPrint('Tiger roar sound error: $e');
    }
  }

  Future<void> _loadProfile() async {
    _profile = await AuthService().getProfile();
    if (mounted) setState(() => _isLoadingProfile = false);
  }

  @override
  Widget build(BuildContext context) {
    final loc = AppLocalizations.of(context)!;
    final themeProvider = context.watch<ThemeProvider>();
    final appTheme = themeProvider.appThemeMode;
    final bool isDesh = appTheme == AppThemeMode.bangladesh;
    final size = MediaQuery.of(context).size;

    return Drawer(
      child: Column(
        children: [
          _buildHeader(context, loc),
          Expanded(
            child: isDesh ? _buildBodyWithGraphics(context, loc, size) : _buildBodyPlain(context, loc),
          ),
          _buildFooter(context, loc),
        ],
      ),
    );
  }

  Widget _buildHeader(BuildContext context, AppLocalizations loc) {
    return Stack(
      children: [
        ClipPath(
          clipper: WavyClipper(),
          child: Container(
            height: 220,
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [
                  Theme.of(context).primaryColor,
                  Theme.of(context).colorScheme.secondary,
                ],
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
              ),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.3),
                  blurRadius: 8,
                  offset: const Offset(0, 4),
                ),
              ],
            ),
          ),
        ),
        SafeArea(
          child: Container(
            width: double.infinity,
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 24),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                AnimatedBuilder(
                  animation: _avatarGlowAnimation,
                  builder: (context, child) {
                    return Container(
                      decoration: BoxDecoration(
                        shape: BoxShape.circle,
                        boxShadow: [
                          BoxShadow(
                            color: Theme.of(context).primaryColor.withOpacity(0.6),
                            blurRadius: _avatarGlowAnimation.value,
                            spreadRadius: 5,
                          ),
                          BoxShadow(
                            color: Colors.black.withOpacity(0.4),
                            blurRadius: 10,
                            offset: const Offset(0, 5),
                          ),
                        ],
                      ),
                      child: child,
                    );
                  },
                  child: CircleAvatar(
                    radius: 36,
                    backgroundColor: Colors.white,
                    backgroundImage: _profileImageProvider(),
                    child: _profileImageProvider() == null
                        ? const Icon(Icons.person, size: 36, color: Colors.grey)
                        : null,
                  ),
                ),
                const SizedBox(height: 12),
                Text(
                  _isLoadingProfile
                      ? loc.loadError
                      : (_profile?['name']?.isNotEmpty == true ? _profile!['name']! : loc.noUserConnected),
                  style: Theme.of(context).textTheme.titleLarge?.copyWith(
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                        shadows: [
                          Shadow(
                            blurRadius: 6,
                            color: Colors.black45,
                            offset: const Offset(1, 1),
                          ),
                        ],
                      ),
                ),
                const SizedBox(height: 6),
                Text(
                  loc.appTitle,
                  style: Theme.of(context).textTheme.bodySmall?.copyWith(
                        color: Colors.white70,
                      ),
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildBodyWithGraphics(BuildContext context, AppLocalizations loc, Size size) {
    return Stack(
      children: [
        Positioned.fill(
          child: Image.asset(
            'assets/icons/couple_only.png',
            fit: BoxFit.cover,
            alignment: Alignment.topCenter,
          ),
        ),
        Positioned(
          top: size.height * 0.05,
          left: size.width * 0.3,
          right: size.width * 0.3,
          child: FadeTransition(
            opacity: _flagFadeAnimation,
            child: Lottie.asset(
              'assets/animations/flag_wave.json',
              controller: _flagController,
              repeat: true,
              animate: true,
              height: 100,
            ),
          ),
        ),
        ListView(
          padding: const EdgeInsets.only(top: 8),
          children: _buildMenuItems(context, loc),
        ),
      ],
    );
  }

  Widget _buildBodyPlain(BuildContext context, AppLocalizations loc) {
    return ListView(
      padding: const EdgeInsets.only(top: 8),
      children: _buildMenuItems(context, loc),
    );
  }

  List<Widget> _buildMenuItems(BuildContext context, AppLocalizations loc) {
    return [
      _buildTile(context, Icons.home, loc.home, '/home'),
      _buildTile(context, Icons.favorite, loc.favorites, '/favorites'),
      _buildTile(context, Icons.person, loc.profile, '/profile'),
      _buildTile(context, Icons.info, loc.about, '/about'),
      _buildTile(context, Icons.help, loc.supports, '/supports'),
      _buildTile(context, Icons.search, loc.search, '/search'),
    ];
  }

  Widget _buildTile(BuildContext context, IconData icon, String title, String route) {
    return ListTile(
      leading: Icon(icon),
      title: Text(title),
      onTap: () {
        Navigator.of(context).pop();
        if (route == '/home') {
          context.go(route);
        } else {
          context.push(route);
        }
      },
    );
  }

  Widget _buildFooter(BuildContext context, AppLocalizations loc) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          ElevatedButton.icon(
            onPressed: () {
              Navigator.of(context).pop();
              context.go('/login');
            },
            icon: const Icon(Icons.logout),
            label: Text(loc.logout),
          ),
          SlideTransition(
            position: _tigerAnimation,
            child: SvgPicture.asset(
              'assets/icons/tiger.svg',
              height: 40,
            ),
          ),
        ],
      ),
    );
  }

  ImageProvider? _profileImageProvider() {
    if (_profile == null || _profile!['image'] == null || _profile!['image']!.isEmpty) return null;
    final path = _profile!['image']!;
    if (path.startsWith('http')) {
      return NetworkImage(path);
    } else if (path.startsWith('/')) {
      return FileImage(File(path));
    }
    return null;
  }
}

class WavyClipper extends CustomClipper<Path> {
  @override
  Path getClip(Size size) {
    var path = Path();
    path.lineTo(0, size.height - 30);
    var firstControlPoint = Offset(size.width / 4, size.height);
    var firstEndPoint = Offset(size.width / 2, size.height - 30);
    var secondControlPoint = Offset(size.width * 3 / 4, size.height - 90);
    var secondEndPoint = Offset(size.width, size.height - 30);

    path.quadraticBezierTo(
        firstControlPoint.dx, firstControlPoint.dy,
        firstEndPoint.dx, firstEndPoint.dy);
    path.quadraticBezierTo(
        secondControlPoint.dx, secondControlPoint.dy,
        secondEndPoint.dx, secondEndPoint.dy);
    path.lineTo(size.width, 0);
    path.close();
    return path;
  }

  @override
  bool shouldReclip(CustomClipper<Path> oldClipper) => false;
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/widgets/error_widget.dart ===

import 'package:flutter/material.dart';

class ErrorDisplay extends StatelessWidget {

  const ErrorDisplay({required this.message, required this.onRetry, super.key});
  final String message;
  final VoidCallback onRetry;

  @override
  Widget build(BuildContext context) {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(24.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            const Icon(Icons.error_outline, color: Colors.redAccent, size: 60),
            const SizedBox(height: 16),
            Text(
              message,
              textAlign: TextAlign.center,
              style: const TextStyle(fontSize: 18, fontWeight: FontWeight.w500),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: onRetry,
              child: const Text('Retry'),
            ),
          ],
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/widgets/favorite_button.dart ===

import 'package:flutter/material.dart';
import '../../data/models/news_article.dart';
import '../../core/utils/favorites_manager.dart';

class FavoriteButton extends StatefulWidget {
  const FavoriteButton({
    super.key,
    required this.article,
    this.onFavoriteChanged,
  });

  final NewsArticle article;
  final VoidCallback? onFavoriteChanged;

  @override
  State<FavoriteButton> createState() => _FavoriteButtonState();
}

class _FavoriteButtonState extends State<FavoriteButton> {
  bool _isFavorite = false;

  @override
  void initState() {
    super.initState();
    _loadFavoriteStatus();
  }

  Future<void> _loadFavoriteStatus() async {
    final status = FavoritesManager.instance.favoriteArticles
        .any((article) => article.url == widget.article.url);
    setState(() => _isFavorite = status);
  }

  Future<void> _toggleFavorite() async {
    if (_isFavorite) {
      await FavoritesManager.instance.removeFavorite(widget.article);
    } else {
      await FavoritesManager.instance.addFavorite(widget.article);
    }
    await _loadFavoriteStatus();
    widget.onFavoriteChanged?.call();
  }

  @override
  Widget build(BuildContext context) {
    return Semantics(
      label: _isFavorite ? 'Remove from favorites' : 'Add to favorites',
      button: true,
      child: IconButton(
        icon: Icon(
          _isFavorite ? Icons.favorite : Icons.favorite_border,
          color: _isFavorite ? Colors.redAccent : Colors.grey,
        ),
        onPressed: _toggleFavorite,
        tooltip: _isFavorite ? 'Unfavorite' : 'Favorite',
      ),
    );
  }
}

// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/widgets/loading_widget.dart ===

import 'package:flutter/material.dart';
import 'package:shimmer/shimmer.dart';

class LoadingWidget extends StatelessWidget {
  const LoadingWidget({
    super.key,
    this.height = 150,
    this.width = double.infinity,
    this.radius = 16,
  });

  final double height;
  final double width;
  final double radius;

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final isDark = theme.brightness == Brightness.dark;

    return Semantics(
      label: 'Loading content',
      child: Shimmer.fromColors(
        baseColor: isDark ? Colors.grey.shade800 : Colors.grey.shade300,
        highlightColor: isDark ? Colors.grey.shade600 : Colors.grey.shade100,
        child: Container(
          height: height,
          width: width,
          decoration: BoxDecoration(
            color: theme.cardColor,
            borderRadius: BorderRadius.circular(radius),
          ),
        ),
      ),
    );
  }
}


// === /Users/debashishdeb/Documents/JS/MobileApp/droid/lib/localization/l10n/app_localizations.dart ===



import 'package:flutter/material.dart';

class AppLocalizations {
  final Locale locale;
  AppLocalizations(this.locale);

  static AppLocalizations of(BuildContext context) =>
      Localizations.of<AppLocalizations>(context, AppLocalizations)!;

  static const LocalizationsDelegate<AppLocalizations> delegate = _AppLocalizationsDelegate();

  // General UI
  String get close => _t('বন্ধ করুন', 'Close');
  String get home => _t('হোম', 'Home');
  String get profile => _t('প্রোফাইল', 'Profile');
  String get editProfile => _t('প্রোফাইল সম্পাদনা', 'Edit Profile');
  String get settings => _t('সেটিংস', 'Settings');
  String get theme => _t('থিম', 'Theme');
  String get language => _t('ভাষা', 'Language');
  String get darkMode => _t('ডার্ক মোড', 'Dark Mode');
  String get version => _t('সংস্করণ', 'Version');
  String get versionPrefix => _t('সংস্করণ', 'Version');
  String get bdNewsHub => _t('বিডিনিউজ হাব 📰', 'BDNews Hub 📰');

  // Auth
  String get login => _t('লগইন', 'Login');
  String get logout => _t('লগআউট', 'Logout');
  String get signup => _t('সাইন আপ', 'Sign Up');
  String get password => _t('পাসওয়ার্ড', 'Password');
  String get email => _t('ইমেইল', 'Email');
  String get search => _t('অনুসন্ধান করুন ', 'Search');
  String get help => _t('সাহায্য', 'Help');
  String get appTitle => _t('বিডিনিউজ হাব', 'BDNews Hub');
  String get fullName => _t('পুরো নাম', 'Full Name');
  String get name => _t('নাম', 'Name');
  String get enterName => _t('নাম লিখুন','Enter Name');
  String get save => _t('সংরক্ষণ করুন', 'Save');
  String get enterEmail => _t('ইমেল লিখুন', 'Enter Email'); 
  String get forgotPassword => _t('পাসওয়ার্ড ভুলে গেছেন', 'Forgot Password');
  String get sendResetLink => _t('রিসেট লিঙ্ক পাঠান', 'Send Reset Link');
  String get enterEmailReset => _t('পাসওয়ার্ড রিসেট করতে আপনার ইমেল লিখুন:', 'Enter your email to reset your password:');
  String get alreadyHaveAccount => _t('ইতিমধ্যে একটি অ্যাকাউন্ট আছে?', 'Already have an account? Login');
  String get createAccount => _t('অ্যাকাউন্ট তৈরি করুন', 'Create account');
  String get invalidCredentials => _t('ভুল ইমেইল বা পাসওয়ার্ড।', 'Invalid email or password.');
  String get noAccountFound => _t('এই ইমেইলে কোন অ্যাকাউন্ট নেই।', 'No account found for this email.');
  String get accountExists => _t('এই ইমেইলে ইতিমধ্যে অ্যাকাউন্ট আছে।', 'An account already exists with this email.');
  String get resetEmailSent => _t('📧 পাসওয়ার্ড রিসেট ইমেইল পাঠানো হয়েছে!', '📧 Password reset email sent!');

  // Profile Fields
  String get phone => _t('ফোন', 'Phone');
  String get bio => _t('জীবন বৃত্তান্ত', 'Bio');
  String get address => _t('ঠিকানা', 'Address');
  String get website => _t('ওয়েবসাইট', 'Website');
  String get role => _t('ভূমিকা', 'Role');
  String get department => _t('বিভাগ', 'Department');
  String get changeImage => _t('ছবি পরিবর্তন করুন', 'Change Image');
  String get removeImage => _t('ছবি অপসারণ', 'Remove Image');
  String get noUserConnected => _t('কোনো ব্যবহারকারী সংযুক্ত নেই', 'No user connected yet');

  // Editor Features
  String get saveChanges => _t('পরিবর্তনগুলি সংরক্ষণ করুন', 'Save Changes');
  String get profileSaved => _t('প্রোফাইল সংরক্ষিত', 'Profile saved');
  String get required => _t('আবশ্যক', 'Required');
  String get details => _t('বিস্তারিত', 'Details');
  // News Categories
  String get latest => _t('সর্বশেষ', 'Latest');
  String get newspapers => _t('সংবাদপত্র', 'Newspapers');
  String get magazines => _t('ম্যাগাজিন', 'Magazines');
  String get favorites => _t('প্রিয়', 'Favorites');
  String get national => _t('জাতীয়', 'National');
  String get international => _t('আন্তর্জাতিক', 'International');
  String get businessFinance => _t('ব্যবসা ও অর্থনীতি', 'Business & Finance');
  String get digitalTech => _t('ডিজিটাল ও প্রযুক্তি', 'Digital & Technology');
  String get sportsNews => _t('খেলার খবর', 'Sports News');
  String get entertainmentArts => _t('বিনোদন ও শিল্প', 'Entertainment & Arts');
  String get worldPolitics => _t('বিশ্ব ও রাজনীতি', 'World & Politics');
  String get blog => _t('ব্লগ', 'Blog');
  String get business => _t('ব্যবসা', 'Business');
  String get sports => _t('খেলা', 'Sports');
  String get technology => _t('প্রযুক্তি', 'Technology');
  String get entertainment => _t('বিনোদন', 'Entertainment');
  String get lifestyle => _t('জীবনধারা', 'LifeStyle');

  // Premium Features
  String get bangladeshTheme => _t('দেশ 🇧🇩', 'Desh 🇧🇩');
  String get adFree => _t('বিজ্ঞাপনবিহীন অভিজ্ঞতা', 'Ad-Free Experience');
  String get adFreeHint => _t('পরিষ্কার পড়ার অভিজ্ঞতার জন্য বিজ্ঞাপন সরানো হয়।', 'Removes all ads for a clean reading experience.');
  String get offlineDownloads => _t('অফলাইন ডাউনলোড', 'Offline Downloads');
  String get offlineHint => _t('অফলাইনে দেখার জন্য কনটেন্ট সংরক্ষণ করুন।', 'Save content locally for offline viewing.');
  String get prioritySupport => _t('প্রাধান্য সহায়তা', 'Priority Support');
  String get prioritySupportHint => _t('সহায়তা টিম থেকে দ্রুত সহায়তা।', 'Get faster responses from our support team.');

  // Search and Empty States
  String get searchHint => _t('সন্ধান করুন...', 'Search...');
  String get searchPapers => _t('পত্রিকা খুঁজুন…', 'Search…');
  String get noMagazines => _t('কোন ম্যাগাজিন পাওয়া যায়নি', 'No magazines found');
  String get noPapersFound => _t('কোন সংবাদপত্র পাওয়া যায়নি', 'No papers found');
  String get allLanguages => _t('সব ভাষা', 'All Languages');

  // Categories for Magazines
  String get catFashion => _t('ফ্যাশন ও সৌন্দর্য', 'Fashion & Aesthetics');
  String get catScience => _t('বিজ্ঞান ও আবিষ্কার', 'Science & Discovery');
  String get catFinance => _t('অর্থনীতি ও অর্থ', 'Economics & Finance');
  String get catAffairs => _t('আন্তর্জাতিক সম্পর্ক', 'Global Affairs');
  String get catTech => _t('প্রযুক্তি', 'Emerging Technologies');
  String get catArts => _t('শিল্প ও মানবিকতা', 'Arts & Humanities');
  String get catLifestyle => _t('জীবনধারা ও বিলাসিতা', 'Lifestyle & Luxury');
  String get catSports => _t('খেলা ও পারফরম্যান্স', 'Sports & Performance');

  // Feedback
  String get feedback => _t('প্রতিক্রিয়া', 'Feedback');
  String get rateApp => _t('অ্যাপ রেট দিন', 'Rate this App');
  String get contactSupport => _t('সহায়তা যোগাযোগ', 'Contact Support');
  String get contactEmail => 'customerservice@dsmobiles.com';
  String get mailClientError => _t('মেইল ক্লায়েন্ট চালু করা যায়নি।', 'Could not launch mail client.');
  String get storeOpenError => _t('স্টোর খুলতে অক্ষম।', 'Unable to open store.');
  String get viewArticle => _t('নিবন্ধ দেখুন', 'View Article');
  String get loadError => _t('লোড করতে ব্যর্থ', 'Load failed');
  String get getStarted => _t('শুরু করুন', 'Get Started');
  String get next => _t('পরবর্তী', 'Next');
  String get fastReliable => _t('দ্রুত এবং নির্ভরযোগ্য', 'Fast & Reliable');
  String get personalizedExperience => _t('ব্যক্তিগত অভিজ্ঞতা', 'Personalized Experience');
  String get favoriteArticles=> _t('প্রিয় প্রবন্ধ', 'Favorite Articles');
  String get favoriteMagazines => _t('প্রিয় ম্যাগাজিন', 'Favorite Magazines');
  String get favoriteNewspapers => _t('প্রিয় সংবাদপত্র', 'Favorite Newspapers');
  String get noFavoritesYet => _t('কোনও প্রিয় নেই', 'No Favorites Yet');



  String get bangla => _t('বাংলা', 'Bengali');
  String get english => _t('ইংরেজি', 'English');
  String get supports => _t('সাপোর্ট', 'Supports');
  String get health => _t('স্বাস্থ্য', 'Health');
  String get opinion => _t('মতামত', 'Opinion');
  String get about => _t('সম্পর্কে', 'About');
  String get education => _t('শিক্ষা', 'Education');

  // Dynamic Translation Helper
  String _t(String bn, String en) => locale.languageCode == 'bn' ? bn : en;
}

class _AppLocalizationsDelegate extends LocalizationsDelegate<AppLocalizations> {
  const _AppLocalizationsDelegate();

  @override
  bool isSupported(Locale locale) => ['en', 'bn'].contains(locale.languageCode);

  @override
  Future<AppLocalizations> load(Locale locale) async => AppLocalizations(locale);

  @override
  bool shouldReload(covariant LocalizationsDelegate<AppLocalizations> old) => false;
}


